<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>日本語</title>
    <link href="/2022/01/17/otherSkill/%E6%97%A5%E6%9C%AC%E8%AA%9E/"/>
    <url>/2022/01/17/otherSkill/%E6%97%A5%E6%9C%AC%E8%AA%9E/</url>
    
    <content type="html"><![CDATA[<p>mo yu.</p><a id="more"></a><h2 id="1-句式"><a href="#1-句式" class="headerlink" title="1.句式"></a>1.句式</h2><h3 id="1-1-存在句"><a href="#1-1-存在句" class="headerlink" title="1.1 存在句"></a>1.1 存在句</h3><p>１．<code>あります</code>    花草等不具意志的事物</p><p>２．<code>います</code>    人或动物等有意志的事物</p><p>句式1：场所<code>に</code>+人/物<code>が</code> + あります・います</p><p><strong>例</strong>：机「つくえ」の上「うえ」に猫がいます。    桌子上有只猫。</p><p>​        部屋「へや」に椅子「いす」があります。    屋里有把椅子。  </p><p>句式2：人/物<code>は</code>＋场所<code>に</code>＋あります・います</p><p><strong>例</strong>：猫は机の上にいます。    猫在桌子上。</p><p>​        椅子は部屋「へや」にあります。    椅子在屋里。</p><p>遵从“が前は后”</p><h3 id="1-2-从到"><a href="#1-2-从到" class="headerlink" title="1.2  从到"></a>1.2  从<del>到</del></h3><p>「から」： ~ 的起点（时间、空间、顺序等）</p><p>「まで」： ~ 的终点（同上）</p><p>两者均可单独使用，后面以「です」结句。</p><p><strong>例</strong>：</p><p>​    授業「じゅぎょ,  ju gyo」は七時「しちじ」からです。　课程七点开始。</p><p>​    授業は八時までです。　课程到八点为止。</p><p>连起来使用：「～から～までです」，即“从…到…”</p><p><strong>例</strong>：</p><p>​    授業は七時から八時までです。　课程从起七点开始到八点结束。</p><h3 id="1-3-全面否定"><a href="#1-3-全面否定" class="headerlink" title="1.3 全面否定"></a>1.3 全面否定</h3><p>句式「疑问词+も+动词否定」，表示全面否定</p><p><strong>例</strong>：</p><p>​    （１）教室「きょしつ」に　誰「だれ」も　いません。　教室里谁也没有。</p><p>​    （２）昨日「きの」、何「なに」も　買いません でした(过去式)。　昨天什么也没买。</p><h2 id="2-时态"><a href="#2-时态" class="headerlink" title="2.时态"></a>2.时态</h2><ol><li><p>过去时</p></li><li><p>非过去时</p><p>a.当前的状态或将来的动作。</p><p>b.经常性，习惯性的动作或状态</p></li></ol><h2 id="3-动词"><a href="#3-动词" class="headerlink" title="3.动词"></a>3.动词</h2><p><strong>动词</strong>：说明事物的动作、状态、存在和变化的词（中文里的形容词在日语中被归为状态动词）</p><p>1.动作：走る「はしる」、飛ぶ「とぶ」、歩く「あるく」、、、</p><p>2.状态：疲れる「つかれる」、優れる「すぐれる」、、、（疲惫的，优秀的）</p><p>3.存在：ある    いる</p><p>4.变化：なる</p><p>词尾加上う段的假名，る、く、ぶ等等</p><h3 id="3-1动词分类"><a href="#3-1动词分类" class="headerlink" title="3.1动词分类"></a>3.1动词分类</h3><p><strong>一类</strong>：词尾在う段</p><p><strong>二类</strong>：</p><ol><li><p>词尾是る</p></li><li><p>倒数第二个假名是い段（起き「おき」る，起床）或え段（食べ「たべ」る，吃）。</p><p>也有少数特殊的例外，看上去像二类实则为一类的动词，如走る「はしる」、入る「はいる」（跑，进入）</p></li></ol><p><strong>三类</strong>：</p><ol><li>来「く」る（只有这一个）</li><li>する　做、干、搞、打、决定、变化等</li><li>动作性名词+する，如勉強「べんきょ」する，</li></ol><h3 id="3-2动词的非过去时"><a href="#3-2动词的非过去时" class="headerlink" title="3.2动词的非过去时"></a>3.2动词的非过去时</h3><ol><li>表示<strong>经常性</strong>、<strong>习惯性</strong>、<strong>反复性</strong>的动作</li><li>表示<strong>将来</strong>的动作</li></ol><ul><li><p>动词的敬体非过去时（ます形）</p><p><strong>一类</strong>：「う」段假名变「い」段假名，再接ます。</p><p>例：行「い」く　ーー　行きます　　　</p><p>​        降「ふ」る　ーー 　降ります</p><p><strong>二类</strong>：去掉词尾的「る」，然后接「ます」</p><p>例：食べます　　起きます</p><p><strong>三类</strong>：</p><p>例：来る「くる」　ーー　来ます（きます）</p><p>​        する　ーー　します</p><p>　　其他动作性名词+”する”的变法都是根据する进行变形，如：勉強「べんきょ」しま　        す、研究「けんきゅ」します</p><p>​        </p><table><thead><tr><th>非过去时肯定</th><th>非过去时否定</th><th>过去时肯定</th><th>过去时否定</th></tr></thead><tbody><tr><td>ます</td><td>ません</td><td>ました</td><td>ませんでした</td></tr><tr><td>行きます</td><td>行きません</td><td>行きました</td><td>行きませんでした</td></tr><tr><td>食べます</td><td>食べません</td><td>食べました</td><td>食べませんでした</td></tr></tbody></table></li></ul><h2 id="4-助词"><a href="#4-助词" class="headerlink" title="4.助词"></a>4.助词</h2><h3 id="4-1-は"><a href="#4-1-は" class="headerlink" title="4.1 は"></a>4.1 は</h3><p>「は」</p><ol><li><p>是（A是B）</p></li><li><p>提示主题</p></li><li><p>表示对比</p><p>通常有「が」「でも」等表示转折的词来提示，构成句式</p><p>「～は～が、（でも）～は～」</p></li><li></li></ol><h3 id="4-2-ね、语气终助词"><a href="#4-2-ね、语气终助词" class="headerlink" title="4.2 ね、语气终助词"></a>4.2 ね、语气终助词</h3><p>ね ，确认的语气终助词</p><p>1.ね接在句末</p><p>2.向对方进行确认，或希望得到对方的赞同</p><p>3.表示感叹</p><p>ここは大学「だいがく」ですね。　这里是大学吧！（2/3，取决于语调）</p><p>明日「あした」は休み「やすみ」ありませんね    明天休息吧？（2，不上班吧？）</p><h3 id="4-3-に，补格助词"><a href="#4-3-に，补格助词" class="headerlink" title="4.3 に，补格助词"></a>4.3 に，补格助词</h3><p>に，接在确切时间的后面，表示动作发生的具体时间</p><p><strong>例</strong>：毎朝、八時半に起きます。　八点半起床。</p><p>注意1：不接在不确切时间的后面。如：毎日「まいにち」、今日「きょ」、昨日「きの」、明日「あした」、去年「きょねん」、先月「せんげつ」</p><p>注意2：可接在特定的时间后面。四季，假期，星期等等，如：春「はる」に、夏「なつ」に、秋「あき」に、冬「ふゆ」に、夏休み「なつやすみ」に。</p><h3 id="4-4-で"><a href="#4-4-で" class="headerlink" title="4.4 で"></a>4.4 で</h3><p>で，接在名词后，提示方法，手段，工具。</p><p><strong>例</strong>：（1）毎朝、バスで　学校「がっこ」へ行きます。　每天坐公交去学校。</p><p>​        （2）中国人「ちゅうごくじん」は　 箸「はし」で　ご飯を食べます。　中国人用筷子吃饭。</p><p>注意：走路直接用「歩（ある）いて」，不另外接で。</p><h3 id="4-5-と"><a href="#4-5-と" class="headerlink" title="4.5 と"></a>4.5 と</h3><p>と，接在名词后面，表示同一动作的参与者。相当于“和”。</p><p><strong>例</strong>：（1）毎朝、八時に友達と　公園「こうえん」。 每天早上八点和朋友去公园。</p><p>​        （2）私は妹と学校「がっこ、gakko」に来「き」ます。我和妹妹来学校。</p><h3 id="4-6-へ"><a href="#4-6-へ" class="headerlink" title="4.6 へ"></a>4.6 へ</h3><p>へ，接在地点名词后面，表示动作的目的地。侧重强调动作的方向（注意这里要读作e而不是he）</p><p><strong>例</strong>：（1）毎朝、８時半「はちじはん」に公園へ行きます。</p><p>​                  每天早上8点半去公园。（往公园那边走）</p><p>​        （2）９時「くじ」に学校へ来ます。</p><p>​                  ９点来学校。</p><h3 id="4-7-に"><a href="#4-7-に" class="headerlink" title="4.7 に"></a>4.7 に</h3><p>に，接在地点名词后面，表示动作的目的地。侧重强调动作的最终目的地</p><p><strong>例</strong>：（1）毎朝、８時半「はちじはん」に公園へ行きます。</p><p>​                  每天早上8点半去公园。（8点半会到达公园）</p><p>​        （2）９時「くじ」に学校へ来ます。</p><p>​                  ９点来学校。</p><h3 id="4-8-こ、そ、あ、ど"><a href="#4-8-こ、そ、あ、ど" class="headerlink" title="4.8 こ、そ、あ、ど"></a>4.8 こ、そ、あ、ど</h3><p>「こそあど」用于文脉指示。除了可以指示空间距离的事物，还可以用于指戴文章、对话中的事物。</p><p>（1）谈话中的事物指代：</p><p>あ：指代<strong>双方都知道</strong>的事物。</p><p>そ：指代<strong>一方知道另一方不知道</strong>，或<strong>双方都不知道</strong>的事物。 </p><p>​        <strong>例</strong>：その人は誰ですか。那个人是谁啊？</p><p>（2）文章内容的指代：</p><p>こ：指代<strong>前文提及</strong>的内容，或后文即将提及的内容。</p><p>そ：指代<strong>前文提及</strong>的内容</p><p>あ：一般用于<strong>书信</strong>或<strong>回忆性文章</strong>。指代<strong>双方都知道</strong>的事物。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-router两种模式原理</title>
    <link href="/2021/08/04/vue-router%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/04/vue-router%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>vue-router的hash、history两种模式的原理以及优缺点</p><a id="more"></a><p>两种模式，创建路由实例时指定<code>mode: &#39;hash&#39;(&#39;history&#39;)</code></p><h1 id="一、hash模式"><a href="#一、hash模式" class="headerlink" title="一、hash模式"></a>一、hash模式</h1><p><strong>本质是利用了window.onhashchange属性</strong></p><blockquote><p>当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 <strong>hashchange</strong> 事件（参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location"><code>location.hash</code></a>）。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>测试一下<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onhashchange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(event.oldURL,event.newURL)</span><br><span class="javascript">            <span class="hljs-keyword">let</span> hash = location.hash.slice(<span class="hljs-number">1</span>);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.style.color = hash;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>缺点：只能操作<code>#</code>后的片段，下文的<code>history</code>则没有这个限制</p><h1 id="二、history模式"><a href="#二、history模式" class="headerlink" title="二、history模式"></a>二、history模式</h1><p><strong>本质是利用window.history对象</strong></p><blockquote><p>DOM <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>window</code></a> 对象通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/history"><code>history</code></a> 对象提供了对浏览器的会话历史的访问。允许你在用户浏览历史中向前和向后跳转，同时——从HTML5开始——提供了对history栈中内容的操作</p></blockquote><p>history实质是什么？可以F12打开控制台，键入window.history看看</p><ul><li>length</li><li>scrollRestoration</li><li>state <Object></li></ul><p>下面两个函数用于保存路径的状态</p><ul><li><p>pushState</p><p>通过pushstate把页面的状态保存在state对象中，当页面的url再变回这个url时，可以通过event.state取到这个state对像，从而可以对页面状态进行还原</p></li><li><p>popState</p><p>只有在做出回退操作时，才会触发该事件</p></li></ul><p><strong>后退</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.history.back();<br></code></pre></div></td></tr></table></figure><p><strong>前进</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.history.forward();<br></code></pre></div></td></tr></table></figure><p><strong>跳转</strong>(前进/后退n次）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.history.go(<span class="hljs-number">2</span>);<span class="hljs-comment">// 前进两次，相当于执行两次forward()</span><br><span class="hljs-built_in">window</span>.history.go(-<span class="hljs-number">2</span>);<span class="hljs-comment">// 后退两次，相当于执行两次back()</span><br></code></pre></div></td></tr></table></figure><p><strong>设置状态</strong>(不同的url保存不同的state)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">history.pushState(&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>&#125;)<br><span class="hljs-built_in">window</span>.onpopstate = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(event.state)<br>  <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">event.state &amp;&amp; event.state.color === <span class="hljs-string">&#x27;red&#x27;</span></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.body.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="两者对F5刷新的处理："><a href="#两者对F5刷新的处理：" class="headerlink" title="两者对F5刷新的处理："></a>两者对F5刷新的处理：</h1><p><strong>hash</strong></p><p>例如：<a href="http://www.test.com/#/inde">http://www.test.com/#/inde</a></p><p>刷新后，发送请求<a href="http://www.test.com(/#%E5%89%8D%E7%9A%84%E9%83%A8%E5%88%86%EF%BC%89">http://www.test.com（#前的部分）</a></p><p><strong>history</strong></p><p>例如：<a href="http://www.test.com/inde">http://www.test.com/inde</a></p><p>刷新后，发送请求<a href="http://www.test.com/inde">http://www.test.com/inde</a></p><p>显然history模式下是有可能出现404的</p><h2 id="缺点小结"><a href="#缺点小结" class="headerlink" title="缺点小结"></a>缺点小结</h2><p>hash：只能操作<code>#</code>后的片段，下文的<code>history</code>则没有这个限制</p><p>history：有可能出现404的情况</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https证书模式详解</title>
    <link href="/2021/07/24/interview/10-https%E8%AF%81%E4%B9%A6%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/07/24/interview/10-https%E8%AF%81%E4%B9%A6%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>最近想起https相关的内容，有点遗忘了，网上一搜全是缺胳膊少腿的抄袭文章….</p><p>不过，在吐槽别人做的东西难用时，不妨想想自己能不能整理个更好的出来。</p><a id="more"></a><p>本文主要解释<strong>证书生成</strong>以及<strong>证书校验</strong>。关于服务端与客户端通信的部分有空再补充。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/interview/https.png"></p><h2 id="一、什么是证书"><a href="#一、什么是证书" class="headerlink" title="一、什么是证书"></a>一、什么是证书</h2><p>以我自己的网站为例，点开锁头，选中证书就能看到证书里的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/interview/cert.png"></p><h2 id="二、证书的生成"><a href="#二、证书的生成" class="headerlink" title="二、证书的生成"></a>二、证书的生成</h2><p><strong>证书来源</strong>：合法的证书是由第三方的权威机构（CA）颁发的。我自己用的是<a href="https://letsencrypt.org/">let’s  encrypt</a>提供的。（因为他家的是免费的….卑微.jpg）。</p><p><strong>生成原理</strong>：再次贴下流程图，看左边部分。CA根据你的网站信息，用Hash算法生成Hash值，再用CA的私钥生成数字签名（chrome把这个翻译成指纹，很形象）。这里可以看作为证书由<code>基本信息</code>+<code>指纹</code>组成，方便理解。</p><p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/interview/https.png" alt="绘制图片好难啊，懒.."></p><h2 id="三、保证安全通信的原理"><a href="#三、保证安全通信的原理" class="headerlink" title="三、保证安全通信的原理"></a>三、保证安全通信的原理</h2><p><strong>校验原理</strong>：其实也很简单。</p><p>第一步：根据证书里的基本信息来计算出<code>Hash值1</code>。比如我的证书基本信息里就注明了签名算法是sha256。</p><p>第二步：根据系统自带的各大权威机构的公钥，解密网站证书的指纹，得到<code>Hash值2</code>。（各大权威机构的证书在电脑生产出厂时就已经安装好了（已信任））</p><p>第三步：对比<code>Hash值1</code>和<code>Hash值2</code>，相等则认证通过。</p><p><strong>由于黑客没有CA的私钥，所以是无法伪造指纹的。</strong></p><h2 id="四、攻破"><a href="#四、攻破" class="headerlink" title="四、攻破"></a>四、攻破</h2><p>没想到吧，应该很少人会去想怎么攻破https这种安全模式。以目前的计算机计算能力来说，理论上https是不可破的。我们观察一下上面的流程图，不难发现其精髓在于引入CA这个第三方证人。</p><p>那么，思路可以有了</p><p>思路1：收买CA，得到私钥。</p><p>思路2：诱骗用户在电脑上安装黑客的证书（信任此证书），这样黑客就可以充当冒牌的CA，签发冒牌的证书。当用户访问正规网站时，如果被黑客劫持请求，并返回给你冒牌证书，那么接下来用户发出的请求都将被破译。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记:ant-design-vue里layout的Bug</title>
    <link href="/2021/06/26/%E8%AE%B0-ant-design-vue%E9%87%8Clayout%E7%9A%84Bug/"/>
    <url>/2021/06/26/%E8%AE%B0-ant-design-vue%E9%87%8Clayout%E7%9A%84Bug/</url>
    
    <content type="html"><![CDATA[<p>最近在给项目升级ant-design-vue组件库的时候，发现新版里Layout组件的一个bug。</p><a id="more"></a><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>可以看到，2.1.2版本的layout组件缺失了默认样式<code>ant-layout</code>。</p><p><img src="https://img-blog.csdnimg.cn/20210626102844248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="2.1.2版本"></p><p>查看了下github仓库的更新记录，这个问题从2.0.1开始出现，太巧了，我们原本用的是2.0.0，那时候还是正常的，可以看到有默认样式<code>ant-layout</code>（其他class是自己定义的）</p><p><img src="https://img-blog.csdnimg.cn/2021062610271156.png" alt="2.0.0版本"></p><p>官方更新记录里提到，在2.2.0-beta.2重写了layout组件，试了下，果然在这个版本往前到2.0.1都有这个bug。</p><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>把antd的库clone下来，切到tag为2.0.1的版本，看看啥情况</p><p>定位到<code>layout.tsx</code>里的<code>generator</code>函数, 里面有一段是这样的，props预定义的内容包括样式名，标签名等等（具体不同组件应该是不同的），prefixCls属性里存的其实就是最终得到的样式类名。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props, &#123; slots &#125;</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; getPrefixCls &#125; = inject(<span class="hljs-string">&#x27;configProvider&#x27;</span>, defaultConfigProvider);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">prefixCls</span>: customizePrefixCls &#125; = props;<br>        <span class="hljs-keyword">const</span> prefixCls = getPrefixCls(suffixCls, customizePrefixCls);<br>        <span class="hljs-keyword">const</span> basicComponentProps = &#123;<br>            prefixCls,<br>            ...props,<br>            tagName,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;BasicComponent &#123;...basicComponentProps&#125;&gt;<br>                &#123;flattenChildren(slots.default?.())&#125;<br>            &lt;/BasicComponent&gt;<br>        );<br>    &#125;;<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>对比2.2.0-beta.2版本的源码。说实话好像没太大差别，useConfigInject最后调用的还是getPrefixCls这个方法，好像没差别啊！</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props, &#123; slots &#125;</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; prefixCls &#125; = useConfigInject(suffixCls, props);<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> basicComponentProps = &#123;<br>            ...props,<br>            prefixCls: prefixCls.value,<br>            tagName,<br>          &#125;;<br>          <span class="hljs-keyword">return</span> <br>            &lt;BasicComponent <br>                &#123;...basicComponentProps&#125;&gt;&#123;slots.default?.()&#125;             &lt;/BasicComponent&gt;;<br>        &#125;;<br>      &#125;,<br></code></pre></div></td></tr></table></figure><p>研究了一小会，想不明白。代码文件缺了v2-doc（测试例子），第一次接触这个也摸不着头脑，查了下，目前只开源了v1版本的…</p><p>跑不起来…换个思路，我自己项目node_mode里其实也是有antd的源码的（lib下的只用了babel处理，未打包），可以在那边运行debug</p><p>如下</p><p>2.0.1版本</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> customizePrefixCls = props.prefixCls;<br><span class="hljs-keyword">var</span> prefixCls = getPrefixCls(suffixCls, customizePrefixCls);<br><span class="hljs-keyword">var</span> basicComponentProps = _extends(_extends(&#123;<br>     prefixCls: prefixCls&#125;, props), &#123;<br>     tagName: tagName<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>2.2.0-beta.2版本</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> _useConfigInject = (<span class="hljs-number">0</span>, _useConfigInject3.default)(suffixCls, props),<br>    prefixCls = _useConfigInject.prefixCls;<br><br><span class="hljs-keyword">var</span> basicComponentProps = _extends(_extends(&#123;&#125;, props), &#123;<br>    prefixCls: prefixCls.value,<br>    tagName: tagName<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这个_extends，如果浏览器支持Object.assign的话，他就是Object.assign，源码如下…</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_extends</span>(<span class="hljs-params"></span>) </span>&#123; _extends = <span class="hljs-built_in">Object</span>.assign || <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target</span>) </span>&#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123; <span class="hljs-keyword">var</span> source = <span class="hljs-built_in">arguments</span>[i]; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(source, key)) &#123; target[key] = source[key]; &#125; &#125; &#125; <span class="hljs-keyword">return</span> target; &#125;; <span class="hljs-keyword">return</span> _extends.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>); &#125;<br><br></code></pre></div></td></tr></table></figure><p>我这一下就明白了…..</p><p>这不就是2.0.1版本对prefixCls的合并顺序错了嘛…..props里的prefixCls属性直接覆盖了默认的。</p><p>跑起来打断点验证下。运行项目，浏览器F12，打开source栏，<code>ctrl+o</code>查找<code>layout.js</code>，打上断点。可以看到，执行<code>_extends</code>后，<code>undefine</code>覆盖了<code>ant-layout</code></p><p><img src="https://img-blog.csdnimg.cn/20210626114315332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70"></p><p>默认css样式名直接被undefined(这个值应该是configProvider里提供的)冲掉了，用同样方法检查试试2.2.1-beta.2版本，可以看到prefixCls是<code>ant-layout</code>，这里就不放图了</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svelte归档</title>
    <link href="/2021/05/23/svelte/svelte%E5%BD%92%E6%A1%A3/"/>
    <url>/2021/05/23/svelte/svelte%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>rollup作者搞的框架，玩玩看orz..</p><a id="more"></a><p>学了一两天，跟vue比较像的一点是都是用模板语法，结构啥的都比较像，毕竟框架要解决的问题都是相似的。但跟vue的实现是完全不同，这部分看情况吧，有需要就去研究下。</p><h2 id="1-模版里使用变量"><a href="#1-模版里使用变量" class="headerlink" title="1.模版里使用变量"></a>1.模版里使用变量</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;url&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;john&#x27;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;xxx/xxx.jpg&#x27;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="更新数组与对象"><a href="#更新数组与对象" class="headerlink" title="更新数组与对象"></a>更新数组与对象</h3><ul><li><p>数组</p><p>并不支持数组的原生方法（push，pop，shift，unshift，splice），也就是说以上方法不会触发响应。</p></li><li><p>对象</p><p>经验法则：变量名必须出现在赋值语句左侧，否则不触发响应(如变量名<code>obj</code>)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  foo:&#123;<br>    bar: <span class="hljs-string">&#x27;aaa&#x27;</span>,<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 触发响应</span><br>obj = &#123; <span class="hljs-attr">foo</span>: &#123;<span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125; &#125;;<br>obj.foo = &#123; <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>obj.foo.bar = <span class="hljs-string">&#x27;bbb&#x27;</span>;<br><br><span class="hljs-comment">// 不触发响应</span><br><span class="hljs-keyword">let</span> foo = obj.foo;<br>foo = &#123; <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;ccc&#x27;</span> &#125;;<br>foo.bar = <span class="hljs-string">&#x27;ccc&#x27;</span>;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="2-反应式-响应"><a href="#2-反应式-响应" class="headerlink" title="2.反应式(响应)"></a>2.反应式(响应)</h2><ul><li><p>反应式声明(类似vue的computed)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br>$: double = count * 2;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>运行时使用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 单行</span><br>$: <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`the count is <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br><span class="hljs-comment">// 代码块</span><br>$: &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`the count is <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>  alert(<span class="hljs-string">`the count is <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="3-循环"><a href="#3-循环" class="headerlink" title="3.循环"></a>3.循环</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> cats = [</span><br><span class="javascript">    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mimi&#x27;</span>&#125;,</span><br><span class="javascript">    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Miao&#x27;</span>&#125;,</span><br><span class="javascript">    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>&#125;,</span><br>  ]<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>&#123;#each cats as cat&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>id:&#123;cat.id&#125;, name:&#123;cat.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;/each&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>默认第二个参数是数组的index</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;#each cats as cat, index&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>index:&#123;index&#125;, name:&#123;cat.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;/each&#125;<br></code></pre></div></td></tr></table></figure><p><strong>当然也可以进行结构赋值</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;#each cats as &#123;id, name&#125;, index&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>index: &#123;index&#125;, id:&#123;id&#125;, name:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;/each&#125;<br></code></pre></div></td></tr></table></figure><p><strong>唯一标识符，也就是key值。</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;#each cats as cat(cat.id)&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> name:&#123;cat.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;/each&#125;<br></code></pre></div></td></tr></table></figure><p>svelte内部是用<code>Map</code>来处理key，因此你完全可以把整个对象作为key</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;#each cats as cat(cat)&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> name:&#123;cat.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;/each&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h2><p>可以用<code>on:&lt;event&gt;</code>的形式监听任何事件(注意冒号<code>:</code>后不能加空格)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="修饰符列表"><a href="#修饰符列表" class="headerlink" title="修饰符列表"></a>修饰符列表</h3><p><strong>once</strong></p><p>仅执行一次</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">on:click</span>|<span class="hljs-attr">once</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>capture</strong></p><p>在capture阶段触发而不是bubbling阶段</p><p><strong>self</strong></p><p>仅当event.target是自身时才执行</p><p><a href="https://www.sveltejs.cn/tutorial/event-modifiers">更多</a>….</p><blockquote><p>上述修饰符也可以组合使用，如 on:click|once|capture={handleClick}</p></blockquote><h2 id="5-组件事件"><a href="#5-组件事件" class="headerlink" title="5.组件事件"></a>5.组件事件</h2><p>有点像vue的emit和on</p><p>例如，约定事件<code>message</code>，子组件Inner.svelte</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123;createEventDispatcher&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;svelte&#x27;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> dispatch = createEventDispatcher();</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    dispatch(<span class="hljs-string">&#x27;message&#x27;</span>, &#123;</span><br><span class="javascript">      text: <span class="hljs-string">&#x27;hello&#x27;</span>,</span><br>    &#125;)<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span><br>Button<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>父组件app.svelte，在事件的detail属性里得到传参</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> Inner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Inner.svelte&#x27;</span>;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleMessage</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(event.detail); <span class="hljs-comment">// &#123;text: &quot;hello&quot;&#125;</span></span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Inner</span> <span class="hljs-attr">on:message</span>=<span class="hljs-string">&#123;handleMessage&#125;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>:exclamation:：​组件事件不会冒泡，如果Inner和app组件中间还有一层组件middle，那么需要在middle组件处转发事件，才能使Inner的触发的事件传递到app上</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// middle组件内</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">forward</span>(<span class="hljs-params">event</span>)</span>&#123;<br>  dispatch(<span class="hljs-string">&#x27;message&#x27;</span>, event.detail);<br>&#125;<br>&lt;Inner on:message=&#123;forward&#125;/&gt;<br></code></pre></div></td></tr></table></figure><p>有点麻烦，简写的形式是不给message事件传值，不传值的情况默认转发所有事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Inner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Inner.svelte&#x27;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Inner</span> <span class="hljs-attr">on:message</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="6-双向绑定"><a href="#6-双向绑定" class="headerlink" title="6.双向绑定"></a>6.双向绑定</h2><p>使用<code>bind:</code>的形式，<code>input</code>输入会修改变量<code>name</code>，改变属性<code>name</code>也会修改<code>input</code>里的值</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleInput</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(name);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;name&#125;</span> <span class="hljs-attr">on:input</span>=<span class="hljs-string">&#123;handleInput&#125;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello &#123;name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>定义input的值类型, <code>number</code>, <code>range</code>, <code>checkbox</code>, <code>radio</code>等</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">number</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;a&#125;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">0</span> <span class="hljs-attr">max</span>=<span class="hljs-string">10</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">range</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;a&#125;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">0</span> <span class="hljs-attr">max</span>=<span class="hljs-string">10</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="7-生命周期"><a href="#7-生命周期" class="headerlink" title="7.生命周期"></a>7.生命周期</h2><ul><li><p>onMounted(<function>)，如果回调函数的返回值为函数，那么将在销毁组件时执行</p></li><li><p>onDestroy(<function>)</p></li><li><p>beforeUpdate() / afterUpdate()</p></li><li><p>tick()，返回一个promise，在dom更新后执行。类似于vue里的nextTick()</p></li></ul><h2 id="8-Store"><a href="#8-Store" class="headerlink" title="8.Store"></a>8.Store</h2><p><strong>基本使用</strong></p><p>store.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; writable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;svelte/store&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> count = writable(<span class="hljs-number">0</span>);<br></code></pre></div></td></tr></table></figure><p>App.svelte</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; count &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./stores.js&#x27;</span>;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increment</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">count.update(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>n+<span class="hljs-number">1</span>);</span><br>&#125;<br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrementer</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    count.update(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>n+<span class="hljs-number">1</span>);</span><br>  &#125;<br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetter</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>    count.set(0);<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;decrementer&#125;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;resetter&#125;</span>&gt;</span>reset<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>避免内存泄漏</strong></p><p>使用<code>unsubscribe</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> count_value;<br><span class="hljs-keyword">const</span> unsubscribe = count.subscribe(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>count_value = value;<br>&#125;);<br>onDestroy(unsubscribe);<br></code></pre></div></td></tr></table></figure><p>简写–自动subscribe，使用$来快速使用store的变量。仅在store变量在顶级作用域声明或import时生效。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; count &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./stores.js&#x27;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>  the count is &#123;$count&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>svelte</category>
      
    </categories>
    
    
    <tags>
      
      <tag>svelte</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9-说说cookie,localStorage和session</title>
    <link href="/2021/02/15/interview/9-%E8%AF%B4%E8%AF%B4cookie-localStorage%E5%92%8Csession/"/>
    <url>/2021/02/15/interview/9-%E8%AF%B4%E8%AF%B4cookie-localStorage%E5%92%8Csession/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请问cookie，localStorage，sessionStorage的区别？</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>cookie</strong>：cookie是HTML4中使用的给客户端保存数据的。可以和session配合实现用户身份识别，比如区别vip用户和普通用户。</p><p><strong>webStorage</strong>: 包括<code>localStorage</code>和<code>sessionStorage</code>。webStorage是HTML5中提出的内容。存粹为了保存数据，不会与服务器端进行通信</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="1-相同点"><a href="#1-相同点" class="headerlink" title="1.相同点"></a>1.相同点</h2><ul><li><p>都是在客户端保存数据</p></li><li><p>都是以字符串形式存放</p></li></ul><h2 id="2-不同点"><a href="#2-不同点" class="headerlink" title="2.不同点"></a>2.不同点</h2><ul><li><p>生命周期</p><p><strong>cookie</strong>：可以设置有效期(<code>Expires</code>或<code>Max-Age</code>)。若不设置，默认是会话级别的临时存储（存放在内存），关闭浏览器就失效。设置后则存放在硬盘中，时间到了就失效。</p><blockquote><p>需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期Cookie 也会被保留下来，就好像浏览器从来没有关闭一样，这会导致 Cookie 的生命周期无限期延长</p><p><strong>提示：</strong>当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p></blockquote><p><strong>sessionStorage</strong> : 允许你访问一个对应当前源的会话存储(session <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a> )对象。数据在页面会话结束时会被清除，也就是关闭窗口后就被销毁。</p><p><strong>localStorage</strong>: 类似sessionStorage，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留,窗口或浏览器关闭后数据不会丢失。</p></li></ul><ul><li><p>网络流量</p><p>cookie的数据每次都会发给服务器端，而webStorage不会与服务器端通信，纯粹为了保存数据，所以webstorage更节省带宽。</p></li><li><p>大小限制</p><p>cookie：限制在4KB内</p><p>webStorage：限制在5M</p></li><li><p>安全性</p><p>WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获(即便是https也无法保护由服务端传给客户端的数据)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>通识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8-浅拷贝和深拷贝</title>
    <link href="/2021/02/07/interview/8-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/02/07/interview/8-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>JS中对象的浅拷贝与深拷贝</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在JS中浅拷贝与深拷贝通常是指对对象的复制拷贝。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>只拷贝最外一层。如果属性是基本类型，则拷贝基本类型的值；如果有属性中有对象，则拷贝的是对象的引用。</p><p>简单地说就是：<strong>拷贝第一层的基本类型值，以及第一层的引用类型地址</strong></p><blockquote><p>基本数据类型和引用存放在栈内存中，引用中存放的是对象的地址。对象的值存放于堆内存中</p></blockquote><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>在堆内存中申请一块新的空间，来拷贝对象所有层次的属性。得到的是属性完全相同的新对象，不会影响原对象。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h3 id="浅拷贝-1"><a href="#浅拷贝-1" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li>Object.assign()</li><li>扩展运算符</li></ul><p>针对数组</p><ul><li>concat()</li><li>slice()</li></ul><h3 id="深拷贝-1"><a href="#深拷贝-1" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>JSON处理 <a href="https://liaoyq.club/2020/11/26/%E6%89%8B%E5%86%99js%E8%BD%AE%E5%AD%90/#%E5%88%A9%E7%94%A8JSON%E5%A4%84%E7%90%86">详见</a></li><li>手写递归 <a href="https://liaoyq.club/2020/11/26/%E6%89%8B%E5%86%99js%E8%BD%AE%E5%AD%90/#%E6%89%8B%E5%86%99%E9%80%92%E5%BD%92%E5%A4%84%E7%90%86">详见</a></li></ul><p>当然。浅拷贝和深拷贝的处理这么常见的问题肯定已经有轮子了。<code>lodash</code>库里有相应的函数可以处理</p><hr><p>参考</p><p><a href="https://juejin.cn/post/6844903937426849799">https://juejin.cn/post/6844903937426849799</a></p><p><a href="https://juejin.cn/post/6906369563793817607">https://juejin.cn/post/6906369563793817607</a></p><p><a href="https://juejin.cn/post/6844904197595332622#heading-0">https://juejin.cn/post/6844904197595332622#heading-0</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-BFC</title>
    <link href="/2021/02/05/interview/7-CSS%E4%B8%AD%E7%9A%84BFC/"/>
    <url>/2021/02/05/interview/7-CSS%E4%B8%AD%E7%9A%84BFC/</url>
    
    <content type="html"><![CDATA[<p>BFC摘要</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>BFC全称block formatting context，即块级格式化上下文。BFC是页面中盒模型布局的CSS渲染模式，其定位属于常规文档流。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>触发了BFC的区域可以看作是一个隔离的独立容器，里面的元素不会影响外部元素，反之亦然。</p><p>具体表现为</p><ul><li>包住内部的float元素</li><li>避免与外部的float元素层叠(覆盖重叠)</li><li>消除外边距折叠</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>触发BFC布局可以的方式有很多(<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">详见MDN</a>)，比较常见的可以用</p><ul><li><p>overflow: auto或者是hidden(除了visiable)</p></li><li><p>display: flow-root(CSS3)</p></li></ul><p>根据BFC的特点，不难想象创建一个BFC通常是为了方便布局，或者是清除浮动。</p><p>更多内容参见</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context</a></p><p><a href="https://zhuanlan.zhihu.com/p/25321647">https://zhuanlan.zhihu.com/p/25321647</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年度总结</title>
    <link href="/2021/01/29/annualSummary/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/29/annualSummary/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>2020，慢走不送。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考完试后。回家的飞机上风景还不错，就是有些许无聊，就做个年度总结吧。</p><h2 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>自助彩印机。嘛，我觉得这个其实跟那些自动售货机应该还是蛮相似的。</li><li>鸱吻云数据平台的前端。这个拿了小挑省一，哎，还是团队的力量大！</li><li>飞行器仿真模拟二次开发转金属仿真模拟。小飞机，起飞！</li><li>无线转接模块开发的前端。这个项目主要是硬件模块设计方面的内容，我只需要调调页面css。还没开始呢。</li></ul><hr><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><ol><li>加入了一个校招互助群，每周一个前端知识点，在语雀开了一个知识库。负责人说认真参与能内推，我都有认真在做，几乎每次作答几乎都能得到点赞肯定。</li><li>参与阿里巴巴前端练习生，考试时遇到一个没接触过的大题，做不出来，哎。只拿了65，分不高但好像过了？负责人说还要看平时的积极性，当时生病请假回家了，状态不太好，后来临近期末考试，确实没有太多精力放在这上面，错失了一次机会吧，但据说年后还有二期？这次好好跟进吧！</li><li>给几个开源项目的文档提过pr，有一个甚至已经有10k个star，虽然只是修改了类似拼写错误的低级问题，但那边给merge了哈哈哈哈，总之就是很开心</li></ol><hr><h3 id="摸鱼"><a href="#摸鱼" class="headerlink" title="摸鱼"></a>摸鱼</h3><ol><li>基于github pages+hexo搭建了这个静态博客，零零碎碎地写了25篇文章。优化站点+写文章，这是我觉得颇有意义和成就感的事情。在优化站点的过程中了解到了一些第三方托管服务(Vercel)，存储服务(腾讯云,阿里云，七牛云)，cdn分发技术(jsdeliver)，图片压缩技术(转webp格式)等等。写文章总结则可以明显地感受到自己在表达和总结方面能力的提升，如对于不同技术水平的读者，怎么描述好一个问题，怎么讲明白解决问题的思路，这些都是我写博文时经常思考的问题。当然，我对目前的写作表达仍不够满意，这里需向阮一峰老师看齐。</li><li>因为使用了博客主题，加入了一个交流群，里面有好多大佬，从专科到博士，经常是没有搜索引擎我就一脸懵(卑微.jpg)，东西可能没学到多少，但眼界广了。</li><li>说到阮一峰，这个技术大牛是20年年初时开始关注的，因为经常在google搜到他的文章，后来看了挺多他写的读书笔记，以及科技爱好者周刊，都挺有意思的。还有一个就是他翻译的《ES6标准入门》也是我经常查阅的书籍。嘛，我是不是太懒了，现在英文原著我应该也能勉强看看，看习惯了应该就没问题了，这个问题今年考虑克服一下。</li></ol><hr><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>很不错呢，拿了一个一等奖和一个省政府奖学金共7.5k。绩点4.7，我也没想到我能拿个专业第二。<br>‌</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol><li>买了块数位板，开始捡起来小时候画画的兴趣。嗯，因为目前画的线稿，还不会上色，等以后会上色了可能会在博客里记录自己丑丑的作品吧。吉他变卖了，寝室里弹会影响其他人，带出去又挺麻烦的，寝室没人的时间着实不多，没什么机会玩吧。</li><li>最难过的就是长了水痘！成人水痘！非常严重，发了5天烧，全身上下全是密密麻麻的痘。。。恶心！恐怖！精神压力巨大！别人长的似乎都没我这么严重，课也上不了，请假回家呆了16天。哎，因为这次生病错过了很多东西，后悔也没用了，还是得向前看吧，fighting！</li><li>国庆去了一次杭州白马湖看漫展，可能是疫情影响，有游戏活动的摊位好少啊，没有太多的看点。全都是在卖东西，那些都挺坑的，有些甚至还是盗版。。。我就买了一个福袋和一个手办。</li><li>跟实验室里的朋友去了钱塘江烧烤，我是两个主厨之一哈哈哈，这点手艺我还是有的。主要是18、19两届成员，二十多人。总的来说体验很不错！就是厕所太远了，大概两三公里外才有。</li></ol><h3 id="动漫影视"><a href="#动漫影视" class="headerlink" title="动漫影视"></a>动漫影视</h3><p><strong>最喜欢的两部</strong> </p><ul><li><p><strong>《进击的巨人》</strong><br>这部作品最开始给我的感觉是残酷血腥，如巨人吃人的情节; 其次是恐惧感，这种感觉是来源于对未知的恐惧–巨人作为人类的天敌，为何会有这样的存在？</p><p>他们不需要进食，行动力来自阳光，仅是把人咬碎而不消化;他们面部表情各异，有些狰狞的笑着;墙内人民的历史,记忆为何只有一百多年？为什么主角开始没多久就被吃掉了(注意这个世界没有复活的设定)？剧情真的精彩！</p><p>关于角色，一时间我还真的不知道最喜欢谁，每个都刻画得有血有肉，无论是小人，恶魔，还是暂时的”正义”伙伴，我都十分敬佩和欣赏。想了半天，这里就简单说说恶魔阿尔敏吧(每个都写就太长了)，他从开始时的软弱无助，到站出来替伙伴解围(艾伦身份暴露，即将被处决)，到为拯救让而开枪杀死一个比自己温柔的人，再到后来为击败超大型巨人而做好牺牲的觉悟，最后变成最终季里顷刻间杀人无数的恶魔，低语一句: “贝特霍尔德，这就是你曾经看到的风景么。”</p></li><li><p><strong>《天气之子》</strong><br>这部作品的思想是比较极端的，喜欢的人会特别喜欢，不喜欢的可能会特别厌恶。显然我是前者。虽然这部作品有很多不符合基本常理的情节，比如看守凪前辈的人员居然为了陪小女孩上厕所，门都没关，导致前辈直接溜了; 帆高在铁路桥奔跑(危！)，铁路工作人员只在那里警告而不上前制止？？警察局的叔叔居然会被小学生撞倒并成功拖延一段时间？？？</p><p>……但，这并不妨碍我感动得稀里哗啦hhh。我个人觉得，影视作品嘛，很多时候是人们的精神寄托。现实中，我们不会在肯德基遇到店员阳菜这样的女孩，在大陆内更不会在垃圾桶里捡到手枪，能在得知被通缉时说出”我们一起逃吧！”这种话，也可能只存在于十六七岁那时无知而勇敢的自己了。</p><p>现实中的我们被责任，得失束缚，很多很想做的事情作为一个成熟的成年人是不可能去做的。我们没遇到的，没做到的，没勇气做的，帆高都替我们做了，这也是我喜欢作品的一个原因吧。</p></li></ul><p><strong>其他的作品</strong></p><ol><li>《某科学的一方通行》大爷实力被削了，但不妨碍虐菜。“你手中挥舞着的大楼，是我此生不灭的信仰！”</li><li>《某科学的超电磁炮T》“你指尖跃动的电光，是我此生不灭的信仰！唯我超电磁炮永生不灭！”</li><li>《青春猪头少年不会梦到兔女郎学姐》情感王者局，了解了很多没什么用的把妹小技巧(手动狗头）。 习得技能“闪现接枪”。“我永远喜欢樱岛麻衣！“</li><li>《青春猪头少年不会梦到怀梦美少女》三个人的之间救赎，一个人的成全。好虐啊呜。虽然只是电影的长度，但剧情太复杂，已经忘得差不多了。</li><li>《雾山五行》打戏绝赞！国产！水墨画风，可惜只出了三集，值得期待。</li><li>《无论何时我们的恋情都是十厘米》嘛，酸酸甜甜的校园生活，我一点都不羡慕，假的。</li><li>《想哭的我戴上了猫面具》歌很好听哎！剧情老套，中庸吧</li><li>《宝石幻想 光芒重现》额，音乐番，小姐姐好可爱</li><li>《从零开始的异世界生活》这部也很喜欢，虽然买了雷姆的手办，但我是艾米莉亚党！(主要还是艾米莉亚那个制作一般还贵！XD</li><li>《LoveLive School Idol project》果皇！我被传销入教了。最喜欢的音乐番没有之一。</li><li>《我，要成为双马尾》红色双马尾，转身美如画，美好如这般，可惜是男的。</li><li>《公主连结Re:Dive》嘛，目前剧情是可爱温馨的，后面估计要悲剧了。</li></ol><hr><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><ol><li>《碧蓝航线》 逐渐变成老咸鱼玩家.jpg</li><li>《公主连结》(已弃坑</li><li>《原神》(已弃坑</li><li>《LoL手游日服》(偶尔玩玩</li><li>《饥荒》</li></ol><p>steam都没怎么碰了。</p><hr><h2 id="总结思考"><a href="#总结思考" class="headerlink" title="总结思考"></a>总结思考</h2><p>虽然生活受到疫情影响，虽然因为转专业要补很多课(忙)，虽然依旧没有女朋友，但抛开这些，2020年，大三，确实是我非常幸福的一年阿。奖学金+劳务费让我有了一点点零花钱。</p><p>我是大山里的孩子，父辈一生奔波操劳，说到底只是为了生存，在这种情况下，<strong>钱 ≈ 生命</strong>。要么搬砖，要么死去。所以有点储蓄会让我心里踏实。这种踏实，是消费挥霍无法给予的，所以我并不打算拿来满足自己那颗”奢侈“的心。</p><p>至于理财？嘛，稍微了解过，水太深。等我有了本金再说吧，现在应该把精力放在本金积蓄上，一心二用，怕是一事无成。</p><p>自己姑且也算是半个互联网行业的人员了，2020的博人眼球的事情着实不少。稍微思考了下，其实也都并不是什么稀奇的事情了，只是互联网是没有记忆的，过去了，大家就都忘了。我比较感兴趣的是川普的表演，他是一个成功的商人，按理说智商，情商应该要高于一般人，但却不时像小丑一样地表演。我没有贬低的意思，毕竟，台上的小丑滑稽的只是表现形式，内心里打的是观众兜里钱的主意。而川普这般表演来吸引人的注意，是想要掩盖什么东西吗？嘛，我一个小朋友也无法考证，罢了。</p><p>大家都嘲笑他，如果我的猜想是对的，那么年底的一句网络流行语就很应景：”小丑竟是我自己“。至于其他的时事，都只是道听途说，没有深入了解过。</p><p>我的大三上学期就这样子过去了，进步缓缓，但是踏实，给自己打个85分吧，留点进步空间。2021年很快就要到来了，相比于把希望寄托在 ”生活对我温柔点“ 这种不切实际的妄想，我更期待自己的精神世界更加稳固，没有人能把你击倒，除非你选择倒下。</p><p> ”酸甜苦辣咸“俱全，才算是完整幸福的生活。</p><h3 id="致2021"><a href="#致2021" class="headerlink" title="致2021"></a>致2021</h3><ul><li><p>年后就准备找实习了，就目前看来我的准备还是太少了啊！所以新的一年，噢呐该！</p></li><li><p>嘛，把自己喜欢的东西，用画笔记录下来</p></li><li><p>一如既往，勤恳踏实，积极向上</p></li></ul><p>完了，我甚至连flag都不知道该立些啥QAQ。就这样吧QAQ。</p>]]></content>
    
    
    
    <tags>
      
      <tag>2020年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-CSS居中</title>
    <link href="/2020/12/13/interview/4-CSS%E5%B1%85%E4%B8%AD/"/>
    <url>/2020/12/13/interview/4-CSS%E5%B1%85%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>1.第一类，div中的文字或者图片在div中垂直水平居中</p><p>2.第二类，div元素相对于它的父元素垂直水平居中</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="第一类-文字-图片"><a href="#第一类-文字-图片" class="headerlink" title="第一类:文字/图片"></a>第一类:文字/图片</h2><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>仅限子元素为行内元素或图片，且只有单行/单个</p><h2 id="第二类-div子元素"><a href="#第二类-div子元素" class="headerlink" title="第二类:div子元素"></a>第二类:div子元素</h2><h3 id="1-margin"><a href="#1-margin" class="headerlink" title="1.margin"></a>1.margin</h3><p>父元素设置<code>border</code>或者<code>padding</code>，子元素设置<code>magin</code>。灵感来源于《CSS权威指南》第三版 </p><ul><li><p>p180 auto小节</p></li><li><p>p182 合并外边距详解小节</p></li></ul><blockquote><p>在包含块上设置边框或内边距时，会使其子元素的外边距包含在包含块内</p></blockquote><p>也就是说父元素在设置边框或者内边距后，子元素的margin属性在垂直方向上可以直接以父元素边框为参考对象</p><p>缺点: 需要知道子元素宽高，并且父元素需额外添加没有太大意义的<code>border/padding</code></p><p>事实上也可应用于图片，见示例</p><p>父元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">transparent</span>;<span class="hljs-comment">/* 或者设置padding */</span><br></code></pre></div></td></tr></table></figure><p>子元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">orange</span>;<br><span class="hljs-selector-tag">margin</span>: <span class="hljs-selector-tag">calc</span>(50% <span class="hljs-selector-tag">-</span> 2<span class="hljs-selector-class">.5em</span>) <span class="hljs-selector-tag">auto</span>;<br></code></pre></div></td></tr></table></figure><h3 id="relative-transform"><a href="#relative-transform" class="headerlink" title="relative+transform"></a>relative+transform</h3><p>父元素不用更改</p><p>子元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>: <span class="hljs-selector-tag">relative</span>;<br><span class="hljs-selector-tag">left</span>: 50%;<br><span class="hljs-selector-tag">top</span>: 50%;<br><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate</span>(<span class="hljs-selector-tag">-50</span>%, <span class="hljs-selector-tag">-50</span>%);<br></code></pre></div></td></tr></table></figure><p>缺点：行内元素失效</p><h2 id="通用解法"><a href="#通用解法" class="headerlink" title="通用解法"></a>通用解法</h2><p>优点: 无需知道子元素的宽高</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>父元素中添加</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">flex</span>;<br><span class="hljs-selector-tag">justify-content</span>: <span class="hljs-selector-tag">center</span>;<br><span class="hljs-selector-tag">align-items</span>: <span class="hljs-selector-tag">center</span>;<br><span class="hljs-comment">/* flex-wrap: wrap; 换行 */</span><br><span class="hljs-selector-tag">flex-direction</span>: <span class="hljs-selector-tag">column</span>;<span class="hljs-comment">/* 调主轴 */</span><br></code></pre></div></td></tr></table></figure><h3 id="relative-absolute-transform"><a href="#relative-absolute-transform" class="headerlink" title="relative+absolute(+transform)"></a>relative+absolute(+transform)</h3><p>父元素使用<code>position: relative</code>，子元素设置如下</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>: <span class="hljs-selector-tag">absolute</span>;<br><span class="hljs-selector-tag">left</span>: 50%;<br><span class="hljs-selector-tag">top</span>: 50%;<br><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">translate</span>(<span class="hljs-selector-tag">-50</span>%,<span class="hljs-selector-tag">-50</span>%);<br></code></pre></div></td></tr></table></figure><p>当然，如果标签自带<code>margin</code>或<code>padding</code>值，记得清除，否则translate移动的值将不是你想要的，除非你使用了<code>box-sizing: border-box</code> 。详情参见盒模型的宽高计算</p><p>定位方式除了上面这种方式，还有另一种奇技淫巧: </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>: <span class="hljs-selector-tag">absolute</span>;<br><span class="hljs-selector-tag">top</span>: 0;<br><span class="hljs-selector-tag">right</span>: 0;<br><span class="hljs-selector-tag">bottom</span>: 0;<br><span class="hljs-selector-tag">left</span>: 0;<br><span class="hljs-selector-tag">margin</span>: <span class="hljs-selector-tag">auto</span>;<br></code></pre></div></td></tr></table></figure><p>缺点：子元素有多个的时侯，存在重叠问题</p><h3 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h3><p>表格实际上越来越少用到了，可能会有潜在bug。目前没发现吧</p><p>父元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">table-cell</span>;<br><span class="hljs-selector-tag">text-align</span>: <span class="hljs-selector-tag">center</span>;<br><span class="hljs-selector-tag">vertical-align</span>: <span class="hljs-selector-tag">middle</span>;<br></code></pre></div></td></tr></table></figure><p>子元素</p><p>行内元素无需调整，块级元素需要加上<code>display: inline-block</code></p><h3 id="伪元素-vertical-align"><a href="#伪元素-vertical-align" class="headerlink" title="伪元素+vertical-align"></a>伪元素+vertical-align</h3><p>这个我是真的服了，奇技淫巧系列</p><p>父元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">text-align</span>: <span class="hljs-selector-tag">center</span>;<br></code></pre></div></td></tr></table></figure><p>伪元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">content: &#x27;&#x27;;<br><span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">green</span>;<br><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">inline-block</span>;<br><span class="hljs-selector-tag">height</span>: 100%;<br><span class="hljs-selector-tag">width</span>: 0;<br><span class="hljs-selector-tag">vertical-align</span>: <span class="hljs-selector-tag">middle</span>;<br></code></pre></div></td></tr></table></figure><p>子元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">vertical-align</span>: <span class="hljs-selector-tag">middle</span>;<br></code></pre></div></td></tr></table></figure><p>  因为vertical-align实际上是给行内元素用的，所以块级元素需要额外加上<code>inline-block</code></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-click/touch长按与拖动</title>
    <link href="/2020/12/05/interview/6-click%E6%88%96touch%E9%95%BF%E6%8C%89%E4%B8%8E%E6%8B%96%E5%8A%A8/"/>
    <url>/2020/12/05/interview/6-click%E6%88%96touch%E9%95%BF%E6%8C%89%E4%B8%8E%E6%8B%96%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>某2020前端互助群的每周议题(四)  </p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li><p>在body元素内Append 20个类名为<code>.box</code>的盒子</p></li><li><p>鼠标活手指长按盒子元素350ms，新增类名<code>.active</code>,普通点击无任何变化,点击空白，移除所有<code>.active</code> 元素类名</p></li><li><p>鼠标或手指长按盒子元素350ms（不抬起）,然后滑动选框，选框范围内所有盒子元素新增类名<code>.active</code>背景高亮</p></li></ul><p>效果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/189998/1559222960860-169d14c9-1df8-4a81-a0fa-f0aa63c49bd0.gif"></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="个人解法"><a href="#个人解法" class="headerlink" title="个人解法"></a>个人解法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><a href="https://codepen.io/litstronger/pen/vYXGeaL">演示地址</a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.content</span> &#123;</span><br>            position: relative;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> &#123;</span><br>            display: inline-block;<br>            width: 100px;<br>            height: 100px;<br>            margin: 10px;<br>            background-color: gray;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span><span class="hljs-selector-class">.active</span> &#123;</span><br>            background-color: skyblue;<br>        &#125;<br><br><span class="css">        <span class="hljs-comment">/* 阻止内容被选中 */</span></span><br><span class="css">        <span class="hljs-selector-class">.unselect</span> &#123;</span><br>            -webkit-user-select: none;<br>            -moz-user-select: none;<br>            -khtml-user-select: none;<br>            -ms-user-select: none;<br><br><span class="css">            <span class="hljs-comment">/* 以下两个属性目前并未支持，写在这里为了减少风险 */</span></span><br>            -o-user-select: none;<br>            user-select: none;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> boxNum = <span class="hljs-number">20</span>; <span class="hljs-comment">// 盒子个数</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> holdTime = <span class="hljs-number">350</span>; <span class="hljs-comment">// click/touch激活所需时间</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> boxList = [];</span><br><span class="javascript">    <span class="hljs-keyword">let</span> cont = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.content&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> activeFlag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 是否激活</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> mask;  <span class="hljs-comment">// 选区遮罩</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> timerId;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> startPointX = <span class="hljs-number">0</span>, startPointY = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> movingPointX = <span class="hljs-number">0</span>, movingPointY = <span class="hljs-number">0</span>;</span><br><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; boxNum; i++) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">        item.classList.add(<span class="hljs-string">&#x27;box&#x27;</span>)</span><br><span class="javascript">        item.classList.add(<span class="hljs-string">&#x27;unselect&#x27;</span>)</span><br><br>        item.onmousedown = holdDown;<br>        item.onmouseup = holdUp;<br>        item.ontouchstart = holdDown;<br>        item.ontouchend = holdUp<br><br><span class="javascript">        <span class="hljs-comment">// item.textContent = &#x27;test&#x27; + i</span></span><br>        cont.appendChild(item);<br>        boxList.push(item)<br>    &#125;<br><br>    cont.onmousedown = mouseDown<br>    cont.onmouseup = mouseUp<br>    cont.ontouchstart = touchStart<br>    cont.ontouchend = touchEnd<br><br><span class="javascript">    <span class="hljs-built_in">document</span>.onmouseleave = mouseLeave</span><br><br><span class="javascript">    <span class="hljs-comment">// 计时激活</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">holdDown</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e)</span><br><span class="javascript">        <span class="hljs-keyword">let</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">        <span class="hljs-keyword">let</span> endTime = <span class="hljs-number">0</span>;</span><br><span class="javascript">        timerId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">            endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(endTime - startTime)</span><br>            if (endTime - startTime &gt;= 350) &#123;<br><span class="javascript">                <span class="hljs-built_in">clearInterval</span>(timerId);</span><br><span class="javascript">                <span class="hljs-comment">// alert(&quot;长按了&quot;);</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;duration of the click/touch:&quot;</span>, endTime - startTime)</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.classList.add(<span class="hljs-string">&#x27;active&#x27;</span>)</span><br><span class="javascript">                activeFlag = <span class="hljs-literal">true</span></span><br>            &#125;<br>        &#125;, 50)<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">holdUp</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">clearInterval</span>(timerId);</span><br>    &#125;<br><br><br><span class="javascript">    <span class="hljs-comment">/* mouseEvent相关处理函数 */</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseDown</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br>        startPointX = e.clientX<br>        startPointY = e.clientY<br><span class="javascript">        <span class="hljs-built_in">console</span>.log(startPointX, startPointY)</span><br><br><span class="javascript">        <span class="hljs-comment">// 创建遮罩层</span></span><br>        createMask()<br>        cont.onmousemove = mouseMove<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseMove</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br>        if (activeFlag) &#123;<br>            activeMaskArea(e.clientX, e.clientY)<br>        &#125;<br>    &#125;<br><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseUp</span>(<span class="hljs-params"></span>) </span>&#123;</span><br>        if (activeFlag) &#123;<br><span class="javascript">            activeFlag = <span class="hljs-literal">false</span></span><br>            mask.remove()<br>        &#125;<br><span class="javascript">        cont.onmousemove = <span class="hljs-function">() =&gt;</span> &#123; &#125;</span><br>    &#125;<br><br><span class="javascript">    <span class="hljs-comment">// 鼠标移出浏览器区域后取消遮罩，因为鼠标移出浏览器后再松开触发不了mouseup </span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseLeave</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;mouse leave&#x27;</span>)</span><br>        if (activeFlag) &#123;<br><span class="javascript">            activeFlag = <span class="hljs-literal">false</span></span><br>            mask.remove()<br><span class="javascript">            cont.onmousemove = <span class="hljs-function">() =&gt;</span> &#123; &#125;</span><br>        &#125;<br>    &#125;<br><br><span class="javascript">    <span class="hljs-comment">/* touchEvent相关处理函数 */</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">touchStart</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;touch start&quot;</span>)</span><br>        startPointX = e.touches[0].clientX<br>        startPointY = e.touches[0].clientY<br><span class="javascript">        <span class="hljs-built_in">console</span>.log(startPointX, startPointY)</span><br>        createMask()<br>        cont.ontouchmove = touchMove<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">touchMove</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e)</span><br>        if (activeFlag) &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;active move&#x27;</span>)</span><br>            activeMaskArea(e.touches[0].clientX, e.touches[0].clientY)<br>        &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">touchEnd</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;touch end&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-comment">// console.log(e)</span></span><br>        if (activeFlag) &#123;<br><span class="javascript">            activeFlag = <span class="hljs-literal">false</span></span><br>            mask.remove()<br>        &#125;<br><span class="javascript">        cont.ontouchmove = <span class="hljs-function">() =&gt;</span> &#123; &#125;</span><br><span class="javascript">        e.preventDefault() <span class="hljs-comment">// 取消后续mouseEvent， 避免执行touchEvent后再执行mouseEvent</span></span><br>    &#125;<br><br><br><span class="javascript">    <span class="hljs-comment">/* 通用函数 */</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMask</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 遮罩</span></span><br><span class="javascript">        mask = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">        mask.style.backgroundColor = <span class="hljs-string">&#x27;yellow&#x27;</span></span><br><span class="javascript">        mask.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span></span><br><span class="javascript">        mask.style.opacity = <span class="hljs-string">&#x27;0.3&#x27;</span></span><br>        cont.appendChild(mask)<br>    &#125;<br><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">activeMaskArea</span>(<span class="hljs-params">eX, eY</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 遮罩层定位</span></span><br><span class="javascript">        <span class="hljs-keyword">if</span> (eX &gt; startPointX) &#123;  <span class="hljs-comment">// 向左or向右 拖动</span></span><br><span class="javascript">            mask.style.left = startPointX + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="javascript">            mask.style.width = (eX - startPointX) + <span class="hljs-string">&#x27;px&#x27;</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">else</span> &#123;                          <span class="hljs-comment">// 左</span></span><br><span class="javascript">            mask.style.left = eX + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="javascript">            mask.style.width = (startPointX - eX) + <span class="hljs-string">&#x27;px&#x27;</span></span><br>        &#125;<br><br><span class="javascript">        <span class="hljs-keyword">if</span> (eY &gt; startPointY) &#123;    <span class="hljs-comment">// 向上or向下 拖动</span></span><br><span class="javascript">            mask.style.top = startPointY + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="javascript">            mask.style.height = (eY - startPointY) + <span class="hljs-string">&#x27;px&#x27;</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">else</span> &#123;                           <span class="hljs-comment">// 上</span></span><br><span class="javascript">            mask.style.top = eY + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="javascript">            mask.style.height = (startPointY - eY) + <span class="hljs-string">&#x27;px&#x27;</span></span><br>        &#125;<br><br><span class="javascript">        <span class="hljs-comment">// 处理选区内元素</span></span><br><span class="javascript">        boxList.forEach(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> ((e.offsetLeft + e.offsetWidth &gt; mask.offsetLeft)  <span class="hljs-comment">// 遮罩左边界</span></span><br><span class="javascript">                &amp;&amp; (e.offsetLeft &lt; mask.offsetLeft + mask.offsetWidth)   <span class="hljs-comment">// 遮罩右边界     </span></span><br><span class="javascript">                &amp;&amp; (e.offsetTop + e.offsetHeight &gt; mask.offsetTop)   <span class="hljs-comment">// 遮罩上边界   </span></span><br><span class="javascript">                &amp;&amp; (e.offsetTop &lt; mask.offsetTop + mask.offsetHeight)) &#123;   <span class="hljs-comment">// 遮罩下边界               </span></span><br><span class="javascript">                e.classList.add(<span class="hljs-string">&#x27;active&#x27;</span>)</span><br>            &#125;<br><span class="javascript">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                e.classList.remove(<span class="hljs-string">&#x27;active&#x27;</span>)</span><br>            &#125;<br>        &#125;)<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events"><strong>MDN Events</strong></a></p><p><strong>mouse相关</strong></p><ul><li>mousedown</li><li>mousemove</li><li>mouseup</li><li>mouseleave</li></ul><p><strong>touch相关</strong></p><ul><li>touchdown</li><li>touchmove</li><li>touchup</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent"><strong>MDN mouseEvent</strong></a></p><ul><li>mouseEvent.clientX, mouseEvent.clientY</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent"><strong>MDN touchEvent</strong></a></p><ul><li><p>touches(存放touch的数组，多点触控)</p><p>A list of <a href="https://developer.mozilla.org/en/DOM/Touch"><code>Touch</code></a>es for every point of contact currently touching the surface.</p></li><li><p>Touch.clientX, Touch.clientY</p><p>触点相对于可见视区(<a href="http://www.quirksmode.org/mobile/viewports2.html">visual viewport</a>)左边沿的的X坐标</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"><strong>MDN 操作文档</strong></a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList"><strong>ELement.classList</strong></a></p><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft">HTMLElement.offsetLeft</a></strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date"><strong>MDN Date</strong></a></p><p><a href="https://blog.csdn.net/weixin_45615791/article/details/104524950"><strong>javaScript按住鼠标左键选中元素， 实现框选（Rubberband）效果</strong></a></p><p><a href="https://segmentfault.com/a/1190000010430655"><strong>js实现鼠标拖拽多选功能</strong></a> 这个的实现用了jquery..</p><p><a href="https://www.cnblogs.com/moqiutao/p/7280031.html"><strong>JS与CSS阻止元素被选中及清除选中的方法总结</strong></a></p><p><a href="https://medium.com/frochu/touch-and-mouse-together-76fb69114c04"><strong>移動端瀏覽器 ：當 Touch Event 與 Mouse Event 同時存在的時候</strong></a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>刚开始时仅使用了mouseup来取消遮罩选区，其实是有bug的，因为一旦你的鼠标移出了浏览器窗口就触发不了mouseup事件了。</li><li>touchEvent触发后，mouseEvent仍然会触发，也就是说部分代码会被执行两次</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>利用mouseLeave检测鼠标是否超出区域</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.onmouseleave = mouseLeave    <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseLeave</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;mouse leave&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (activeFlag) &#123;<br>        activeFlag = <span class="hljs-literal">false</span><br>        mask.remove()<br>        cont.onmousemove = <span class="hljs-function">() =&gt;</span> &#123; &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>MDN如下解释</p><blockquote><p><strong>注意:</strong> 在很多情况下，触摸事件和鼠标事件会同时被触发（目的是让没有对触摸设备优化的代码仍然可以在触摸设备上正常工作）。如果你使用了触摸事件，可以调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault"><code>event.preventDefault()</code></a> 来阻止鼠标事件被触发。</p></blockquote><p>因此可以在touchEnd事件里调用上述函数来阻止mouseEvent触发</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-css+html鼠标悬停tips</title>
    <link href="/2020/12/01/interview/5-CSS-html%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9Ctips/"/>
    <url>/2020/12/01/interview/5-CSS-html%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9Ctips/</url>
    
    <content type="html"><![CDATA[<p>某2020前端互助群的每周议题(三)  Part 2</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>实现一个鼠标悬停的功能，如图</p><p><img src="https://img-blog.csdnimg.cn/20201201154933160.png" alt="1606801197639"></p><p>要求：只使用CSS和HTML</p><p>可以贴出代码的实现地址例如<a href="https://codepen.io/">https://codepen.io/</a> 上提交自己的代码</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><a href="https://codepen.io/litstronger/pen/ZEpGXQZ">我的实现</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="1-初步实现"><a href="#1-初步实现" class="headerlink" title="1.初步实现"></a>1.初步实现</h3><p><code>hover</code>后出现文本提示，考虑使用伪元素<code>:after</code>来实现</p><blockquote><p> <code>:after</code>这是css2的写法，css3是<code>::after</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.wrap</span> &#123;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrap</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>        width: 1em;<br>        height: 1em;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrap</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br>        content: attr(logo-tip);<br><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#222</span>;</span><br>        color: white;<br><br><span class="css">        <span class="hljs-selector-tag">border-radius</span>: <span class="hljs-selector-class">.2em</span>;</span><br><span class="css">        <span class="hljs-selector-tag">padding</span>: <span class="hljs-selector-class">.5em</span>;</span><br>        width: 5em;<br><span class="css">        <span class="hljs-selector-tag">opacity</span>: <span class="hljs-selector-class">.5</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">logo-tip</span>=<span class="hljs-string">&quot;添加链接啦啦啦啦&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>初步效果如下，鼠标移上去会出现tip</p><style>    .wrap-1 {    }    .wrap-1 img {        width: 1em;        height: 1em;    }    .wrap-1:hover:after {        content: attr(logo-tip);        background: #222;        color: white;        border-radius: .2em;        padding: .5em;        width: 5em;        opacity: .5;    }</style><div class="wrap-1" logo-tip="添加链接啦啦啦啦">    <img src="https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png"></div><br><h3 id="2-调整位置"><a href="#2-调整位置" class="headerlink" title="2.调整位置"></a>2.调整位置</h3><p>接下来调整提示框的位置，修改下布局，采用<code>relative</code>+<code>absolute</code>进行定位</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.wrap</span> &#123;</span><br>        position: relative;<br>        width: 1em;<br>        height: 1em;<br>        margin: 0 auto;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrap</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>        width: 100%;<br>        height: 100%;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrap</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br>        content: attr(logo-tip);<br><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#222</span>;</span><br>        color: white;<br><br><span class="css">        <span class="hljs-selector-tag">border-radius</span>: <span class="hljs-selector-class">.2em</span>;</span><br><span class="css">        <span class="hljs-selector-tag">padding</span>: <span class="hljs-selector-class">.5em</span>;</span><br>        width: 5em;<br><span class="css">        <span class="hljs-selector-tag">opacity</span>: <span class="hljs-selector-class">.5</span>;</span><br><br>        position: absolute;<br><span class="css">        <span class="hljs-selector-tag">box-sizing</span>: <span class="hljs-selector-tag">border-box</span>; <span class="hljs-comment">/* 方便计算宽高 */</span></span><br><span class="css">        <span class="hljs-selector-tag">left</span>: <span class="hljs-selector-tag">calc</span>(50% <span class="hljs-selector-tag">-</span> 2<span class="hljs-selector-class">.5em</span>);</span><br><span class="css">        <span class="hljs-selector-tag">top</span>: 1<span class="hljs-selector-class">.4em</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">logo-tip</span>=<span class="hljs-string">&quot;添加链接啦啦啦啦&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果如下</p><style>    .wrap-2 {        position: relative;        width: 1em;        height: 1em;        margin: 0 auto;    }    .wrap-2 img {        width: 100%;        height: 100%;    }    .wrap-2:hover:after {        content: attr(logo-tip);        background: #222;        color: white;        border-radius: .2em;        padding: .5em;        width: 5em;        opacity: .5;        position: absolute;        box-sizing: border-box;        left: calc(50% - 2.5em);        top: 1.4em;    }</style><div class="wrap-2" logo-tip="添加链接啦啦啦啦">    <img src="https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png"></div><br><h3 id="3-制作小三角形"><a href="#3-制作小三角形" class="headerlink" title="3.制作小三角形"></a>3.制作小三角形</h3><p>可以发现，我们实现的框，还少了个三角标，如图</p><p><img src="https://img-blog.csdnimg.cn/20201201155111408.png" alt="1606805499179"></p><p>那么，如何制作一个三角标呢？</p><p>看看下面这段代码，一个<code>content</code>为2em，<code>border</code>为2em的盒子</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    div &#123;<br>        background: orange;<br>        width: 2em;<br>        height: 2em;<br><span class="css">        <span class="hljs-selector-tag">border</span>: 2<span class="hljs-selector-tag">em</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#222</span>;</span><br><span class="css">        <span class="hljs-selector-tag">border-color</span>: <span class="hljs-selector-tag">red</span> <span class="hljs-selector-tag">green</span> <span class="hljs-selector-id">#222</span> <span class="hljs-selector-tag">pink</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果如下，橙色部分为<code>content</code>，彩色部分是<code>border</code></p><p><img src="https://img-blog.csdnimg.cn/20201201155126734.png" alt="1606807307250"></p><p>看到这里，不知道你悟了没有。如果我把<code>content</code>的宽高设置为0，这样就得到四个三角形，再把<code>border</code>其他三边设置为透明，注释掉背景色，那么就得到一个三角形了。</p><ul><li><p><code>content</code>宽高设置为0：<code>width: 0em; height:0em;</code></p><p><img src="https://img-blog.csdnimg.cn/20201201155138576.png" alt="1606807907331"></p></li><li><p>设置三边透明，去掉背景色</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* background: orange; */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0em</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0em</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2em</span> dashed <span class="hljs-number">#222</span>;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#222</span> transparent;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201201155305197.png" alt="1606808125689"></p></li></ul><h3 id="4-合并提示框-小三角形"><a href="#4-合并提示框-小三角形" class="headerlink" title="4.合并提示框+小三角形"></a>4.合并提示框+小三角形</h3><p>然后，再把三角形和前面实现的提示框合起来。怎么合并呢？前面我们已经用过了一个伪元素<code>:after</code>，那么这次我们可以使用另一个伪元素<code>:before</code>( css3<code>::before</code>)</p><p><strong>最终代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.wrap</span> &#123;</span><br>        position: relative;<br>        width: 1em;<br>        height: 1em;<br>        margin: 0 auto;<br>        cursor: pointer;<br><br>    &#125;<br><br><span class="css">    <span class="hljs-selector-class">.wrap</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>        width: 100%;<br>        height: 100%;<br>    &#125;<br><br><span class="css">    <span class="hljs-comment">/* 提示框 */</span></span><br><span class="css">    <span class="hljs-selector-class">.wrap</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br>        content: attr(logo-tip);<br><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#222</span>;</span><br>        color: white;<br><br><span class="css">        <span class="hljs-selector-tag">border-radius</span>: <span class="hljs-selector-class">.2em</span>;</span><br><span class="css">        <span class="hljs-selector-tag">padding</span>: <span class="hljs-selector-class">.5em</span>;</span><br>        width: 5em;<br><span class="css">        <span class="hljs-selector-tag">opacity</span>: <span class="hljs-selector-class">.5</span>;</span><br><br>        position: absolute;<br><span class="css">        <span class="hljs-selector-tag">box-sizing</span>: <span class="hljs-selector-tag">border-box</span>; <span class="hljs-comment">/* 方便计算宽高 */</span></span><br><span class="css">        <span class="hljs-comment">/* &#x27;-&#x27;运算符两边不加空格属性失效, 这一定是魔法!(原因见下文) */</span></span><br><span class="css">        <span class="hljs-selector-tag">left</span>: <span class="hljs-selector-tag">calc</span>(50% <span class="hljs-selector-tag">-</span> 2<span class="hljs-selector-class">.5em</span>);</span><br><span class="css">        <span class="hljs-selector-tag">top</span>: 1<span class="hljs-selector-class">.4em</span>;</span><br>    &#125;<br><br><span class="css">    <span class="hljs-comment">/* 小三角标 */</span></span><br><span class="css">    <span class="hljs-selector-class">.wrap</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span>&#123;</span><br>        content: &quot;&quot;;<br>        box-sizing: border-box;<br>        position: absolute;<br>        top: 1em;<br><span class="css">        <span class="hljs-selector-tag">left</span>: <span class="hljs-selector-tag">calc</span>(50% <span class="hljs-selector-tag">-</span> <span class="hljs-selector-class">.2em</span>);</span><br>        background: linen;<br><span class="css">        <span class="hljs-selector-tag">width</span>: <span class="hljs-selector-class">.2em</span>;</span><br><span class="css">        <span class="hljs-selector-tag">height</span>: <span class="hljs-selector-class">.2em</span>;</span><br><span class="css">        <span class="hljs-selector-tag">border</span>: <span class="hljs-selector-class">.2em</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#222</span>;</span><br><span class="css">        <span class="hljs-selector-tag">border-color</span>: <span class="hljs-selector-tag">transparent</span> <span class="hljs-selector-tag">transparent</span> <span class="hljs-selector-id">#222</span> <span class="hljs-selector-tag">transparent</span>;</span><br><span class="css">        <span class="hljs-selector-tag">opacity</span>: <span class="hljs-selector-class">.5</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">logo-tip</span>=<span class="hljs-string">&quot;添加链接啦啦啦啦&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>效果如下</strong></p><style>    .wrap {        position: relative;        width: 1em;        height: 1em;        margin: 0 auto;        cursor: pointer;    }    .wrap img {        width: 100%;        height: 100%;    }    /* 提示框 */    .wrap:hover:after {        content: attr(logo-tip);        background: #222;        color: white;        border-radius: .2em;        padding: .5em;        width: 5em;        opacity: .5;        position: absolute;        box-sizing: border-box;         /* '-'运算符两边不加空格属性失效, 这一定是魔法!(原因见下文) */        left: calc(50% - 2.5em);        top: 1.4em;    }    /* 小三角标 */    .wrap:hover:before{        content: "";        box-sizing: border-box;        position: absolute;        top: 1em;        left: calc(50% - .2em);        background: linen;        width: .2em;        height: .2em;        border: .2em dashed #222;        border-color: transparent transparent #222 transparent;        opacity: .5;    }</style><div class="wrap" logo-tip="添加链接啦啦啦啦">    <img src="https://hexo-1259001110.cos.ap-shanghai.myqcloud.com/link.png" alt=""></div><br></br><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong>MDN</strong></p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()">calc()</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr()">attr()</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">::after</a></p></li></ul><p>图标引自<a href="https://www.iconfont.cn/search/index">阿里巴巴图标矢量库</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>对于<code>calc()</code>，<code>+</code>和<code>-</code>运算符两边没加空格可能导致计算错误。<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()">详见MDN  calc()</a></p><blockquote><p>The <code>+</code> and <code>-</code> operators <strong>must be surrounded by whitespace</strong>. For instance, <code>calc(50% -8px)</code> will be parsed as a percentage followed by a negative length — an invalid expression — while <code>calc(50% - 8px)</code> is a percentage followed by a subtraction operator and a length. Likewise, <code>calc(8px + -50%)</code> is treated as a length followed by an addition operator and a negative percentage.</p></blockquote></li></ol><hr><ol start="2"><li><p>对于<code>attr()</code>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr()">详见MDN attr()</a></p><blockquote><p> <code>attr()</code> 理论上能用于所有的CSS属性但目前支持的仅有伪元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content"><code>content</code></a> 属性，其他的属性和高级特性目前是实验性的。</p></blockquote></li></ol><h2 id="关于美化"><a href="#关于美化" class="headerlink" title="关于美化"></a>关于美化</h2><p>直接显示提示框其实有点僵硬，可以考虑使用<code>transition</code>属性来优化过渡。那么问题来了，给伪元素加<code>transition</code>好像很不方便……(额，其实可以的，比如先设置<code>:after</code>，再过渡到<code>:hover:after</code>)</p><p>最后我还是实现了，不过为了加这个过渡，多了一些不必要的修改。虽然效果有了，但代码不是很合理，如下。</p><p><a href="https://codepen.io/litstronger/pen/YzGyBYG">代码以及演示地址</a></p><p>因为要实现一个过渡效果，因此<code>:before</code>和<code>:after</code>必须有一个初始的状态。没错，就是这里刚开始让我觉得很难处理，因为这种情况下的<code>hover</code>似乎有<code>bug</code>。我把两个伪元素的<code>width</code>、<code>height</code>、<code>pading</code>、<code>border</code>都预置为0，然后<code>position:absolute；</code>定位，在浏览器F12下查看这两个伪元素，很正常，宽高0 × 0，没有占据任何空间。然而，当我把鼠标移动到距离触发hover的区域还有一段距离时，hover就触发了。这很诡异！</p><p>虽然暂时不知道为啥，不过解决办法还是有的。直接给<code>.wrap</code>添加<code>overflow: hidden;</code>，然后新增一个<code>:hover</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: visible;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>道理很简单。直接把超出的内容(目前不清楚是啥，估计就那两个伪元素)给去掉，这样就不会影响<code>:hover</code>的作用范围了。等到触发<code>:hover</code>后再给它显示出来。</p><h3 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h3><p>观察了好一会儿才发现，是伪元素<code>content</code>的问题。即便我把宽高设置为0，文字依旧会显示(<code>overflow</code>的问题)，如图。因为原来设置的字体颜色是白色。。所以一直没发现问题…..</p><p><img src="https://img-blog.csdnimg.cn/20201203105945156.png" alt="在这里插入图片描述"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>知道问题根源后，解决就很简单了</p><p>想到两个办法</p><ol><li><p>给<code>.wrap:after</code>添加<code>overflow: hidden;</code></p><p><a href="https://codepen.io/litstronger/pen/GRjpzay">演示地址</a></p></li><li><p>在<code>.wrap:after</code>里设置<code>font-size:0;</code>，在<code>.wrap:after</code>里设置<code>font-size:1em;</code></p><p>这个改起来也简单，就不搞了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题 css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-js判断浮点数相等</title>
    <link href="/2020/11/30/interview/2-JS%E5%88%A4%E6%96%AD%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9B%B8%E7%AD%89/"/>
    <url>/2020/11/30/interview/2-JS%E5%88%A4%E6%96%AD%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>某2020前端互助群的每周议题(三)  Part 1</p><a id="more"></a><h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><ol><li>非是<code>ECMAScript</code> 独有，基于<code>IEEE754 </code>设计的语言都有这个毛病，如<code>C</code>和<code>Java</code></li><li><code>IEEE754</code> 标准中 64 位的储存格式，比如 11 位存偏移值</li><li>其中涉及的三次精度丢失<ul><li>使用浮点数表示0.1</li><li>使用浮点数表示0.2</li><li>使用浮点数表示运算后(0.1+0.2)的值</li></ul></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li><p>toFixed() + parseFloat()</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>num 待处理的数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>len 小数点后保留位数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">epsEqu</span>(<span class="hljs-params">num, len = <span class="hljs-number">10</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>(num.toFixed(len))<br>&#125;<br><span class="hljs-built_in">console</span>.log(epsEqu(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>) === <span class="hljs-number">0.3</span>) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li></ol><ol start="2"><li><p>toPrecision() + parseFloat()</p><p>注意与toFixed的细微差别(参数范围)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>num 待处理的数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>len 返回的浮点数位数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">epsEqu</span>(<span class="hljs-params">num, len = <span class="hljs-number">10</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>(num.toPrecision(len))<br>&#125;<br><span class="hljs-built_in">console</span>.log(epsEqu(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>) === <span class="hljs-number">0.3</span>) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li><li><p>利用<code>Number.EPSILON</code></p><p>MDN解释</p><blockquote><p><strong>Number.EPSILON</strong> 属性表示 1 与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a>可表示的大于 1 的最小的浮点数之间的差值。</p><p>你不必创建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a> 对象来访问这个静态属性（直接使用 <code>Number.EPSILON</code>）。</p></blockquote><p><code>EPSILON</code> 属性的值接近于 <code>2.2204460492503130808472633361816E-16</code>，或者 <code>2-52。</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">epsEqu</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(a - b) &lt; <span class="hljs-built_in">Number</span>.EPSILON ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(epsEqu(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>)) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>然后。。。这个方法有缺点</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(epsEqu(<span class="hljs-number">1.1</span> + <span class="hljs-number">1.3</span>, <span class="hljs-number">2.4</span>)) <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure></li><li><p>处理浮点数运算的库：<a href="https://github.com/josdejong/mathjs"><code>math.js</code></a></p></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/mqyqingfeng/frontend-interview-question-and-answer/issues/10">[未知]如何判断 0.1 + 0.2 与 0.3 相等？ #10</a></p><p><a href="https://github.com/zhangxinxu/quiz/issues/74">JS基础测试47期 #74</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON">Number.EPSILON</a></p><p><a href="https://www.html.cn/archives/7340">JavaScript 浮点数运算的精度问题</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-js程序执行顺序判断</title>
    <link href="/2020/11/26/interview/3-JS%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%88%A4%E6%96%AD/"/>
    <url>/2020/11/26/interview/3-JS%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p>某2020前端互助群的每周议题(二)</p><a id="more"></a><p><strong>参考学习资料:</strong></p><p><a href="https://es6.ruanyifeng.com/#docs/promise#Promise-prototype-catch">《ECMAScript 6 入门》Promise </a></p><p><a href="https://es6.ruanyifeng.com/#docs/async">《ECMAScript 6 入门》async </a></p><p><a href="https://www.yuque.com/kuwu/opfh8y/kriyta">本次议题总结</a></p><p><strong>题目:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">await</span> async2();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-number">3</span><br>&#125;<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>&#125;<br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>&#125;, <span class="hljs-number">0</span>);<br> <br>async1().then(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span> <span class="hljs-built_in">console</span>.log(v))<br> <br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>    resolve();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br>&#125;);<br> <br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>);<br></code></pre></div></td></tr></table></figure><p><strong>我的思路：</strong></p><p>按照正常顺序，首先遇到的是宏任务<code>setTimeout()</code>，将其加入<code>宏任务队列</code>（稍后执行）<br>代码继续运行，进入函数<code>async1()</code>，直接输出1，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1<br></code></pre></div></td></tr></table></figure><p>执行函数<code>async2()</code>，直接输出4</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 <br></code></pre></div></td></tr></table></figure><p>然后遇到了微任务<code>await async2()</code>，将其加入<code>微任务队列</code>(稍后执行)，<code>await async2()</code>后的代码将被阻塞直到该微任务执行完</p><p>接着进入<code>Promise()</code>，直接输出6。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 <br></code></pre></div></td></tr></table></figure><p>然后遇到了<code>resolve()</code>，将其加入<code>微任务队列</code>，接着是输出7</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7<br></code></pre></div></td></tr></table></figure><p>代码继续执行，直接输出9</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9<br></code></pre></div></td></tr></table></figure><hr><p>至此代码已经执行到末尾了，开始执行微任务队列中的任务。<br>根据队列 <strong>先进先出</strong> 的特点，可以知道先执行<code>await async2()</code>，直接输出4，微任务完成</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9 <br></code></pre></div></td></tr></table></figure><p>接着执行之前之前被阻塞的部分，直接输出2，然后遇到微任务<code>await 3</code>，将其加入<code>微任务队列</code>，后续代码进入阻塞状态</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9 2<br></code></pre></div></td></tr></table></figure><p>从微任务队列中取出前面加入的<code>resolve()</code>，执行后进入.then()，直接输出8，微任务完成</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9 2 8<br></code></pre></div></td></tr></table></figure><p>从微任务队列中取出剩下的微任务<code>await 3</code>， 微任务完成。返回值为3，然后进入.then()，输出3</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9 2 8 3<br></code></pre></div></td></tr></table></figure><p>所有微任务都执行完后，就剩下宏任务<code>setTimeout</code>了，执行任务，输出5</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1 4 6 7 9 2 8 3 5<br></code></pre></div></td></tr></table></figure><hr><p><a href="">为了更好地理解本次内容，咕咕侠决定手写一个极其简陋的<code>Promise</code>，并且实现ES2021引入的Promise.any()方法，篇幅较长，另开文章</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-js判断数据类型</title>
    <link href="/2020/11/26/interview/1-JS%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/11/26/interview/1-JS%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>某2020前端互助群的每周议题(一)</p><a id="more"></a><p><a href="https://juejin.cn/post/6897214524912074766/">议题内容引自</a></p><h2 id="1-JavaScript中判断数据类型"><a href="#1-JavaScript中判断数据类型" class="headerlink" title="1. JavaScript中判断数据类型"></a>1. JavaScript中判断数据类型</h2><p>首先我来表演个js魔法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>    <span class="hljs-comment">// Object -- null的类型是Object</span><br><span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// false  -- null不是Object的实例 </span><br></code></pre></div></td></tr></table></figure><p>精彩！（掌声） 那么，为啥呢？</p><p> 原因是null不是一个空引用, 而是一个原始值, 参考<a href="https://link.zhihu.com/?target=http://lzw.me/pages/ecmascript/%2320">ECMAScript5.1中文版</a> 4.3.11节; 它只是期望此处将引用一个对象, 注意是”期望”, 参考 <a href="https://link.zhihu.com/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null">null - JavaScript</a>. （<a href="https://www.zhihu.com/question/21691758">引自知乎</a>）</p><p>既然是原始值，那么，怎么解释<code>typeof null</code>的结果为Object呢，MDN是这么解释的</p><blockquote><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 <code>null</code> 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，<code>typeof null</code> 也因此返回 <code>&quot;object&quot;</code>。（<a href="http://www.2ality.com/2013/10/typeof-null.html">参考来源</a>）</p><p>曾有一个 ECMAScript 的修复提案（通过选择性加入的方式），但<a href="http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null">被拒绝了</a>。该提案会导致 <code>typeof null === &#39;null&#39;</code></p></blockquote><p>魔法结束，聊聊正经的</p><h3 id="1-常见需要判断的数据类型"><a href="#1-常见需要判断的数据类型" class="headerlink" title="1. 常见需要判断的数据类型"></a>1. 常见需要判断的数据类型</h3><p><strong>基本类型：</strong>String、Number、Boolean、undefined、null、Symbol(ES6引入)</p><p><strong>进阶类型：</strong>Function、Array、Object、NaN、空值等</p><h3 id="2-类型判断方案"><a href="#2-类型判断方案" class="headerlink" title="2. 类型判断方案"></a>2. 类型判断方案</h3><p><strong>2.1 typeof</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">// &quot;string&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span>); <span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>); <span class="hljs-comment">// &quot;boolean&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">Symbol</span>())) <span class="hljs-comment">// &quot;symbol&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>) <span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> []) <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)) <span class="hljs-comment">// &quot;function&quot;</span><br></code></pre></div></td></tr></table></figure><p>在对<code>null</code>，<code>NaN</code>，<code>[]</code>的判断上没有得到理想的结果，typeof无法做到完全区分类型</p><ul><li>number: 会受到NaN的干扰，很多场景其实判断number类型是想要判断是合理的数字类型</li><li>null: 历史遗留的bug了</li><li>数组会被判别为Object: 这样就无法区分Array和Object了</li></ul><p><strong>2.2 Object.prototype.toString()</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">varType</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj)<br>&#125;<br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-string">&quot;1&quot;</span>)); <span class="hljs-comment">// &quot;[object String]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-number">1</span>)); <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(&#123;&#125;)); <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType([])); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;)); <span class="hljs-comment">// &quot;[object Function]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// &quot;[object Null]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// &quot;[object Undefined]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-built_in">Symbol</span>())); <span class="hljs-comment">// &quot;[object Symbol]&quot;</span><br><span class="hljs-built_in">console</span>.log(varType(<span class="hljs-built_in">RegExp</span>())); <span class="hljs-comment">// &quot;[object RegExp]&quot;</span><br></code></pre></div></td></tr></table></figure><p>可见除了NaN以外，其他类型都能判断，以字符串<code>[object &lt;类型&gt;]</code>的格式输出结果</p><blockquote><p>ps：除了使用<code>call()</code>之外，也可以使用<code>apply</code>，唯一的区别是二者接接受的参数格式不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">详见</a></p></blockquote><p>对NaN的处理可以使用函数<code>isNaN()</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>))  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>进行把<code>varType()</code>封装一层如下，这样就可以拿来用了</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isTypeOf = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span> === <span class="hljs-built_in">Object</span>.prototype.toString.call(obj)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 箭头函数形式</span><br><span class="hljs-keyword">var</span> isTypeOf = <span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span> === <span class="hljs-built_in">Object</span>.prototype.toString.call(obj)<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-built_in">console</span>.log(isTypeOf(<span class="hljs-string">&quot;Array&quot;</span>)([])) <span class="hljs-comment">// true</span><br><br></code></pre></div></td></tr></table></figure><h3 id="3-判断数组"><a href="#3-判断数组" class="headerlink" title="3. 判断数组"></a>3. 判断数组</h3><p><strong>3.1 instanceof</strong> </p><p><code>[] instanceof Array</code>看看是否为Array的实例。不过有个坑，instanceof实际上是根据原型链上的继承关系来判断的，而Array继承自Object，因此会有 <code>[] instanceof Object</code>结果为<code>true</code>的情况。</p><p><strong>3.2 constructor</strong></p><p>通过目标的构造器来判断就不会出现<code>instanceof</code>里的意外结果</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[].constructor === <span class="hljs-built_in">Array</span>  <span class="hljs-comment">// true</span><br>[].constructor === <span class="hljs-built_in">Object</span>  <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p><strong>3.3 Array.isArray()</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.isArray([])  <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p><strong>3.4 采用前文提及的toString()方法</strong></p><h3 id="4-空值判断"><a href="#4-空值判断" class="headerlink" title="4. 空值判断"></a>4. 空值判断</h3><p><strong>4.1 null:</strong><code>Object.prototype.toString.apply(null) === &quot;[object Null]&quot; </code>(或者用call调用也一样的)</p><p><strong>4.2 undefined:</strong><code>typeof undefined === undefined</code>,  <code>typeof undefine === null</code>(false,严格比较不会进行数据转换)</p><p>**4.3 Array:**先判断是否为数组, 再判断<code>length</code>是否为0。（直接判断length为0不合理，存在<a href="https://blog.csdn.net/weixin_42505098/article/details/82820063">类数组</a>）</p><p>**4.4 Object:**场景不多，群友给出了一个想法 <code>Object.getOwnPropertyNames</code> 判断返回的数组中属性的个数</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写js轮子</title>
    <link href="/2020/11/26/%E6%89%8B%E5%86%99js%E8%BD%AE%E5%AD%90/"/>
    <url>/2020/11/26/%E6%89%8B%E5%86%99js%E8%BD%AE%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>为了更好地理解一些js方法的原理，决定自己捏捏轮子</p><a id="more"></a><h1 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call,apply,bind"></a>call,apply,bind</h1><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> newThis = args[<span class="hljs-number">0</span>] || <span class="hljs-built_in">window</span>;<br>    <span class="hljs-keyword">const</span> realArgs = args.slice(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> func = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-keyword">const</span> funcSym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;func&#x27;</span>);  <span class="hljs-comment">// 创建临时函数</span><br>    newThis[funcSym] = func;<br><br>    <span class="hljs-keyword">const</span> res = newThis[funcSym](...realArgs);  <span class="hljs-comment">// 执行</span><br>    <br>    <span class="hljs-keyword">delete</span> newThis[funcSym];  <span class="hljs-comment">// 删除</span><br><br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回执行值</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p><code>apply()</code>与<code>call()</code>之间除了接收的参数不同，可以说没有其他区别。因此大致的实现是和<code>call()</code>一样的，除了在处理接收到参数方面点区别，这里就不贴了。</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p><code>bind()</code>是ES5引入的函数。<code>bind()</code>与<code>call()</code>的区别在于它不会立即执行函数，而是返回一个修改了<code>this</code>的新函数，执行需要调用该新函数。</p><p>前面已经实现了<code>call()</code>, 这里就直接借用<code>call()</code>来实现了。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)</span>&#123;<br>    <br>    <span class="hljs-keyword">const</span> newThis = args[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> realArgs = args.slice(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> func = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...newArgs</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>  func.call(newThis, ...realArgs, ...newArgs)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise极简"><a href="#Promise极简" class="headerlink" title="Promise极简"></a>Promise极简</h2><p>1.实现了基本的异步、回调功能。(then和catch)</p><p>2.未实现链式调用，如<code>.then().catch()</code></p><hr><p><code>Promise()</code>的参数是一个带有<code>resolve</code>和<code>reject</code>两个参数的函数，据此我们可以先抽象出MyPromise的结构</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPromise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.status = <span class="hljs-string">&quot;pending&quot;</span><br>    <br>    <span class="hljs-comment">// 把resolve()和reject()绑定到当前对象，也就是令二者的this值指向MyPromise的实例</span><br>    executor(resolve.bind(<span class="hljs-built_in">this</span>), reject.bind(<span class="hljs-built_in">this</span>)) <br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">params</span>) </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">error</span>) </span>&#123;&#125;<br>&#125;<br>MyPromise.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>实现<code>resolve()</code>,<code>rejected()</code>和<code>then()</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPromise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.status = <span class="hljs-string">&quot;pending&quot;</span><br>    <span class="hljs-built_in">this</span>.successCallback = <span class="hljs-literal">undefined</span>  <span class="hljs-comment">// &#x27;fulfilled&#x27;时调用的函数，在then()中赋值</span><br>    <span class="hljs-built_in">this</span>.failCallback = <span class="hljs-literal">undefined</span><span class="hljs-comment">// &#x27;rejected&#x27;时调用的函数，在then()/catch()中赋值</span><br><br>    executor(resolve.bind(<span class="hljs-built_in">this</span>), reject.bind(<span class="hljs-built_in">this</span>))<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">params</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === <span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">// 使用setTimeout的宏任务队列模拟微任务队列</span><br>                <span class="hljs-built_in">this</span>.status = <span class="hljs-string">&quot;fulfilled&quot;</span><br>                <span class="hljs-built_in">this</span>.successCallback(params)<br>            &#125;, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">error</span>) </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params"><span class="hljs-built_in">this</span>.status === <span class="hljs-string">&quot;pending&quot;</span></span>)</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// 同上</span><br>                <span class="hljs-built_in">this</span>.status = <span class="hljs-string">&quot;rejected&quot;</span><br>                <span class="hljs-built_in">this</span>.failCallback(error)<br>            &#125;, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br>MyPromise.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.successCallback = resolve<br>    <span class="hljs-built_in">this</span>.failCallback = reject<br>&#125;<br><br>MyPromise.prototype.catch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reject</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.failCallback = reject<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* then */</span><br><span class="hljs-keyword">const</span> p4 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    resolve(<span class="hljs-number">2</span>)        <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(v))  <span class="hljs-comment">// 输出 1 3 2</span><br><br><br><span class="hljs-comment">/* catch */</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-1&quot;</span>) <br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err:&quot;</span>, err))  <span class="hljs-comment">// 输出 err: err-1</span><br></code></pre></div></td></tr></table></figure><h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h2><p>虽然说我们无法使用<code>.then().catch()</code>这种链式调用来捕获错误，但实际上<code>then()</code>本身就可以捕获错误了(利用第二个参数<code>reject</code>)，因此实现<code>MyPromise.any()</code>这里我就只使用<code>then()</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* ES2021 引入any()概念 */</span> <br>MyPromise.any = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">list</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> isFulfilled = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> len = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> AggregateError = [] <span class="hljs-comment">// 收集错误</span><br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">of</span> list) &#123;  <br>            i.then(  <span class="hljs-comment">// then(resolve, reject)  </span><br>                (value) =&gt; &#123;        <br>                    <span class="hljs-keyword">if</span> (!isFulfilled) &#123;<br>                        isFulfilled = <span class="hljs-literal">true</span><br>                        resolve(value)  <span class="hljs-comment">// 以第一个&#x27;fulfilled&#x27;的Promise实例作为返回值</span><br>                    &#125;<br>                &#125;,<br>                (error) =&gt; &#123; <br>                    len++<br>                    AggregateError.push(error)<br>                    <span class="hljs-keyword">if</span> (len === list.length) &#123;    <span class="hljs-comment">//所有的promise都reject了</span><br>                        reject(AggregateError)<br>                    &#125;<br>                &#125;<br>            )<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* 存在fulfilled的Promise实例 */</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-1&quot;</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-2&quot;</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">3</span>)<br>&#125;)<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise.any([p1, p2, p3]).then(<br>    (v) =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;any:&quot;</span>, v)<br>    &#125;,<br>    (err) =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;any-err&quot;</span>, err)<br>    &#125;<br>)<br><span class="hljs-comment">// 输出：any: 3</span><br><br><span class="hljs-comment">/* Primise实例全部rejected */</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-1&quot;</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-2&quot;</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&quot;err-3&quot;</span>)<br>&#125;)<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise.any([p1, p2, p3]).then(<br>    (v) =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;any:&quot;</span>, v)<br>    &#125;,<br>    (err) =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;any-err&quot;</span>, err)<br>    &#125;<br>)<br><span class="hljs-comment">// 输出：any-err [ &#x27;err-1&#x27;, &#x27;err-2&#x27;, &#x27;err-3&#x27; ]</span><br></code></pre></div></td></tr></table></figure><hr><p>还有一个神奇的实现思路是利用Promise.all()。把所有<code>Promise</code>实例(包括<code>Promise.all()</code>本身)的<code>resolve</code> 和 <code>reject</code>参数位置交换一下，这样就可以把<code>all()</code>转换成<code>any()</code>了。这是利用了和<code>any()</code>和<code>all()</code>二者存在类似于<code>与</code>和<code>或</code>的关系(数电学过吧)，因此把<code>all()</code>的逻辑取反就得到了<code>any()</code>，代码如下(这个是网上抄的，我找不到原文了)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span> (<span class="hljs-params">promise</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<br>      (resolve, reject) =&gt; <span class="hljs-built_in">Promise</span>.resolve(promise).then(reject, resolve))<br>  &#125;<br>  <br>  MyPromise.any = <span class="hljs-function">(<span class="hljs-params">iterable</span>) =&gt;</span><br>    reverse(<span class="hljs-built_in">Promise</span>.all([...iterable].map(reverse)))<br></code></pre></div></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">MyPromise.any([<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;✗&#x27;</span>),<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;✗&#x27;</span>),<br>  <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;✓&#x27;</span>),<br>]).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>  <span class="hljs-comment">// value is &#x27;✓&#x27; </span><br>&#125;);<br><br>MyPromise.any([<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;✗&#x27;</span>),<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;✗&#x27;</span>),<br>]).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reasons</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(reasons)<br>  <span class="hljs-comment">// reasons is [&#x27;✗&#x27;, &#x27;✗&#x27;] </span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p><strong>相关函数/属性</strong></p><ul><li><p>XMLHttpRequest.open( method, url, async ) – 初始化一个请求。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open">详见</a></p><p>async：是否异步</p></li><li><p>XMLHttpRequest.send() – 发送 HTTP 请求。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send">详见</a></p><p>异步请求(默认)：会在请求发送后立即返回；</p><p>同步请求：直到响应到达后才会返回。</p></li><li><p>XMLHttpRequest.onreadystatechange –只要 <code>readyState</code> 值发生变化，就会执行</p></li><li><p>XMLHttpRequest.readyState – XMLHttpRequest 的状态码</p><table><thead><tr><th>值</th><th>状态</th><th>说明</th></tr></thead><tbody><tr><td><code>0</code></td><td><code>UNSENT</code></td><td>代理被创建，但尚未调用 open() 方法。</td></tr><tr><td><code>1</code></td><td><code>OPENED</code></td><td><code>open()</code> 方法已经被调用。</td></tr><tr><td><code>2</code></td><td><code>HEADERS_RECEIVED</code></td><td><code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td><code>3</code></td><td><code>LOADING</code></td><td>下载中； <code>responseText</code> 属性已经包含部分数据。</td></tr><tr><td><code>4</code></td><td><code>DONE</code></td><td>下载操作已完成。</td></tr></tbody></table></li></ul><p><strong>实现</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span><br>xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-keyword">if</span> (xhr != <span class="hljs-literal">null</span>) &#123;<br>    xhr.onreadystatechange = stateChange<br>    xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:3000/&#x27;</span>, <span class="hljs-literal">false</span>)<br>    xhr.send()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stateChange</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> (xhr.status === <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">// 不需要考虑304，见下文</span><br>            <span class="hljs-built_in">console</span>.log(xhr.responseText) <span class="hljs-comment">// 响应数据</span><br>            alert(<span class="hljs-string">&#x27;success&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(xhr.status)<br>            alert(<span class="hljs-string">&quot;something error&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>请求结果判断200或者0状态就可以了，跳转不需要判断的，因为返回的是最后跳转的网址的状态</p><p>另外，ie6以前没有XMLHttpRequest….so，改用这个  </p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">xmlhttp=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br></code></pre></div></td></tr></table></figure><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>预处理对象obj1</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;<br>    id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>    hobbies: <span class="hljs-literal">null</span>,<br>    childObj: &#123;<br>        test: <span class="hljs-string">&quot;deepClone&quot;</span>,<br>    &#125;,<br>    childArray: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    regExp: <span class="hljs-regexp">/a/</span>,<br>    func: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    &#125;,<br>    arrowFunc: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;arrow func&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="利用JSON处理"><a href="#利用JSON处理" class="headerlink" title="利用JSON处理"></a>利用JSON处理</h2><p>使用JSON来深拷贝应该是比较实用的，简单且能满足大多数场景下的需求。缺点是无法处理<code>函数</code>，<code>正则</code>这两种对象。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj1)))<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  id: <span class="hljs-number">1</span>,<br>  name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>  hobbies: <span class="hljs-literal">null</span>,<br>  childObj: &#123; <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;deepClone&#x27;</span> &#125;,<br>  childArray: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ],<br>  regExp: &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到处理后正则变空，函数直接整个没了。</p><h2 id="手写递归处理"><a href="#手写递归处理" class="headerlink" title="手写递归处理"></a>手写递归处理</h2><h3 id="1-简陋结构"><a href="#1-简陋结构" class="headerlink" title="1.简陋结构"></a>1.简陋结构</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">target <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span></span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> tempObj = &#123;&#125;<br>        <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target</span>)</span>&#123;<br>        tempObj[key] = deepClone(target[key])<br>    &#125;<br>        <span class="hljs-keyword">return</span> tempObj<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>  name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>  hobbies: <span class="hljs-literal">null</span>,<br>  childObj: &#123; <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;deepClone&#x27;</span> &#125;,       <br>  childArray: &#123; <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">3</span> &#125;,<br>  regExp: &#123;&#125;,<br>  func: &#123;&#125;,<br>  arrowFunc: &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>显然，这里只能处理最基本的对象<code>&#123;&#125;</code>，数组的话需要再做处理。</p><h3 id="2-处理数组"><a href="#2-处理数组" class="headerlink" title="2.处理数组"></a>2.处理数组</h3><p>也不难，因为基本对象和数组都可以用中括号[]进行属性访问，所以在处理上是一样的。只需要在创建tempObj时加个判断</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> tempObj = <span class="hljs-built_in">Array</span>.isArray(target)?[]:&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">target <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span></span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> tempObj = <span class="hljs-built_in">Array</span>.isArray(target)?[]:&#123;&#125;<br>        <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target</span>)</span>&#123;<br>        tempObj[key] = deepClone(target[key])<br>    &#125;<br>        <span class="hljs-keyword">return</span> tempObj<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>  name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>  hobbies: <span class="hljs-literal">null</span>,<br>  childObj: &#123; <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;deepClone&#x27;</span> &#125;,<br>  childArray: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ],<br>  regExp: &#123;&#125;,<br>  func: &#123;&#125;,<br>  arrowFunc: &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可见，数组拷贝也正常了</p><h3 id="3-循环引用"><a href="#3-循环引用" class="headerlink" title="3.循环引用"></a>3.循环引用</h3><p><del>咕。</del> （咕了的终究还是要还的）</p><p>循环引用就是对象的引用出现了循环，比如</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">obj1.childObj2 = obj1 <br>deepClone(obj1) <span class="hljs-comment">// RangeError: Maxmum call stack size exceeded</span><br></code></pre></div></td></tr></table></figure><p>解决的思路类似于<strong>去重</strong>，可以建一个Map来记录已经处理过的属性，以原对象的属性作为键(target)，以拷贝的内容作为值(tempObj)</p><p>如果Map中已经有记录了就直接返回记录值，否则新增键值对。如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()<br><span class="hljs-keyword">if</span> (m.has(target)) &#123;<br>    <span class="hljs-keyword">return</span> m.get(target)<br>&#125;<br>m.set(target, tempObj)<br></code></pre></div></td></tr></table></figure><p>由于每次递归调用中我们都需要用到Map的最新内容，考虑把它作为函数参数。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target, m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>        <span class="hljs-keyword">let</span> tempObj = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;<br> <br>        <span class="hljs-comment">// 解决循环引用</span><br>        <span class="hljs-keyword">if</span> (m.has(target)) &#123;<br>            <span class="hljs-keyword">return</span> m.get(target)<br>        &#125;<br>        m.set(target, tempObj)<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;<br>            tempObj[key] = deepClone(target[key], m)<br>        &#125;<br>        <span class="hljs-keyword">return</span> tempObj<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>&#125;<br>obj1.childObj2 = obj1<br>obj1.childObj.childObj2 = obj1<br><span class="hljs-built_in">console</span>.log(deepClone(obj1))<br></code></pre></div></td></tr></table></figure><p>output</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;ref *<span class="hljs-number">1</span>&gt; &#123;<br>  id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>  name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>  hobbies: <span class="hljs-literal">null</span>,<br>  childObj: &#123; <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;deepClone&#x27;</span>, <span class="hljs-attr">childObj2</span>: [Circular *<span class="hljs-number">1</span>] &#125;,<br>  childArray: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ],<br>  regExp: &#123;&#125;,<br>  func: &#123;&#125;,<br>  arrowFunc: &#123;&#125;,<br>  childObj2: [Circular *<span class="hljs-number">1</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-处理函数和正则"><a href="#4-处理函数和正则" class="headerlink" title="4.处理函数和正则"></a>4.处理函数和正则</h3><p><del>啊。这两个不处理心里别扭啊。</del>（别扭就别扭吧，反正没啥用orz</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组需要考虑两种情况：普通函数、箭头函数。</p><p><strong>区分</strong>：可以利用箭头函数没有<code>prototype</code>的特点</p><p><strong>拷贝</strong>：</p><ul><li><p>普通函数：</p><p>bind()可以返回一个函数的拷贝啊。MDN对bind()的返回值是这么说的。我试着实现了下拷贝，应该没问题</p><blockquote><p>A copy of the given function with the specified <code>this</code> value, and initial arguments (if provided).</p></blockquote></li><li><p>箭头函数：</p><p>利用toString()和eval()</p></li></ul><p>综上，对函数的处理如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (typeOfValue(<span class="hljs-string">&#x27;Function&#x27;</span>)(target)) &#123;<br>   <span class="hljs-keyword">if</span> (target.prototype)&#123;    <span class="hljs-comment">// 区别箭头函数</span><br>        <span class="hljs-keyword">return</span> target.bind(<span class="hljs-literal">null</span>)<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(target.toString())<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个我想了蛮久了，网上找到的方法似乎都挺麻烦的，比如用正则匹配参数和函数体。</p><p>lodash库的深拷贝对函数的处理也是直接返回。可能拷贝函数真没什么应用场景吧。</p><p>截取代码如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> isFunc = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;function&#x27;</span><br><span class="hljs-keyword">if</span> (isFunc || !cloneableTags[tag]) &#123;<br>       <span class="hljs-keyword">return</span> object ? value : &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><p>使用RegExp()新创建一个正则需要两个参数，分别是主体<a href="https://developer.mozilla.org/zh-cn/docs/web/javascript/guide/regular_expressions#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">内容部分(source)</a>和<a href="https://developer.mozilla.org/zh-cn/docs/web/javascript/guide/regular_expressions#%E9%80%9A%E8%BF%87%E6%A0%87%E5%BF%97%E8%BF%9B%E8%A1%8C%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2">标志(flags)</a>，比如在<code>/a/i</code>中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/a/i</span><br><span class="hljs-built_in">console</span>.log(reg.source, reg.flags) <span class="hljs-comment">// a i</span><br><br><span class="hljs-keyword">let</span> reg2 = <span class="hljs-built_in">RegExp</span>(reg.source, reg.flags) <span class="hljs-comment">// 拷贝</span><br><span class="hljs-built_in">console</span>.log(reg === reg2)<span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>至于正则内部的其他属性，还是需要遍历拷贝，使用前文的拷贝方式就可以了。</p><h3 id="5-判断类型"><a href="#5-判断类型" class="headerlink" title="5.判断类型"></a>5.判断类型</h3><p>用于区分基本对象、数组、函数和正则</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> typeOfValue = <span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span> === <span class="hljs-built_in">Object</span>.prototype.toString.call(v)<br></code></pre></div></td></tr></table></figure><h3 id="6-合并"><a href="#6-合并" class="headerlink" title="6.合并"></a>6.合并</h3><p>把上述代码块整合起来(除了循环引用部分)，看看结果吧</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;<br>    id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>    age: <span class="hljs-string">&#x27;18&#x27;</span>,<br>    childObj: &#123;<br>        test: <span class="hljs-string">&quot;deepClone&quot;</span>,<br>    &#125;,<br>    childArray: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    regExp: <span class="hljs-regexp">/a/</span>,<br>    func: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    &#125;,<br>    arrowFunc: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;arrow func&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> typeOfValue = <span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span> === <span class="hljs-built_in">Object</span>.prototype.toString.call(v)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>        <span class="hljs-keyword">let</span> tempObj<br>        <span class="hljs-keyword">if</span> (typeOfValue(<span class="hljs-string">&#x27;RegExp&#x27;</span>)(target)) &#123; <span class="hljs-comment">// 正则</span><br>            tempObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(target.source, target.flags)<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeOfValue(<span class="hljs-string">&#x27;Function&#x27;</span>)(target)) &#123; <span class="hljs-comment">// 函数 </span><br>            <span class="hljs-keyword">if</span> (target.prototype)    <br>                <span class="hljs-keyword">return</span> target.bind(<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(target.toString())<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// [] and &#123;&#125;</span><br>            tempObj = <span class="hljs-built_in">Array</span>.isArray(target) ? [] : &#123;&#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target</span>)</span>&#123;<br>        tempObj[key] = deepClone(target[key])<br>    &#125;<br>        <span class="hljs-keyword">return</span> tempObj<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(obj2)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正则&quot;</span>, obj1.regExp === obj2.regExp)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;普通函数&quot;</span>, obj1.func === obj2.func)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;箭头函数&quot;</span>, obj1.arrowFunc === obj2.arrowFunc)<br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  id: <span class="hljs-string">&#x27;1&#x27;</span>,<br>  name: <span class="hljs-string">&#x27;litstronger&#x27;</span>,<br>  age: <span class="hljs-string">&#x27;18&#x27;</span>,<br>  childObj: &#123; <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;deepClone&#x27;</span> &#125;,<br>  childArray: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ],<br>  regExp: <span class="hljs-regexp">/a/</span>,<br>  func: [<span class="hljs-built_in">Function</span>: bound func],<br>  arrowFunc: [<span class="hljs-built_in">Function</span> (anonymous)]<br>&#125;<br>正则 <span class="hljs-literal">false</span><br>普通函数 <span class="hljs-literal">false</span><br>箭头函数 <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SAI笔记</title>
    <link href="/2020/11/16/SAI%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2020/11/16/SAI%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>摸鱼日常</p><a id="more"></a><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><code>Ctrl</code> + <code>z</code></p><p><code>Ctrl</code> + <code>s</code></p><p><code>Ctrl</code> + <code>+</code> 放大画布</p><p><code>Ctrl</code> + <code>-</code> 缩小画布</p><p><code>H</code> 水平镜像翻转 <code>E</code>橡皮(铅笔N)</p><p><code>shift</code> 两点直线</p><p><code>Ctrl</code> + <code>R</code> 直尺，按主Ctrl可移动尺子，再次使用快捷键则取消</p><p><code>空格</code> + <code>笔/鼠标</code> 移动画布</p><p><code>[</code>, <code>]</code> 笔刷大小</p><p><code>Ctrl</code> + <code>D</code> 取消选区</p><p><code>Ctrl</code> + <code>鼠标点击图层</code> 快速选区</p><p><code>Ctrl</code>+<code>T</code> 在使用套索选中目标后使用该快捷键，可以对其放大缩小</p><p>精化线稿</p><ul><li><p>重： 轮廓  转折</p></li><li><p>轻：内部线条  褶皱</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>摸鱼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>板绘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html归档</title>
    <link href="/2020/09/14/html%E5%BD%92%E6%A1%A3/"/>
    <url>/2020/09/14/html%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>本篇为MDN上学习html相关时，对一些生疏点的学习记录。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 接触前端也半年多了，是时候回头看看排查一下了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-释义"><a href="#1-释义" class="headerlink" title="1.释义"></a>1.释义</h2><p><code>href</code> 超文本引用（ <strong>h</strong>ypertext <strong>ref</strong>erence）。</p><p><code>CSP</code> content security policy</p><p><code>&lt;!DOCTYPE html&gt;</code> 最短有效的<strong>文档类型声明</strong></p><h2 id="2-备忘"><a href="#2-备忘" class="headerlink" title="2.备忘"></a>2.备忘</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><code>&lt;ol&gt;:</code> order list，有序列表</p><p><code>&lt;ul&gt;:</code></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>&lt;td&gt;:</code> table data</p><p><code>&lt;tr&gt;:</code> table row</p><p><code>&lt;th&gt;:</code> table header</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ht">&lt;tr&gt;<br>&lt;th&gt;&lt;&#x2F;th&gt;<br>&lt;td&gt;&lt;&#x2F;td&gt;<br>&lt;&#x2F;tr&gt;<br></code></pre></div></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ht">&lt;colgroup&gt;<br>    &lt;col&gt;<br>&lt;col&gt;<br>&lt;colgroup&gt;<br></code></pre></div></td></tr></table></figure><hr><p>结构布局规范</p><p><code>&lt;thead&gt;</code></p><p><code>&lt;tfoot&gt;</code></p><p><code>&lt;tbody&gt;</code></p><hr><p><code>iframe</code></p><p>安全问题，如<a href="https://blog.csdn.net/qq_32523587/article/details/79613768">点击劫持</a></p><blockquote><p>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <frame>, </iframe> 或者 <object> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌套到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p></blockquote><h3 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt;a&gt;"></a><code>&lt;a&gt;</code></h3><p>title：鼠标悬停提示</p><p>target：默认当前标签页打开。新标签页打开(_blank)</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-fluid归档</title>
    <link href="/2020/09/12/hexo-fluid%E5%BD%92%E6%A1%A3/"/>
    <url>/2020/09/12/hexo-fluid%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>本篇记录使用博客的过程中遇到的一些错误和解决办法</p><a id="more"></a><p><strong>1.从github仓库迁移到服务器上时部分资源加载失败</strong></p><p>把hexo博客迁移到服务器上时，发现部分资源不能加载。控制台报错<code>net::ERR_CONNECTION_CLOSED</code>。这是因为以前配置hexo主题的时候，把所有资源链接都强制升级为https，而我的服务器站点没有配置SSL证书，才会出现这种情况。</p><p>有两个解决办法：</p><ul><li>一是为站点添加SSL证书，</li><li>二是把关闭强制资源链接使用https访问的选项(该选项通常在博客主题里配置)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>彩印机静态网页</title>
    <link href="/2020/09/02/electron%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/09/02/electron%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>开发彩印机项目web静态页面的问题记录。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以以“使用记录”为标题，是因为我觉得我是出于完成任务式地去了解<code>electron</code>这个框架，很多时候甚至官方文档都没咋看，直接在网上找<code>demo</code>套。以至于整个项目下来后，对这个框架并没有比较全面深入的了解，只能说是会用吧。</p><p><strong>体验:</strong> <code>electron</code>本质上是个<code>nodejs</code>应用程序，不同点是它专注于桌面应用，而不是web服务器。有意思的是，它以web页面作为自己的<code>GUI</code>(图形界面)，就像是用javascript控制的一个可魔改的精简浏览器(Chromium )。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-软件"><a href="#1-软件" class="headerlink" title="1.软件"></a>1.软件</h3><p><a href='https://www.electronjs.org/'><span class="label label-success">Electron</span></a> <span class="label label-primary">前端三语言</span></p><h3 id="2-硬件"><a href="#2-硬件" class="headerlink" title="2.硬件"></a>2.硬件</h3><p><a href='https://support.epson.com.cn/setupnavi/?LG2=C2&OSC=WS&MKN=L805&toppage=&PINF=menu/'><span class="label label-primary">EPSON L805</span></a> <span class="label label-warning">树莓派</span> <span class="label label-primary">13.3寸电容屏</span>  <span class="label label-danger">外壳设计</span></p><h3 id="3-问题合集"><a href="#3-问题合集" class="headerlink" title="3.问题合集"></a>3.问题合集</h3><p><strong>1.鼠标点击按钮时正常，触屏点击时出现奇怪的阴影</strong></p><p>网上查了好一会儿，没得到什么有用的信息。</p><p>后来想了想，这种电容屏更多是应用在移动端(<code>ipad</code>、<code>手机</code>等)，于是更换搜索关键字为: <code>移动端</code> <code>点击出现阴影</code> <code>css</code>，很快就找到一些解决方法。</p><p>只需给按钮增加css样式，把点击时的高亮设置为透明</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">tap-highlight-color</span>: <span class="hljs-selector-tag">rgba</span>(255, 255, 255, 0);<br><span class="hljs-selector-tag">-webkit-tap-highlight-color</span>: <span class="hljs-selector-tag">rgba</span>(255, 255, 255, 0);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">tap-highlight-color：当用户轻按一个链接或者JavaScript</span><br><span class="hljs-comment">可点击元素时给元素覆盖一个高亮色如果想取消这个高亮，将值</span><br><span class="hljs-comment">设置为全透明即可，比如transparent</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p><strong>2.整合静态页面与驱动脚本</strong></p><p>在我这边交互界面(前端)写得差不多后，需要跟后端驱动彩印机(采用的是<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91%E6%89%93%E5%8D%B0%E5%8D%8F%E8%AE%AE/12714792?fr=aladdin">互联网打印协议(IPP)</a>，使用npm上的<code>ipp</code>模块)的朋友对接一下。当然遇到这么一个问题，从网络上获取到的图片要怎么存放，存放在哪 ?</p><ul><li><p>第一时间的想法是在服务器(树莓派)的后端再开一个接口，用来接收前端得到的图片链接，并把图片下载后暂存在本地，供给后端的朋友调用</p></li><li><p>第一个方法虽然能解决问题，但似乎把问题给复杂化了？前端项目使用了<code>electron</code>框架，其文件<code>main.js</code>是<code>nodejs</code>环境，是可以直接作为后端的啊！于是考虑把朋友那边调用<code>ipp</code>的js代码整合到我的<code>electron</code>项目中，这样一来就不需要下载，仅需把前端获取到的图片文件传递过去，就可以打印了。考虑使用<code>ipcMain</code>模块来把<code>fetch()</code>后再用<code>arrayBuffer()</code>处理的图片传递给后端打印。但是写完后发现，ipcMain不支持该数据格式的拷贝传递。突然翻车。。</p></li><li><p>第三个想法是后来看到html文件中的ipc模块是用<code>require()</code>引入的，才意识到这里的网页上是有<code>nodejs</code>环境的！那就好办了，这还要啥后端，驱动彩印机部分的代码直接写网页上。使用<code>fetch()</code>获取网络图片先转化为<code>arrayBuffer()</code>后传递给<code>ipp</code>模块，驱动彩印机打印图片。</p><p>但到了这里遇到了一个问题：<strong>图片的格式不对。</strong>网上稍微查了下，应该是我错把<code>arrayBuffer</code>当成<code>Buffer</code>了，利用<code>Buffer.from()</code>转化一下即可得到<code>Buffer</code>格式的图片。嗯，就这样，彩印机它突突突地就欢快地跑了起来，没其他问题了。</p><p><strong>后续：</strong></p><p>后来我重新试了下，第二个方法(使用<code>ipcMain</code>传参)其实是可行的，不过需要把图片转化为Buffer格式(前面的尝试过程中报错是因为格式搞错了，arrayBuffer()处理后返回的并不是Buffer)。虽然可以，但没必要，嗯。</p></li></ul><p><strong>3.项目打包发布</strong></p><p>关于打包，此图诚不欺我</p><blockquote><p>意思大概是如果你打算打包你的electron应用程序，你将会有一段艹蛋的时光</p></blockquote><img src="https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/electron/pack.png"/><p>electron<a href="https://www.electronjs.org/docs/tutorial/quick-start#create-a-basic-application">官方文档</a>的例子推荐的工具是electron-forge，刚开始照着文档跑了下，体验不佳。一个是会出现奇怪的现象—-生成的exe会有奇怪的启动画面。另外，程序莫名其妙地被运行了两次，一次是立即执行，另一次是在启动动画之后执行。翻了几遍<a href="https://www.electronforge.io/">electron-forge官方文档</a>，也没有找到任何关于启动时的动画的配置介绍(好吧，我觉得那更像是一个bug，而不是我所想的启动动画，如图)</p><img src="https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/electron/elec_forge.png"/><p>想了好一会，觉得这并不是我这边出的问题，应该是打包工具electron-forge的bug了，另寻他路。在electron文档里看到了electron-builder，这个用起来就感觉挺好的，主要是安装配置遇到了点麻烦。</p><p>关于安装，官网是这么说的</p><blockquote><p><a href="http://yarnpkg.com/">Yarn</a> is <a href="https://github.com/electron-userland/electron-builder/issues/1147#issuecomment-276284477">strongly</a> recommended instead of npm.</p></blockquote><p>啊，我用的是npm，所以踩了一堆坑，以下是我的踩坑表演</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install electron-builder --save-dev<br></code></pre></div></td></tr></table></figure><p>配置package.json</p><ul><li><p>填入<code>name</code>, <code>description</code>, <code>version</code> 和 <code>author</code>.</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;my-electron-app&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;description&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;lyq&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>打包的配置。下面是mac和linux的配置，但windows环境下(我win10)并不能生成mac和linux，默认只能生成windows的包…</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;build&quot;: &#123;<br>  &quot;appId&quot;: &quot;your.id&quot;,<br>  &quot;mac&quot;: &#123;<br>    &quot;category&quot;: &quot;your.app.category.type&quot;<br>  &#125;,<br>  &quot;linux&quot;: &#123;<br>    &quot;target&quot;: [<br>      &quot;AppImage&quot;,<br>      <span class="hljs-string">&quot;deb&quot;</span><br>    ]<br>  &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure></li><li><p>添加脚本</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;scripts&quot;: &#123;<br>  &quot;pack&quot;: &quot;electron-builder --dir&quot;,<br>  &quot;dist&quot;: &quot;electron-builder&quot;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>配置好后运行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm run dist</span><br></code></pre></div></td></tr></table></figure><p>然后会报几个错。告诉你<code>winCodeSign-2.6.0</code>和<code>nsis-3.0.4.1</code>,<code>nsis-resources-3.4.1</code>包rename失败。稍微看了下。它是把包下载下来后再改名的，但没有权限改名(access is denied)。这里我就不太能理解了，我已经给了管理员权限，应该可以改名的啊。</p><img src="https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/electron/rename_err.png"/><p>解决的办法是手动改名。直接打开tempFile的路径，把文件夹<code>181096083</code>改名为<code>winCodeSign-2.6.0</code>。之后会再遇到两次类似的错误，处理办法也是一样的，找到文件，然后改名就行了。</p><p>最后再运行打包命令<code>npm run dist</code>，就成功运行，生成的安装包在dist文件夹下。</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>electron文档翻译简中版有挺多小错误的，但当我想参与修正时，发现进入编辑的是beta版本，正式发布的版本与可编辑的版本内容差别很大，连quick start的demo都不一样。阿这….好复杂，算了。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd使用记录</title>
    <link href="/2020/08/29/ant-design-vue%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/08/29/ant-design-vue%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录使用ant-design-vue开发的流程，以及遇到的错误。</p><a id="more"></a><h2 id="错误合集"><a href="#错误合集" class="headerlink" title="错误合集"></a>错误合集</h2><p>官网没给vue-cli4的例子，于是试试按照官网<a href="https://www.antdv.com/docs/vue/use-with-vue-cli-cn/">vue-cli3的步骤</a>操作，遇到了一些问题，这里记录下，后文给了完整过程，我亲自重新跑过一遍，应该是没有问题的。</p><ul><li>坑1.<br><code>Failed to resolve loader: less-loader You may need to install it.</code></li><li>坑2.<br> <code>error  in ../node_modules/_ant-design-vue@1.6.5@ant-design-vue/es/button/style/index.less  Module build failed (from ./node_modules/less-loader/dist/cjs.js):  // https://github.com/ant-design/ant-motion/issues/44   .bezierEasingMixin();</code></li></ul><h2 id="使用-按需引入"><a href="#使用-按需引入" class="headerlink" title="使用(按需引入)"></a>使用(按需引入)</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>安装vue-cli(我现在装的是4.3)</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></div></td></tr></table></figure><p>创建项目, 配置可自选，这里我直接回车默认</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>vue create antd-demo<br></code></pre></div></td></tr></table></figure><p>运行，访问 <a href="http://localhost:8080/">http://localhost:8080/</a> ，可以看到 Welcome to Your Vue.js App </p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> antd<span class="hljs-literal">-demo</span><br><span class="hljs-variable">$</span> npm run serve<br></code></pre></div></td></tr></table></figure><h3 id="2-引入-ant-design-vue"><a href="#2-引入-ant-design-vue" class="headerlink" title="2.引入 ant-design-vue"></a>2.引入 ant-design-vue</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> ant-design-vue<br></code></pre></div></td></tr></table></figure><p>在main.js中引入Button组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span>; <span class="hljs-comment">//引入组件，但不用引入样式</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>Vue.component(Button.name, Button); <span class="hljs-comment">//注册</span><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></div></td></tr></table></figure><p>在app.vue里调用Button组件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Vue logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-按需引入"><a href="#3-按需引入" class="headerlink" title="3.按需引入"></a>3.按需引入</h3><p>安装babel-plugin-import插件</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">$ npm <span class="hljs-keyword">install</span> babel-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">import</span> <span class="hljs-comment">--dev</span><br></code></pre></div></td></tr></table></figure><p>将配置文件<code>babel.config.js</code>的内容替换为如下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  presets: [<span class="hljs-string">&quot;@vue/app&quot;</span>],<br>  plugins: [<br>    [<br>      <span class="hljs-string">&quot;import&quot;</span>,<br>      &#123; <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&quot;ant-design-vue&quot;</span>, <span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&quot;es&quot;</span>, <span class="hljs-attr">style</span>: <span class="hljs-literal">true</span> &#125;<br>    ]<br>  ]<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">$ npm <span class="hljs-keyword">run</span><span class="bash"> serve</span><br></code></pre></div></td></tr></table></figure><p>报错如下，需要安装<code>less-loader</code></p><p><img src="https://img-blog.csdnimg.cn/20200903121015985.png#pic_center" alt="在这里插入图片描述"></p><p>运行</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">$ npm <span class="hljs-keyword">install</span> <span class="hljs-keyword">less</span>-loader <span class="hljs-comment">--save-dev</span><br></code></pre></div></td></tr></table></figure><p>然后，它继续报错。还要安装<code>less</code></p><img src='https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/ant-design-vue/2.png'><p>运行</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">$ npm <span class="hljs-keyword">install</span> <span class="hljs-keyword">less</span> <span class="hljs-comment">--save-dev</span><br></code></pre></div></td></tr></table></figure><p>看样子是<code>less</code>包本身有问题了，它提示给了个Github的<a href="https://github.com/ant-design/ant-motion/issues/44">issues地址</a>，访问看看</p><img src='https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/ant-design-vue/3.png'><p>哇噻，好多大佬遇到了这个问题，翻下去发现各路神仙给了好多解决办法。看了十几个高赞的，大体都是两种办法来解决。</p><p><strong>方法一</strong>：less降级</p><p>但有一些工具是要求用<code>less3.x</code>的(印象中新版webpack就是这样)。算了</p><p><strong>方法二</strong>：<code>less-loader</code>配置里开启允许<code>javascript</code></p><p>这个方法看起来好点，我用的<code>vue-cli4</code>，需要手动在根目录下创建配置文件<code>vue.config.js</code>，在<code>issues</code>评论里找到对应<code>vue-cli4</code>的配置填入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  css: &#123;<br>      loaderOptions: &#123;<br>          less: &#123;<br>            lessOptions:&#123;<br>              javascriptEnabled: <span class="hljs-literal">true</span>,<br>            &#125;<br>          &#125;<br>      &#125;<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ps: 如果没能成功的话，可以试试更多其他版本的配置，详情见<a href="https://github.com/ant-design/ant-motion/issues/44">https://github.com/ant-design/ant-motion/issues/44</a>，本文评论区也有网友给出了其他可用的配置格式</p><p>重新运行，Nice~，按需引入完成。</p><img src='https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/ant-design-vue/6.png'><p>浏览器访问</p><p><img src="https://img-blog.csdnimg.cn/20200903122233151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p>期间还遇到一个小问题，就是import引入时的组件名与实例的标签名并不一致，例如<code>Button</code>组件对应的标签名是<code>AButton</code>如图</p><img src='https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/ant-design-vue/4.png'><img src='https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/ant-design-vue/5.png'><hr><p>附上目前<a href="https://github.com/vueComponent/ant-design-vue/blob/master/components/index.js">所有组件的列表</a></p><p>以上仅是引入一个简单的Button组件，如果要引入官方文档上的Layout示例，那又得踩不少坑，具体见<a href="https://blog.csdn.net/weixin_43641850/article/details/108301690">vue-cli4.0引入官方文档中的Layout示例</a></p><blockquote><p>tip: 如果本篇对你有所帮助，不妨点个赞支持一下~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows归档</title>
    <link href="/2020/08/28/windows%E5%BD%92%E6%A1%A3/"/>
    <url>/2020/08/28/windows%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>windows轻量级的实用/美化工具的合集。</p><a id="more"></a><h2 id="个人桌面"><a href="#个人桌面" class="headerlink" title="个人桌面"></a>个人桌面</h2><div><video width=100% controls>  <source src='https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/windows/desktop.mp4' type='video/mp4'>   <source src='https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/windows/desktop.ogv' type='video/ogg'>   <source src='https://cdn.jsdelivr.net/gh/litstronger/pic@master/post/windows/desktop.webm' type='video/webm'></video>    </div><h3 id="桌面工具"><a href="#桌面工具" class="headerlink" title="桌面工具"></a>桌面工具</h3><p>由于是轻薄本，因此不打算考虑<a href="https://www.baidu.com/link?url=yPh8AMjC22wnkGdZXbaTb8FpYcGHHGFzcsr867HWwqzVe0nLuinOPT53nZ131GymuWILngoMV2qW3MMzZGuIeq&wd=&eqid=9cdfb5d800013689000000045f48cae6"> Wallpaper Engine</a>等比较占资源的美化工具，而是往工具轻量，风格简约的方向优化。</p><ul><li><p><strong>translucentTB</strong></p><p>一个可以修改任务栏样式的轻量软件，大小仅几兆，<a href="https://github.com/TranslucentTB/TranslucentTB">Github项目地址</a></p><p><strong>支持的样式</strong></p><ul><li>Normal(系统默认)</li><li>Clear(全透明)</li><li>Opaque不透明</li><li>Blur(毛玻璃)</li><li>Fluent(液体)</li></ul></li><li><p><strong>Rainmeter</strong></p><p>桌面插件管理器。可以到官网找到很多有趣的小插件，比如上述视频中的左上角的天气插件</p></li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><ul><li><p><strong>Everything</strong></p><p>windows蜗牛般的检索速度。真的慢得感人。Everything解决了这一问题，检索极快，快速帮你找到你想要的文件/文件夹。轻便，大小1.4m。还有一个优点是，支持免安装，也就是，你把它放U盘里也可以直接运行使用。<a href="https://www.voidtools.com/zh-cn/">中文官网</a></p></li><li><p><strong>Glary Utilities</strong></p><p>体验非常好的电脑管理工具</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>windows归档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows归档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css随笔</title>
    <link href="/2020/08/25/css%E9%9A%8F%E7%AC%94/"/>
    <url>/2020/08/25/css%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>个人学习css的一些笔记</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>受够了每次改样式都要去找度娘的这件事了，决定开始重视css。明明很多都是以前查过、解决过的问题，隔一段时间就忘了。于是乎，本篇诞生了( 开篇撒花!  ***)</p><h1 id="8-26-CSS动画"><a href="#8-26-CSS动画" class="headerlink" title="8.26 CSS动画"></a>8.26 CSS动画</h1><h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h2><h3 id="1-transition-propety"><a href="#1-transition-propety" class="headerlink" title="1.transition-propety"></a>1.transition-propety</h3><p>列举要设置动画的所有属性，如：<code>left</code>、<code>margin-left</code>、<code>height</code> 和 <code>color</code>。 <a href="http://www.w3.org/TR/css3-transitions/#animatable-properties-">大多数</a>属性都是可以的。<code>all</code> 表示应用在所有属性上。</p><h3 id="2-transition-duration"><a href="#2-transition-duration" class="headerlink" title="2.transition-duration"></a>2.transition-duration</h3><p>动画持续的时间。单位为秒 <code>s</code> 或者毫秒 <code>ms</code></p><h3 id="3-transition-delay"><a href="#3-transition-delay" class="headerlink" title="3.transition-delay"></a>3.transition-delay</h3><p>设定动画延迟开始的时间。可以是负值。那么动画将会从整个过渡的中间时刻开始渲染。例如，对于 <code>transition-duration: 2s</code>，同时把 <code>delay</code> 设置为 <code>-1s</code>，则过渡动画持续 1 秒钟，并且从正中间开始渲染。</p><h3 id="4-transition-timing-function"><a href="#4-transition-timing-function" class="headerlink" title="4.transition-timing-function"></a>4.transition-timing-function</h3><ul><li><p><strong>cubic-bezier</strong></p><p>贝塞尔曲线  <a href="https://zh.javascript.info/bezier-curve">原理</a>(了解)</p><ul><li><p>x表示时间：0为开始，1标志着结束（即对应<code>transition-duration</code>的结束时刻）</p></li><li><p>y表示过程的完成度：0为属性的初始值，1为属性的最终值（即对应属性的新值）</p><p><strong>Tip：</strong> 其实可以用<code>时间-路程</code> (高中物理)模型来理解其坐标图,，曲线的斜率即为速度。因此不难理解贝塞尔曲线的斜率对应的就是属性改变的快慢</p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssNotes/chart.png"/></li></ul><p><strong>cubic-bezier(x2, y2, x3, y3)</strong></p><ul><li><p>接收两个中间点的坐标作为参数（起始和终止点默认为(0,0)，(1,1), 因此总共有4个点来确定曲线)</p><p>注：如果参数只接收到一个点，该属性会失效</p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssNotes/console.png"/></li><li><p>坐标值可以有负值。(类似惯性的现象)</p><p>cubic-bezier(0.5, -1, 0.5, 1.5)</p><p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssNotes/1598405157254.png" alt="1598405157254"></p></li></ul><p>CSS 提供几条内置的曲线：<code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code> 和 <code>ease-in-out</code>。</p><p><code>linear</code> 其实就是 <code>cubic-bezier(0, 0, 1, 1)</code> 的简写，图像是一条斜率不变的直线，</p><p>其它几个的贝塞尔曲线的简写如下：</p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssNotes/otherChart.png"/><p>挂一个能找到合适的贝塞尔曲线的网站：<a href="http://cubic-bezier.com/">http://cubic-bezier.com/</a></p></li></ul><h3 id="5-transitionend事件"><a href="#5-transitionend事件" class="headerlink" title="5.transitionend事件"></a>5.transitionend事件</h3><p>CSS 动画完成后，会触发 <code>transitionend</code> 事件，可用HTML DOM的<code>addEventListener(event, function)</code>进行捕捉</p><h3 id="6-Keyframes-关键帧动画"><a href="#6-Keyframes-关键帧动画" class="headerlink" title="6.Keyframes 关键帧动画"></a>6.Keyframes 关键帧动画</h3><p>这个也有好多参数哎哟我去..</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><blockquote><p>一切皆盒子</p></blockquote><h2 id="1-CSS选择器"><a href="#1-CSS选择器" class="headerlink" title="1.CSS选择器"></a>1.CSS选择器</h2><h3 id="1-1-选择器类型"><a href="#1-1-选择器类型" class="headerlink" title="1.1 选择器类型"></a>1.1 选择器类型</h3><ul><li>行内选择器：<code>style=&quot;&quot;</code></li><li>ID选择器：<code>#my-id</code>…</li><li>class选择器：<code>.my-class</code>…</li><li>标签名样式：<code>div</code>, <code>img</code>, <code>title</code> …</li><li>伪类：<ul><li>简单伪类：<code>:first-child</code>, <code>:last-child</code>，<code>:nth-of-type(n)</code>…</li><li>用户行为伪类：<code>:hover</code>, <code>:focus</code>, <code>:touch</code>…</li></ul></li><li>伪元素：<code>::before</code>, <code>::after</code>，<code>::first-line</code>，<code>::first-letter</code>…</li></ul><p>此外，还有<strong>属性选择器</strong>等等，更多详情请参阅 <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors">选择器</a>…</p><blockquote><p>nth-of-type()中的nth并不是什么单词的缩写，<a href="https://zhidao.baidu.com/question/427311487.html">详见</a></p></blockquote><h3 id="1-2-优先级"><a href="#1-2-优先级" class="headerlink" title="1.2 优先级"></a>1.2 优先级</h3><ul><li><p>如果一个容器被多条css语句定义，优先顺序为：<strong>行内样式</strong> &gt; <strong>ID选择器</strong> &gt; <strong>类(class)选择器</strong> &gt; <strong>标签名样式</strong></p><p>不难发现，约束越严格，优先级越高</p></li><li><p><code>! important</code>，可以更改CSS样式优先级，<strong>使该条样式属性声明具有最高优先级。</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">box</span>&#123;<br><span class="hljs-attribute">color</span>:red <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="2-盒模型"><a href="#2-盒模型" class="headerlink" title="2.盒模型"></a>2.盒模型</h2><h3 id="2-1-块级、内联"><a href="#2-1-块级、内联" class="headerlink" title="2.1 块级、内联"></a>2.1 块级、内联</h3><ul><li>块级(block)：<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>…</li><li>内联(inline)：<code>&lt;a&gt;</code>,<code>&lt;span&gt;</code>…</li><li>inline-block：通常用于不希望目标换行，但需要设定宽高的情况</li></ul><p><strong>盒模型</strong></p><p>默认情况下，块级元素的宽度是父元素的100％，高度与本身内容一样。</p><ul><li><p>Content box 内容</p></li><li><p>Padding box 内边距 </p></li><li><p>Border box 边宽</p></li><li><p>Margin box 外边距</p><p>父子关系</p><ol><li><p>垂直方向上，margin-top/margin-bottom设置为auto时，自动计算为0，因此不能实现垂直居中</p></li><li><p>父元素高度设置为auto时，父元素将以子元素上下边框的距离作为自身高度。</p><p>若是父元素设置了上/下内边距，或者是上/下边框，那么将以子元素的上下外边距间的距离作为高度</p><blockquote><p>tip: width,height未设置时都是auto</p></blockquote></li></ol></li></ul><p>完整的css盒模型应用于块级盒子，内联元素仅使用盒模型的部分定义</p><p><strong>替代盒模型</strong></p><ul><li><p>标准模型(默认)：width = <code>content</code>, 这里的width只是内容的宽度，不是实际宽度</p></li><li><p>替代模型：width = <code>content</code>+ <code>border</code> + <code>padding</code></p><p>设置：<code>box-sizing: border-box</code> 。如果你希望所有盒模型都使用替代模型，只需</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>&#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="3-文本"><a href="#3-文本" class="headerlink" title="3.文本"></a>3.文本</h2><p><strong>匿名文本：</strong>指所有未包含在行内元素中的字符串</p><p><strong>em框：</strong>高度由当前的font-size确定</p><p><strong>内容区：</strong>简单起见以em框定义，注意替换元素还需加上边框(border)、内边距(padding)</p><p><strong>行间距：</strong>只应用于非替换蒜素，<code>line-height</code> - <code>font-size</code>,实际上得到的值还需要分成两半(半间距)，应用到内容区的顶部和底部</p><p><strong>常见属性：</strong></p><p><strong>text-indent</strong> 缩进</p><p><strong>text-align</strong> 对齐方式</p><p><strong>line-height</strong> 行高，行基线之间的距离。因为默认会继承该属性，通常不给单位会好些，会自动按块字体的大小缩放</p><p><strong>vertical-align</strong> 垂直对齐文本。只应用于行内元素和替换元素</p><p><strong>word-spacing</strong> 单词间隔</p><p><strong>letter-spacing</strong> 字母间隔</p><p><strong>text-transform</strong> 文本转换，大小写、首字母等</p><p><strong>text-decoration</strong> 文本装饰，上、下划线，贯穿线等</p><p><strong>text-shadow</strong> 文本阴影</p><p><strong>direction</strong> 文本方向</p><p><strong>样式化链接</strong></p><ul><li><p>Link 未访问</p></li><li><p>Visited 已访问</p></li><li><p>Hover 光标停留</p></li><li><p>Focus 被选中(如使用键盘tab</p></li><li><p>Active 链接激活后</p><p>注意顺序：<strong>L</strong>o<strong>V</strong>e <strong>F</strong>ears <strong>HA</strong>te.</p></li></ul><h2 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a>4.布局</h2><h3 id="1-flex"><a href="#1-flex" class="headerlink" title="1.flex"></a>1.flex</h3><p>弹性盒子是一种用于按行或按列布局元素的一维布局方法。</p><p><img src="https://developer.mozilla.org/files/3739/flex_terms.png" alt="flex_terms.png"></p><ul><li>main axis 主轴</li><li>cross axis 交叉轴</li></ul><p>常用属性</p><ul><li><p>flex-direction 确定主轴方向</p></li><li><p>flex-wrap 换行</p></li><li><p>flex 常用例子如下：</p><p><code>flex: 200px</code>，则宽度至少为<code>200px</code></p><p><code>flex: 1</code>，无单位的比例，动态尺寸，如有两个元素该值都设为1，则各占50%可用的空间</p></li><li><p>flex-flow <code>flex-direction</code>和<code>flex-wrap</code>的缩写</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">flex-direction</span>: <span class="hljs-selector-tag">row</span>;<br><span class="hljs-selector-tag">flex-wrap</span>: <span class="hljs-selector-tag">wrap</span>;<br></code></pre></div></td></tr></table></figure><p>等价于</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">flex-flow</span>: <span class="hljs-selector-tag">row</span> <span class="hljs-selector-tag">wrap</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>order 元素排序，默认值为0，越大越靠后，可以是负值。例如将第一个按钮移到末尾</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>  <span class="hljs-attribute">order</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>justify-content: 控制元素在主轴的位置</p></li><li><p>align-items: 控制元素在交叉轴的位置</p></li></ul><p>flex全写</p><ul><li>flex-grow  即前文提到的无单位比例</li><li>flex-shrink  处理溢出项这个是进阶用法，暂不研究</li><li>flex-basis 即前文提到的元素最小值</li></ul><h3 id="2-grid-网格"><a href="#2-grid-网格" class="headerlink" title="2.grid(网格)"></a>2.grid(网格)</h3><p>网格是由一系列水平及垂直的线构成的以一种布局模式。</p><ul><li>column 列</li><li>row 行</li><li>gutter 沟槽(间隙)</li></ul><p>常用单位: <code>fr</code></p><p>网格间隙</p><ul><li><p>grid-column-gap 列间隙</p></li><li><p>grid-row-gap 行间隙</p></li><li><p>grid-gap 同时定义行列间隙</p><p>后来标准把前缀grid-去除，改成gap</p></li></ul><p>重复构建行/列：repeat</p><p>显式网格与隐式网格（懵）</p><p>大小限制：minmax()</p><p>自动填充：auto-fill</p><p>基于线的元素放置</p><ul><li>grid-column 基于<code>grid-column-start</code>,<code>grid-column-end</code>的缩写</li><li>grid-row 基于<code>gird-row-start</code>和<code>gird-row-end</code>的缩写</li></ul><p>基于<code>grid-template-areas</code>属性的元素放置</p><ul><li>需要填满网格的每个格子</li><li>一个连续的区域必须是一个矩形</li><li>格子留空时使用<code>.</code>占位</li></ul><h3 id="3-浮动"><a href="#3-浮动" class="headerlink" title="3.浮动"></a>3.浮动</h3><p>需要注意的应该就是浮动导致的<strong>高度计算</strong>问题了。</p><p>使用了float属性后，自身会脱离文档流(也就是在文档流中高度为0)，因此可能会出现以下情况</p><ul><li><p>外部包裹的盒子没有撑开，如下图的蓝色框</p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssNotes/float.png"/></li><li><p>浮动元素下方的盒子元素<code>block</code>使用margin-top会失效</p><p>带有float属性的元素在文档流中高度为0，因此会出现意料之外的情况</p></li></ul><p><strong>解决办法：</strong>清除浮动。在使用了float属性的元素后添加一个盒子(如div)，再添加css属性<code>clear</code>即可</p><h3 id="4-定位"><a href="#4-定位" class="headerlink" title="4.定位"></a>4.定位</h3><p><strong>文档流</strong></p><p><strong>static：</strong>占据正常的文档流，浏览器默认</p><p><strong>relative：</strong>占据正常的文档流，在不改变文档流的情况下移动元素（通过<code>top</code>,<code>bottom</code>,<code>left</code>,<code>right</code>）</p><p><strong>absolute：</strong>脱离正常的文档流，不占据文档流空间。常用于：<code>弹出信息框</code>，<code>控制菜单</code>，<code>翻转面板</code>，以及可以在页面上的任何地方拖放的<code>UI功能</code>……</p><ul><li><p>上下文：<code>top</code>，<code>left</code>等属性都需要有一个参考对象。通常是选取离得最近、并且有显示定义<code>position</code>属性(非默认<code>static</code>)的父元素。</p><p>**更改上下文： **如将参考对象更改为父元素<code>&lt;div&gt;</code>，可在父元素中设置<code>position</code>属性即可实现</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">position</span>: <span class="hljs-selector-tag">relative</span>;<br></code></pre></div></td></tr></table></figure></li></ul><ul><li><p>z-index：调整重叠的<code>absolute</code>的堆叠顺序，默认值为0，数值越大越靠前</p></li><li><p>可实现绝对定位的垂直居中</p><p>在子元素中使用<code>top:0</code>，<code>bottom:0</code>后再使用<code>margin: auto,0</code>即可实现，详情见《css权威指南第三版》p331</p></li></ul><p><strong>fixed：</strong>绝对定位的工作方式完全相同，只有一个主要区别：绝对定位固定元素是相对于<html>元素或其最近的定位祖先，而固定定位固定元素则是相对于浏览器视口本身常用于顶部导航菜单</p><p><strong>sticky：</strong>可用于使导航栏随页面滚动直到特定点，然后粘贴在页面顶部。蛮有意思的</p><h3 id="5-多列布局"><a href="#5-多列布局" class="headerlink" title="5.多列布局"></a>5.多列布局</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><p><strong>column-count：</strong>列数</p><p><strong>column-width：</strong>列宽</p><h4 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h4><p><strong>column-gap：</strong>列间间隙</p><p><strong>column-rule：</strong>列间添加分割线，线利用的是gap的空间(不占宽度)</p><p><strong>break-inside：</strong>选择<code>avoid</code>时，可以避免列中内容(如文段)被分割成两部分</p><h3 id="6-响应式设计"><a href="#6-响应式设计" class="headerlink" title="6.响应式设计"></a>6.响应式设计</h3><h4 id="视口元标签"><a href="#视口元标签" class="headerlink" title="视口元标签"></a>视口元标签</h4><p>viewport。因为移动端常会谎报设备的视口宽度。如480px的设备可能会将视口宽度设为960px，这会导致你的媒体查询失效。因此需要加入下述内容</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>最简单的语法</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> media-type <span class="hljs-keyword">and</span> (media-feature-rule)&#123;<br>    <span class="hljs-comment">/* css rule go here */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>例如，在<code>width</code>小于400px时把字体改成蓝色</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">400px</span>)&#123;<br>    <span class="hljs-selector-tag">body</span>&#123;<br>        <span class="hljs-attribute">color</span>: blue;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Flexible-grid"><a href="#Flexible-grid" class="headerlink" title="Flexible grid"></a>Flexible grid</h4><p>使用灵活的网格，就不必再免去适配各种宽度的设备。</p><blockquote><p>早期用于实现响应式布局的只有<code>float</code>，通常是让每一个元素都带有百分比，并且总和不超过100%，以实现适应各种宽度的屏幕</p></blockquote><h4 id="Modern-layout-technologies"><a href="#Modern-layout-technologies" class="headerlink" title="Modern layout technologies"></a>Modern layout technologies</h4><p><strong>多列布局</strong>(Multiple-column layout)，<strong>弹性布局</strong>(Flexbox)，<strong>网格布局</strong>(Grid)等….相比起以前只有<code>float</code>，要方便得多了</p><h3 id="7-支持旧浏览器"><a href="#7-支持旧浏览器" class="headerlink" title="7.支持旧浏览器"></a>7.支持旧浏览器</h3><h4 id="构建回滚"><a href="#构建回滚" class="headerlink" title="构建回滚"></a>构建回滚</h4><p>传统的布局(如float)会被grid布局覆盖掉。因此可通过同时给出这两种布局的实现来支持旧浏览器</p><h4 id="回滚方式"><a href="#回滚方式" class="headerlink" title="回滚方式"></a>回滚方式</h4><p><strong>inline-block</strong>：可被flex和grid布局覆盖</p><p><strong>table：</strong>暂时没用过</p><p><strong>Multiple-column Layout(多列布局)</strong></p><p><strong>flex</strong>：可被grid布局覆盖</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>布局相关的属性可以覆盖，但像<code>width</code>等的属性可能会影响结果。比如在grid布局和float布局中都对宽度进行了一些限制，那么float中的对<code>width</code>限制会影响grid中的设定</p><p><strong>解决办法：</strong>特性查询</p><p>检测当前环境是否支持grid，然后在实施一些相应的操作</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@supports</span> (<span class="hljs-attribute">display:</span> grid) &#123;<br>    <span class="hljs-selector-class">.item</span>&#123;<br>        <span class="hljs-attribute">width</span>: auto; <span class="hljs-comment">/* 重新设置相关属性覆盖float的影响 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h4><p>flex在对一系列元素排列时，对间隙的控制很有限。我甚至找不到相关属性，目前了解到的只有<code>justify-content: space-around</code>或者是<code>justify-content: space-between</code></p><p>而grid的话，有gap属性，感觉好用点</p><h1 id="杂记-暂不归类"><a href="#杂记-暂不归类" class="headerlink" title="杂记(暂不归类"></a>杂记(暂不归类</h1><p>盒模型</p><ul><li>padding</li><li>border</li><li>margin</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS-肥宅快乐盒</title>
    <link href="/2020/08/15/CSS-%E8%82%A5%E5%AE%85%E5%BF%AB%E4%B9%90%E7%9B%92/"/>
    <url>/2020/08/15/CSS-%E8%82%A5%E5%AE%85%E5%BF%AB%E4%B9%90%E7%9B%92/</url>
    
    <content type="html"><![CDATA[<p>先来看看这个肥宅盒子的效果</p><style>        .wrap{            width: 100px;            height: 100px;            margin: 150px;            position: relative;        }        .cube{              width: 100px;            height: 100px;            margin: 0 auto;            transform-style: preserve-3d;            transform: rotateX(45deg) rotateY(45deg);            animation: motion linear 20s infinite        }        @keyframes motion {            from {                transform: rotateX(0deg) rotateY(0deg);            }            to {                transform: rotateX(360deg) rotateY(360deg);            }        }        .cube .out{            display: block;            position: absolute;            width: 200px;            height: 200px;            opacity: 0.8;            /* hover过渡时间 */            transition: all 0.4s;        }        .pic {            width: 200px;            height: 200px;        }        /* 内部小正方体 */        .cube .in {            display: block;            width: 100px;            height: 100px;            position: absolute;            top: 50px;            left: 50px;        }        .cube .in_pic {            width: 100px;            height: 100px;        }        .cube .front_in {            /* 沿Z轴平移（前移，面向你自己）50px，旋转0° */            transform: rotateY(0deg) translateZ(50px);        }        .cube .back_in {            /* 后移50px，旋转0° */            transform: rotateY(180deg) translateZ(50px);        }        .cube .left_in {            /* 沿X轴平移（左移）50px，绕Y轴顺时针旋转90° */            transform: rotateY(90deg) translateZ(50px) ;        }        .cube .right_in {            /* 右移50px，绕Y轴逆时针旋转90° */            transform: rotateY(-90deg) translateZ(50px);        }        .cube .top_in {            /* 沿Z轴（上移）50px，绕Y轴顺时针旋转90° */            transform: rotateX(90deg) translateZ(50px);        }        .cube .bottom_in {            /* 下移50px，绕Y轴逆时针旋转90° */            transform: rotateX(-90deg) translateZ(50px);        }        .cube .front_out {            /* 沿Z轴平移（前移，面向你自己）50px，旋转0° */            transform: rotateY(0deg) translateZ(100px);        }        .cube .back_out {            /* 后移50px，旋转0° */            transform: rotateY(180deg) translateZ(100px);        }        .cube .left_out {            /* 沿X轴平移（左移）50px，绕Y轴顺时针旋转90° */            transform: rotateY(90deg) translateZ(100px) ;        }        .cube .right_out {            /* 右移50px，绕Y轴逆时针旋转90° */            transform: rotateY(-90deg) translateZ(100px);        }        .cube .top_out {            /* 沿Z轴（上移）50px，绕Y轴顺时针旋转90° */            transform: rotateX(90deg) translateZ(100px);        }        .cube .bottom_out {            /* 下移50px，绕Y轴逆时针旋转90° */            transform: rotateX(-90deg) translateZ(100px);        }        /* hover */        .cube:hover .front_out {            transform: rotateY(0deg) translateZ(200px);        }        .cube:hover .back_out {            transform: rotateY(180deg) translateZ(200px);        }        .cube:hover .left_out {            transform: rotateY(90deg) translateZ(200px) ;        }        .cube:hover .right_out {            transform: rotateY(-90deg) translateZ(200px);        }        .cube:hover .top_out {            transform: rotateX(90deg) translateZ(200px);        }        .cube:hover .bottom_out {            transform: rotateX(-90deg) translateZ(200px);        }</style><div class="wrap">        <div class="cube">            <span class="front_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0eef73838.jpg" class="pic" />            </span>            <span class="back_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0f2fb9a83.jpg" class="pic" />            </span>            <span class="left_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0f55411f0.jpg" class="pic" />            </span>            <span class="right_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0f79a1124.jpg" class="pic" />            </span>            <span class="top_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0f98a8b66.jpg" class="pic" />            </span>            <span class="bottom_out out">                <img src="https://i.loli.net/2018/05/03/5aeb0fdd51b7e.jpg" class="pic" />            </span>            <span class="front_in in">                <img src="https://i.loli.net/2018/05/03/5aeb100223dd0.jpg" class="in_pic" />            </span>            <span class="back_in in">                 <img src="https://i.loli.net/2018/05/03/5aeb101c2c24b.jpg" class="in_pic" />            </span>            <span class="left_in in">                <img src="https://i.loli.net/2018/05/03/5aeb1038127b5.jpg" class="in_pic" />            </span>            <span class="right_in in">                <img src="https://i.loli.net/2018/05/03/5aeb0dce1ca55.jpg" class="in_pic" />            </span>            <span class="top_in in">                <img src="https://i.loli.net/2018/05/03/5aeb1057bb167.jpg" class="in_pic" />            </span>            <span class="bottom_in in">                <img src="https://i.loli.net/2018/05/03/5aeb107514579.jpg" class="in_pic" />            </span>        </div>    </div><p>怎么样，是不是很有意思呢？制作起来其实也不是很难的, 一步一步来</p><h2 id="1-容器"><a href="#1-容器" class="headerlink" title="1.容器"></a>1.容器</h2><h3 id="1-1-定位容器"><a href="#1-1-定位容器" class="headerlink" title="1.1 定位容器"></a>1.1 定位容器</h3><p>首先我们需要一个容器（wrap）来确定肥宅盒子在浏览器中的位置（为了节省空间已省略部分html）</p><p><img src="https://img-blog.csdnimg.cn/20200815231750710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="灰色部分"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.wrap</span>&#123;</span><br>    width: 100px;<br>    height: 100px;<br>    margin: 150px auto;<br><span class="css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">gray</span>;<span class="hljs-comment">/* 方便观察div位置 */</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-承载容器"><a href="#1-2-承载容器" class="headerlink" title="1.2 承载容器"></a>1.2 承载容器</h3><p>在容器wrap里还需要加一个用于承载正方体的容器（cube）。打个比喻，有点像是器皿的底座这样子</p><p><img src="https://img-blog.csdnimg.cn/20200815232750746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="绿色部分"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.wrap</span>&#123;</span><br>    width: 100px;<br>    height: 100px;<br>    margin: 150px auto;<br>    position: relative;<br>    background: gray;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span>&#123;</span><br>    width: 50px;<br>    height: 50px;<br>    margin: 0 auto;<br><span class="css">    <span class="hljs-selector-tag">background</span><span class="hljs-selector-pseudo">:greenyellow</span>;</span><br>    transform-style: preserve-3d; <br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cube&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>好的，我们的底座已经完成了，是时候实现一个立体的小正方体了。</p><h2 id="2-小正方体"><a href="#2-小正方体" class="headerlink" title="2.小正方体"></a>2.小正方体</h2><h3 id="2-1-引入图片"><a href="#2-1-引入图片" class="headerlink" title="2.1 引入图片"></a>2.1 引入图片</h3><p>首先引入6张图片作为6个面（由于重叠，引入后暂时只能看到一张图片），并设定大小</p><p><img src="https://img-blog.csdnimg.cn/20200816012906990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="效果"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-comment">/* 内部小正方体表面 */</span></span><br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.in</span> &#123;</span><br>    display: block;<br>    width: 100px;<br>    height: 100px;<br>    position: absolute;<br>    top: 50px;<br>    left: 50px;<br>&#125;<br><span class="css"><span class="hljs-comment">/* 表面图片 */</span></span><br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.in_pic</span> &#123;</span><br>    width: 100px;<br>    height: 100px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cube&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/1.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/2.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/3.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/4.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/5.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom_in in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/6.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-立体构建"><a href="#2-2-立体构建" class="headerlink" title="2.2 立体构建"></a>2.2 立体构建</h3><p>接下来我们让每个面都旋转、移动到正确的位置。为每个面添加css</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-comment">/* 每个面都有自己的坐标轴XYZ，参考高考的几何题 */</span></span><br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.front_in</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 绕自身Y轴旋转0°, 再沿Z轴平移50px */</span></span><br>    transform: rotateY(0deg) translateZ(50px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.back_in</span> &#123;</span><br>    transform: rotateY(180deg) translateZ(50px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.left_in</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 绕自身Y轴旋转90°，再沿Z轴平移50px */</span></span><br>    transform: rotateY(90deg) translateZ(50px) ;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.right_in</span> &#123;</span><br>    transform: rotateY(-90deg) translateZ(50px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.top_in</span> &#123;</span><br><span class="css">    <span class="hljs-comment">/* 绕自身Y轴旋转90°，再沿Z轴平移 */</span></span><br>    transform: rotateX(90deg) translateZ(50px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.bottom_in</span> &#123;</span><br>    transform: rotateX(-90deg) translateZ(50px);<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-倾斜"><a href="#2-3-倾斜" class="headerlink" title="2.3 倾斜"></a>2.3 倾斜</h3><p>由于我们是从正面看过去的，所以目前还是只能看到一个面，只需要给底座.cube添加一个倾斜角度就可以看到立体的正方体了</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.cube</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">background</span>:greenyellow;<br>    <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d; <br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">45deg</span>); <span class="hljs-comment">/* 倾斜角度 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200816013320139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="倾斜后的立体效果"></p><h2 id="3-大正方体"><a href="#3-大正方体" class="headerlink" title="3. 大正方体"></a>3. 大正方体</h2><h3 id="3-1-立体样式-图片"><a href="#3-1-立体样式-图片" class="headerlink" title="3.1 立体样式+图片"></a>3.1 立体样式+图片</h3><p>搞出小正方体后，同理可实现外部的大正方体, 对应的css如下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-comment">/* 外部正方体 */</span></span><br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.out</span>&#123;</span><br>    display: block;<br>    position: absolute;<br>    width: 200px;<br>    height: 200px;<br><span class="css">    <span class="hljs-selector-tag">opacity</span>: 0<span class="hljs-selector-class">.8</span>;</span><br><span class="css">    <span class="hljs-comment">/* hover过渡时间 */</span></span><br><span class="css">    <span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-tag">all</span> 0<span class="hljs-selector-class">.4s</span>;</span><br>&#125;<br><span class="css"><span class="hljs-comment">/* 外部正方体表面图片 */</span></span><br><span class="css"><span class="hljs-selector-class">.pic</span> &#123;</span><br>    width: 200px;<br>    height: 200px;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.front_out</span> &#123;</span><br>    transform: rotateY(0deg) translateZ(100px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.back_out</span> &#123;</span><br>    transform: rotateY(180deg) translateZ(100px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.left_out</span> &#123;</span><br>    transform: rotateY(90deg) translateZ(100px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.right_out</span> &#123;</span><br>    transform: rotateY(-90deg) translateZ(100px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.top_out</span> &#123;</span><br>    transform: rotateX(90deg) translateZ(100px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.bottom_out</span> &#123;</span><br>    transform: rotateX(-90deg) translateZ(100px);<br>&#125;<br>    <br><span class="css"><span class="hljs-comment">/* 鼠标悬浮(hover)时撑开各个面的效果 */</span></span><br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.front_out</span> &#123;</span><br>    transform: rotateY(0deg) translateZ(200px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.back_out</span> &#123;</span><br>    transform: rotateY(180deg) translateZ(200px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.left_out</span> &#123;</span><br>    transform: rotateY(90deg) translateZ(200px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.right_out</span> &#123;</span><br>    transform: rotateY(-90deg) translateZ(200px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.top_out</span> &#123;</span><br>    transform: rotateX(90deg) translateZ(200px);<br>&#125;<br><span class="css"><span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.bottom_out</span> &#123;</span><br>    transform: rotateX(-90deg) translateZ(200px);<br>&#125;    <br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>引入外部表面6张图片</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 外部正方体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0eef73838.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0f2fb9a83.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0f55411f0.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0f79a1124.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0f98a8b66.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom_out out&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2018/05/03/5aeb0fdd51b7e.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200816003908645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="外部正方体"></p><p><img src="https://img-blog.csdnimg.cn/20200816005949302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70#pic_center" alt="鼠标悬浮效果"></p><p>到这里就已经大致完成了！最后还需要让这个正方体旋转起来，也很简单</p><h3 id="3-2-自动旋转"><a href="#3-2-自动旋转" class="headerlink" title="3.2 自动旋转"></a>3.2 自动旋转</h3><p>在容器.cube中添加对应的css样式，如下</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 定义名为motion动画，绕X轴和Y轴旋转360° */</span><br><span class="hljs-keyword">@keyframes</span> motion &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">0deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">0deg</span>);<br>    &#125;<br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">360deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>);<br>    &#125;<br> &#125;<br><span class="hljs-selector-class">.cube</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">background</span>:greenyellow;<br>    <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d; <br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">45deg</span>); <span class="hljs-comment">/* 倾斜角度 */</span><br><span class="hljs-attribute">animation</span>: motion linear <span class="hljs-number">20s</span> infinite;  <span class="hljs-comment">/* 添加名为motion的动画,循环执行动画 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-完结撒花"><a href="#4-完结撒花" class="headerlink" title="4.完结撒花"></a>4.完结撒花</h2><p>最后的最后，把我们前面在容器.wrap和.cube添加的背景颜色去掉(即删掉下面两行)</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-attribute">background</span>: gray;   <span class="hljs-comment">/* .wrap */</span><br><span class="hljs-attribute">background</span>: greenyellow;<span class="hljs-comment">/* .cube */</span><br></code></pre></div></td></tr></table></figure><p>ok，大功告成。平时并没有存图习惯，图片是临时在P站随便找的，可以自行更换自己喜欢的图片，效果更好（带背景色的图片观感更佳）</p><style>        .wrap {            width: 100px;            height: 100px;            margin: 150px auto;            position: relative;        }        .cube {            width: 50px;            height: 50px;            margin: 0 auto;            transform-style: preserve-3d;            transform: rotateX(45deg) rotateY(45deg);            animation: motion linear 20s infinite;            /* 添加名为motion的动画 */        }        @keyframes motion {            from {                transform: rotateX(0deg) rotateY(0deg);            }            to {                transform: rotateX(360deg) rotateY(360deg);            }        }        /* 内部小正方体 */        .cube .in {            display: block;            width: 100px;            height: 100px;            position: absolute;            top: 50px;            left: 50px;        }        /* 小正方体表面图片 */        .cube .in_pic {            width: 100px;            height: 100px;        }        .cube .front_in {            transform: rotateY(0deg) translateZ(50px);        }        .cube .back_in {            transform: rotateY(180deg) translateZ(50px);        }        .cube .left_in {            transform: rotateY(90deg) translateZ(50px);        }        .cube .right_in {            transform: rotateY(-90deg) translateZ(50px);        }        .cube .top_in {            transform: rotateX(90deg) translateZ(50px);        }        .cube .bottom_in {            transform: rotateX(-90deg) translateZ(50px);        }        /* 外部正方体 */        .cube .out {            display: block;            position: absolute;            width: 200px;            height: 200px;            opacity: 0.8;            /* hover过渡时间 */            transition: all 0.4s;        }        /* 外部正方体表面图片 */        .pic {            width: 200px;            height: 200px;        }        .cube .front_out {            transform: rotateY(0deg) translateZ(100px);        }        .cube .back_out {            transform: rotateY(180deg) translateZ(100px);        }        .cube .left_out {            transform: rotateY(90deg) translateZ(100px);        }        .cube .right_out {            transform: rotateY(-90deg) translateZ(100px);        }        .cube .top_out {            transform: rotateX(90deg) translateZ(100px);        }        .cube .bottom_out {            transform: rotateX(-90deg) translateZ(100px);        }        /* 鼠标悬浮hover撑开 */        .cube:hover .front_out {            transform: rotateY(0deg) translateZ(200px);        }        .cube:hover .back_out {            transform: rotateY(180deg) translateZ(200px);        }        .cube:hover .left_out {            transform: rotateY(90deg) translateZ(200px);        }        .cube:hover .right_out {            transform: rotateY(-90deg) translateZ(200px);        }        .cube:hover .top_out {            transform: rotateX(90deg) translateZ(200px);        }        .cube:hover .bottom_out {            transform: rotateX(-90deg) translateZ(200px);        }</style>    <div class="wrap">        <div class="cube">            <!-- 内部正方体 -->            <span class="front_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/1.png" class="in_pic" />            </span>            <span class="back_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/2.png" class="in_pic" />            </span>            <span class="left_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/3.png" class="in_pic" />            </span>            <span class="right_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/4.png" class="in_pic" />            </span>            <span class="top_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/5.png" class="in_pic" />            </span>            <span class="bottom_in in">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/6.png" class="in_pic" />            </span>            <!-- 外部正方体 -->            <span class="front_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/1.png" class="pic" />            </span>            <span class="back_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/2.png" class="pic" />            </span>            <span class="left_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/3.png" class="pic" />            </span>            <span class="right_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/4.png" class="pic" />            </span>            <span class="top_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/5.png" class="pic" />            </span>            <span class="bottom_out out">                <img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/6.png" class="pic" />            </span>        </div></div><h2 id="5-完整实例代码"><a href="#5-完整实例代码" class="headerlink" title="5.完整实例代码"></a>5.完整实例代码</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.wrap</span> &#123;</span><br>            width: 100px;<br>            height: 100px;<br>            margin: 150px auto;<br>            position: relative;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> &#123;</span><br>            width: 50px;<br>            height: 50px;<br>            margin: 0 auto;<br>            transform-style: preserve-3d;<br>            transform: rotateX(45deg) rotateY(45deg);<br>            animation: motion linear 20s infinite;<br><span class="css">            <span class="hljs-comment">/* 添加名为motion的动画 */</span></span><br>        &#125;<br><span class="css">        <span class="hljs-keyword">@keyframes</span> motion &#123;</span><br>            from &#123;<br>                transform: rotateX(0deg) rotateY(0deg);<br>            &#125;<br>            to &#123;<br>                transform: rotateX(360deg) rotateY(360deg);<br>            &#125;<br>        &#125;<br><span class="css">        <span class="hljs-comment">/* 内部小正方体 */</span></span><br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.in</span> &#123;</span><br>            display: block;<br>            width: 100px;<br>            height: 100px;<br>            position: absolute;<br>            top: 50px;<br>            left: 50px;<br>        &#125;<br><span class="css">        <span class="hljs-comment">/* 小正方体表面图片 */</span></span><br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.in_pic</span> &#123;</span><br>            width: 100px;<br>            height: 100px;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.front_in</span> &#123;</span><br>            transform: rotateY(0deg) translateZ(50px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.back_in</span> &#123;</span><br>            transform: rotateY(180deg) translateZ(50px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.left_in</span> &#123;</span><br>            transform: rotateY(90deg) translateZ(50px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.right_in</span> &#123;</span><br>            transform: rotateY(-90deg) translateZ(50px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.top_in</span> &#123;</span><br>            transform: rotateX(90deg) translateZ(50px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.bottom_in</span> &#123;</span><br>            transform: rotateX(-90deg) translateZ(50px);<br>        &#125;<br><br><span class="css">        <span class="hljs-comment">/* 外部正方体 */</span></span><br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.out</span> &#123;</span><br>            display: block;<br>            position: absolute;<br>            width: 200px;<br>            height: 200px;<br><span class="css">            <span class="hljs-selector-tag">opacity</span>: 0<span class="hljs-selector-class">.8</span>;</span><br><span class="css">            <span class="hljs-comment">/* hover过渡时间 */</span></span><br><span class="css">            <span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-tag">all</span> 0<span class="hljs-selector-class">.4s</span>;</span><br>        &#125;<br><br><span class="css">        <span class="hljs-comment">/* 外部正方体表面图片 */</span></span><br><span class="css">        <span class="hljs-selector-class">.pic</span> &#123;</span><br>            width: 200px;<br>            height: 200px;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.front_out</span> &#123;</span><br>            transform: rotateY(0deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.back_out</span> &#123;</span><br>            transform: rotateY(180deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.left_out</span> &#123;</span><br>            transform: rotateY(90deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.right_out</span> &#123;</span><br>            transform: rotateY(-90deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.top_out</span> &#123;</span><br>            transform: rotateX(90deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span> <span class="hljs-selector-class">.bottom_out</span> &#123;</span><br>            transform: rotateX(-90deg) translateZ(100px);<br>        &#125;<br><span class="css">        <span class="hljs-comment">/* 鼠标悬浮hover撑开 */</span></span><br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.front_out</span> &#123;</span><br>            transform: rotateY(0deg) translateZ(200px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.back_out</span> &#123;</span><br>            transform: rotateY(180deg) translateZ(200px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.left_out</span> &#123;</span><br>            transform: rotateY(90deg) translateZ(200px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.right_out</span> &#123;</span><br>            transform: rotateY(-90deg) translateZ(200px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.top_out</span> &#123;</span><br>            transform: rotateX(90deg) translateZ(200px);<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.bottom_out</span> &#123;</span><br>            transform: rotateX(-90deg) translateZ(200px);<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cube&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 内部正方体 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/1.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/2.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/3.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/4.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/5.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom_in in&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/6.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in_pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!-- 外部正方体 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/1.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/2.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/3.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/4.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/5.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom_out out&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/cssBox/6.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>参考文章: <a href="https://cloud.tencent.com/developer/article/1584279">https://cloud.tencent.com/developer/article/1584279</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue随笔</title>
    <link href="/2020/07/22/vue%E9%9A%8F%E7%AC%94/"/>
    <url>/2020/07/22/vue%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>Vue的学习笔记</p><a id="more"></a><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><p><a href="https://segmentfault.com/a/1190000016344599">https://segmentfault.com/a/1190000016344599</a></p><p><a href="https://zhuanlan.zhihu.com/p/92407628">https://zhuanlan.zhihu.com/p/92407628</a></p><h2 id="一、组件传参"><a href="#一、组件传参" class="headerlink" title="一、组件传参"></a>一、组件传参</h2><ul><li>父组件传参给子组件</li><li>子组件传参给父组件</li></ul><h2 id="二、vue组件中data为什么必须是函数？"><a href="#二、vue组件中data为什么必须是函数？" class="headerlink" title="二、vue组件中data为什么必须是函数？"></a>二、vue组件中data为什么必须是函数？</h2><h2 id="三、vue的两个核心"><a href="#三、vue的两个核心" class="headerlink" title="三、vue的两个核心"></a>三、vue的两个核心</h2><h2 id="四、vue中key值的作用"><a href="#四、vue中key值的作用" class="headerlink" title="四、vue中key值的作用"></a>四、vue中key值的作用</h2><p>唯一标识。用于判断是否为同一个元素(DOM节点)</p><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>key值还有一个作用是为了高效的更新虚拟DOM</p><h2 id="五、Vue的生命周期"><a href="#五、Vue的生命周期" class="headerlink" title="五、Vue的生命周期"></a>五、Vue的生命周期</h2><h3 id="1-八阶段"><a href="#1-八阶段" class="headerlink" title="1.八阶段"></a>1.八阶段</h3><p>创建前/后，挂载前/后，更新前/后，销毁前/后</p><p><strong>beforeCreate</strong> 在new一个vue实例后，只有一些默认的生命周期钩子和默认事件,data和methods中的数据都还没有初始化。</p><p><strong>created</strong> data 和 methods都已经被初始化好了，最早可在该阶段调用 methods 中的方法，或者操作 data 中的数据，</p><p><strong>beforeMount</strong> 编译好了模板，还没挂载。页面尚未更新</p><p><strong>Mounted</strong> 初始化完成，挂载到实例，进入运行阶段。最早可以在此阶段操作页面DOM节点。</p><p><strong>beforeUpdate</strong> 执行到该钩子时，页面上的数据仍是旧的，尚未同步至新数据data</p><p><strong>update</strong> 页面显示的数据已经与data保持同步更新</p><p><strong>beforeDestroy</strong> 进入销毁状态，data属性和method方法还处于可用状态，未被真正销毁</p><p><strong>destroyed</strong> 实例已经被销毁，解除了事件监听和Dom的绑定。注意Dom依旧存在。</p><h3 id="2-created和mounted的区别"><a href="#2-created和mounted的区别" class="headerlink" title="2.created和mounted的区别"></a>2.created和mounted的区别</h3><p>created：在模板渲染成html前调用，通常是初始化一些属性值、方法</p><p>mounted：因为是要挂载到Dom上，因此需要在模板渲染成html后才执行该钩子。通常可以在这里开始操作Dom</p><h3 id="3-vue获取数据在哪个周期函数"><a href="#3-vue获取数据在哪个周期函数" class="headerlink" title="3.vue获取数据在哪个周期函数"></a>3.vue获取数据在哪个周期函数</h3><p>created/beforeMount/mounted都可以。如果需要操作Dom则需要等到Mounted</p><h3 id="4-第一次加载页面会触发哪几个钩子"><a href="#4-第一次加载页面会触发哪几个钩子" class="headerlink" title="4.第一次加载页面会触发哪几个钩子"></a>4.第一次加载页面会触发哪几个钩子</h3><p>beforeCreate，created，beforeMount，mounted</p><h1 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h1><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><ul><li><p>v-bind</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>v-on</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js随笔</title>
    <link href="/2020/07/21/js%E9%9A%8F%E7%AC%94/"/>
    <url>/2020/07/21/js%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>注：全片并未按照一定的顺序编辑，而是仅是相对无序的知识点的整理，参见目录</p><a id="more"></a><h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><p>通常用于遍历对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">in</span> object)<br>    statement<br></code></pre></div></td></tr></table></figure><p>当然，js中数组也是一种特殊的对象，因此<code>for-in</code>也可以像枚举对象属性一样枚举数组索引。但某些浏览器的实现就比较坑了，比如<code>ie</code>，它会把数组原型的一些属性(函数名)也给遍历出来，如<code>map</code>，<code>find</code>，<code>forEach</code>等。</p><p>ie</p><p><img src="https://img-blog.csdnimg.cn/20201213102444444.png" alt="在这里插入图片描述"></p><p>而chrome和edge的实现则比较友好</p><p><img src="C:/Users/lyq/AppData/Roaming/Typora/typora-user-images/1607826464980.png" alt="1607826464980"></p><p>通常来说上述<strong>ie</strong>的情况不是我们希望遇到的，所以嘛，遍历数组还是用原生的<code>for</code>或着<code>forEach()</code>好一点</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><a href="this%E5%88%B0%E5%BA%95%E6%8C%87%E5%90%91%E5%95%A5%EF%BC%9F%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E5%B0%B1%E7%9F%A5%E9%81%93%E4%BA%86%EF%BC%81">this到底指向啥？看完这篇就知道了！</a></p><p>修改函数this指向: <code>call()</code>,<code>apply()</code>,<code>bind()</code> <a href="https://liaoyq.club/2020/11/26/%E6%89%8B%E5%86%99js%E8%BD%AE%E5%AD%90/#call-apply-bind">手写实现</a></p><p>js中函数也是对象，因此在使用this时要注意作用域问题。如vue-cli3下，在methods中写多层嵌套函数时，内层函数使用this时会获取不到vue的实例变量。目前暂时想到的解决办法有两种吧</p><ul><li>利用临时变量暂存, 然后进行参数传递，这里传的是引用（或者说类似于指针），因此可以对原变量进行修改</li><li>使用箭头函数，箭头函数内部的this指向的是外层对象（特殊性）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    value: <span class="hljs-number">1</span><br>&#125;<br>methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">Func1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value) <span class="hljs-comment">// 1</span><br>    <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">// undefine</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 临时变量 + 传参</span><br>methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">Func1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">this</span>.value<br>    <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">// 1</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 箭头函数 关于箭头函数，MDN上是这么解释的</span><br><span class="hljs-comment">/* 箭头函数表达式的语法比函数表达式更简洁，并且没有自</span><br><span class="hljs-comment">己的this，arguments，super或new.target。箭头函数</span><br><span class="hljs-comment">表达式更适用于那些本来需要匿名函数的地方，并且它不能用</span><br><span class="hljs-comment">作构造函数。*/</span><br>methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">Func1</span>(<span class="hljs-params"></span>)</span>&#123;<br>        ()=&gt;&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value) <span class="hljs-comment">// 1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>虽然经常用js，但其实很多基本操作都不是很熟悉，比如对数组的操作..</p><ul><li><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>slice( start, end )  </p><p>切片，不会修改原数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment">// [ 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [ 1, 2, 3, 4, 5 ], slice()操作不会修改原数组</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>splice( index, howmany, newItem1, … , newItemX )  </p><p>剪切（若有newItem参数则会替换剪切部分），会修改原数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">console</span>.log(arr.splice(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)) <span class="hljs-comment">// [3], 返回剪切掉的部分</span><br><span class="hljs-built_in">console</span>.log(arr)   <span class="hljs-comment">// [ 1, 2, 6, 4, 5 ], 替换</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>filter( function( currentValue, index, arr), thisValue )</p><ul><li><p>function(必须)，数组中的每个元素都会执行这个函数，如果返回值为 true时最终保留该元素；</p></li><li><p>currentValue(必须)，代表当前元素的值。</p></li><li><p>不会改变原始数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove</span>(<span class="hljs-params">arr, item</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> myArr = arr.filter(<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> e != item<br>    &#125;)<br>    <span class="hljs-keyword">return</span> myArr<br>&#125;<br><span class="hljs-built_in">console</span>.log(remove(arr, <span class="hljs-number">2</span>))<span class="hljs-comment">// [1, 3, 4]</span><br><span class="hljs-built_in">console</span>.log(arr)<span class="hljs-comment">// [1, 2, 3, 4, 2]</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>forEach( function(currentValue, index, arr ), thisValue)</p><ul><li><p>currentValue(必须): 当前元素</p></li><li><p>index: 当前元素的索引值</p></li><li><p>arr: 当前元素所属的数组对象</p></li><li><p>thisValue: 传递给function的”this”的值. 默认下会传递undefined(但我在nodejs下和chrome测试默认情况均不是undefined，奇怪)</p><p> 注：如果回调函数使用了箭头函数，那么thisValue是无效的(箭头函数没有自己的this值)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, index, myarr</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e)   <span class="hljs-comment">// 6 4</span><br>    <span class="hljs-built_in">console</span>.log(index)   <span class="hljs-comment">// 0 1</span><br>    <span class="hljs-built_in">console</span>.log(myarr)   <span class="hljs-comment">// [ 6, 4 ] </span><br>    <span class="hljs-built_in">console</span>.log(myarr === arr) <span class="hljs-comment">// true  可见传递的时原数组的引用，可以用myarr修改原数组</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)     <span class="hljs-comment">// &#123; str: &#x27;test&#x27; &#125;</span><br>&#125;, &#123;<span class="hljs-attr">str</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;)<br><br><span class="hljs-comment">/*Array、Object用typeof()函数返回值都为object，区分不了是否是数组类型*/</span><br> <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr)    <span class="hljs-comment">// object</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort() 排序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">sort()</span><br><span class="hljs-comment">    1.会改变原数组</span><br><span class="hljs-comment">    2.排序规则是根据unicode编码表，逐位比较</span><br><span class="hljs-comment">    3.默认升序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-keyword">var</span> result = arr.sort();<br><span class="hljs-built_in">console</span>.log(result)<span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ] 返回排序后的数组</span><br><span class="hljs-built_in">console</span>.log(arr)    <span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ] 原数组会被改变</span><br><br><span class="hljs-comment">// 逐位比较</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-built_in">console</span>.log(arr1.sort())<span class="hljs-comment">// [ &#x27;aa&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ]</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">22</span>, <span class="hljs-number">1</span>]<br><span class="hljs-built_in">console</span>.log(arr2.sort())<span class="hljs-comment">// [ 1, 22, 3, 4 ] 一位一位地比较，因此这里22在3的前面  </span><br></code></pre></div></td></tr></table></figure><p>如果想按照数值来排序，则需要给sort()传入一个比较函数compareFn(一个回调函数)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 可以接收参数</span><br><span class="hljs-comment">/* 注意，不同浏览器对sort的传参顺序可能不同</span><br><span class="hljs-comment">   比如chrome下是a=4 b=6,火狐下是a=6,b=4</span><br><span class="hljs-comment">   问题不大，不会影响排序结果*/</span> <br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> result = arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a=&#x27;</span>, a)<span class="hljs-comment">// 4</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b=&#x27;</span>, b)<span class="hljs-comment">// 6 </span><br>&#125;)<br><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">var</span> result = arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a=&#x27;</span>, a)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b=&#x27;</span>, b)<br>&#125;)<br><span class="hljs-comment">// a= 4</span><br><span class="hljs-comment">// b= 6</span><br><span class="hljs-comment">// a= 2</span><br><span class="hljs-comment">// b= 4</span><br></code></pre></div></td></tr></table></figure><p>虽然各个浏览器采用的排序算法不一样，但有一点是一样的</p><ul><li>比较函数返回a-b: 对应升序</li><li>比较函数返回b-a: 对应降序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 升序排序</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">22</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">var</span> result = arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> a-b<br>&#125;)<br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// [ 3, 4, 6, 22 ]</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="push-pop"><a href="#push-pop" class="headerlink" title="push(), pop()"></a>push(), pop()</h3><p>push(), pop()  向原数组末尾插入/删除元素(栈的入栈和出栈)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">console</span>.log(arr.push(<span class="hljs-number">6</span>)) <span class="hljs-comment">// 6，返回值是新数组的长度</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[ 1, 2, 3, 4, 5, 6 ]</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">console</span>.log(arr2.pop()) <span class="hljs-comment">// 5，删除数组末尾元素，返回值是被删除的元素</span><br><span class="hljs-built_in">console</span>.log(arr2)    <span class="hljs-comment">// [1,2,3,4]</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="shift-unshift"><a href="#shift-unshift" class="headerlink" title="shift(), unshift()"></a>shift(), unshift()</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// shift() 删除并返回数组的第一个元素</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr.shift()) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[ 2, 3 ]</span><br><br><span class="hljs-comment">// unshift()向数组开头插入一个或多个元素 </span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr2.unshift(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)) <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">console</span>.log(arr2.unshift(<span class="hljs-number">6</span>))<span class="hljs-comment">// 6</span><br><span class="hljs-built_in">console</span>.log(arr2)<span class="hljs-comment">// [ 6, 4, 5, 1, 2, 3 ]</span><br></code></pre></div></td></tr></table></figure></li><li><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>栈：push()入栈,  pop()出栈</li><li>队列：push()入队,  shift()出队</li></ul></li></ul><h2 id="闭包（closure）"><a href="#闭包（closure）" class="headerlink" title="闭包（closure）"></a>闭包（closure）</h2><h3 id="1-闭包的特点"><a href="#1-闭包的特点" class="headerlink" title="1.闭包的特点"></a>1.闭包的特点</h3><ul><li>我们在函数外部操作了函数内部的值</li><li>闭包对应的函数中的变量是常驻内存</li></ul><h3 id="2-产生闭包的条件"><a href="#2-产生闭包的条件" class="headerlink" title="2.产生闭包的条件"></a>2.产生闭包的条件</h3><ul><li><p>函数嵌套</p></li><li><p>子函数必须用到了外层函数的变量</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* example */</span><br><span class="hljs-keyword">var</span> fun = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeData</span>(<span class="hljs-params"></span>)</span>&#123;<br>        data += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> data<br>    &#125;<br>    <span class="hljs-keyword">return</span> changeData<br>&#125;)()<br><br><span class="hljs-keyword">var</span> example1 = fun<br><span class="hljs-built_in">console</span>.log(example1()) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(example1()) <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure></li><li><p>无法使用<code>!</code>创建的匿名函数构建闭包</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> fun = !<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-number">1</span><br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> data<br>    &#125;<br>    <span class="hljs-keyword">return</span> getData<br>&#125;();<br><span class="hljs-built_in">console</span>.log(fun)<span class="hljs-comment">// false 感叹号被用作取反运算了。。。。</span><br><span class="hljs-built_in">console</span>.log(fun())<span class="hljs-comment">// TypeError: fun is not a function</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="应用例子"><a href="#应用例子" class="headerlink" title="应用例子"></a>应用例子</h3><ul><li><p>以学生为例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> student = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-number">1</span><br>     <br>    <span class="hljs-keyword">return</span> &#123;<br>        getData: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> data<br>        &#125;,<br>        setData: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>)</span>&#123;<br>            data = newVal<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 学生 1</span><br><span class="hljs-keyword">let</span> stu1 = <span class="hljs-keyword">new</span> student()<br><span class="hljs-built_in">console</span>.log(stu1.getData()) <span class="hljs-comment">// 1</span><br>stu1.setData(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(stu1.getData()) <span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 学生 2</span><br><span class="hljs-keyword">let</span> stu2 = <span class="hljs-keyword">new</span> student()<br><span class="hljs-built_in">console</span>.log(stu2.getData()) <span class="hljs-comment">// 1</span><br>stu2.setData(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(stu2.getData()) <span class="hljs-comment">// 3</span><br><span class="hljs-comment">// ...</span><br></code></pre></div></td></tr></table></figure></li></ul><ul><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>内存泄漏: 内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p><p>上述例子中，变量data是常驻内存，如果使用完后没有及时释放就会造成内存泄漏</p><ul><li><p>解决办法：利用javascript的垃圾回收机制进行回收。只需在使用完data后，把外部调用闭包的变量(引用)都赋值为null，这样changeData就被垃圾回收机制当成垃圾对象进行回收，之后对应的data也会被回收，所占的空间也将被释放</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">example1 = <span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2 id="浅拷贝，深拷贝"><a href="#浅拷贝，深拷贝" class="headerlink" title="浅拷贝，深拷贝"></a><a href="https://blog.csdn.net/weixin_37719279/article/details/81240658?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.compare&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.compare">浅拷贝，深拷贝</a></h2><p><a href="https://blog.lzwzw.cn/posts/af017481.html">https://blog.lzwzw.cn/posts/af017481.html</a></p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>三种写法：</p><ul><li><p>使用！开头。</p><p>!function(形参)(实参)  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 一个简单得匿名函数eg：</span><br>!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(_data)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述操作并没有执行该函数，要执行该函数只需要在末尾加上括号</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;Anonymous&quot;</span><br>!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(_data)<br>&#125;(data)<br><br><span class="hljs-comment">// Anonymous</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用()将函数及函数后的括号包裹</p><p>( function() ()) ;</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;Anonymous&quot;</span>;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(_data)<br>&#125;(data))<br><br><span class="hljs-comment">// Anonymous</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用()包裹函数值</p><p>（function())()</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;Anonymous&quot;</span>;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(_data)<br>&#125;)(data)<br><br><span class="hljs-comment">// Anonymous</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises">MDN上的解释</a></p><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，所有错误都可以被后面的<code>catch</code>语句捕获。</p><p>使用示例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// nodejs环境下可能需要加上这段，unhandledRejection事件，专门监听未捕获的reject错误</span><br><span class="hljs-comment">// process.on(&#x27;unhandledRejection&#x27;, (reason, p) =&gt; &#123;</span><br><span class="hljs-comment">//     console.log(&#x27;Unhandled Rejection at: Promise&#x27;, p, &#x27;reason:&#x27;, reason);</span><br><span class="hljs-comment">//     // application specific logging, throwing an error, or other logic here</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">data &gt; <span class="hljs-number">0.5</span></span>)</span>&#123;<br>            resolve(<span class="hljs-string">&quot;大于0.5&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            reject(<span class="hljs-string">&quot;小于0.5&quot;</span>)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;foo: &quot;</span>, foo)     <span class="hljs-comment">// foo:  [Function: foo]</span><br><br><span class="hljs-comment">/*resolve*/</span> <br>foo(<span class="hljs-number">0.7</span>).then(<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123; <span class="hljs-comment">// result:  大于0.5</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;result: &quot;</span>, result)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;)<br><br><span class="hljs-comment">/*reject*/</span><br>foo(<span class="hljs-number">0.2</span>).then(<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;   <span class="hljs-comment">// err: 小于0.5</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;result: &quot;</span>, result)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err: &quot;</span>, err)<br>&#125;)<br><br><span class="hljs-comment">/*reject&#x27;冒泡&#x27;性质传递*/</span><br>foo(<span class="hljs-number">0.1</span>).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123; <span class="hljs-comment">// err:  小于0.5，并不会输出&quot;middle&quot;</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;result: &quot;</span>, result)<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;middle&quot;</span>)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;)<br><br></code></pre></div></td></tr></table></figure><p>另外，Promise 内部的错误不会影响到 Promise 外部的代码。通俗的说法就是“Promise 会吃掉错误”。</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>一直以来都有一个误解，以为只有js有回调函数。。。后来才发现不是这样的，很多编程语言对“回调函数”（callback，或者说“call after”）都有相应的实现方式。 编程语言以不同的方式支持回调，通常使用子例程，lambda表达式，block或函数指针。</p><p>wiki上回调函数的解释：<code>a callback is a reference to executable code, or a piece of executable code, that is passed as an argument to other code.</code> ( 回调是对可执行代码或一段可执行代码的引用，该引用作为参数传递给其他代码 )</p><p>wiki上C语言和js实现回调的例子如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* C */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/* The calling function takes a single callback as a parameter. */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintTwoNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> (*numberSource)(<span class="hljs-keyword">void</span>))</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val1 = numberSource();<br>    <span class="hljs-keyword">int</span> val2 = numberSource();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d and %d\n&quot;</span>, val1, val2);<br>&#125;<br><br><span class="hljs-comment">/* A possible callback */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">overNineThousand</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rand()%<span class="hljs-number">1000</span>) + <span class="hljs-number">9001</span>;<br>&#125;<br><br><span class="hljs-comment">/* Another possible callback. */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">meaningOfLife</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;<br>&#125;<br><br><span class="hljs-comment">/* Here we call PrintTwoNumbers() with three different callbacks. */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">time_t</span> t;<br>    srand((<span class="hljs-keyword">unsigned</span>)time(&amp;t)); <span class="hljs-comment">// Init seed for random function</span><br>    PrintTwoNumbers(&amp;rand);<br>    PrintTwoNumbers(&amp;overNineThousand);<br>    PrintTwoNumbers(&amp;meaningOfLife);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* javascript */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params">num1, num2, callbackFunction</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> callbackFunction(num1, num2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calcProduct</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num1 * num2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calcSum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><span class="hljs-comment">// alerts 75, the product of 5 and 15</span><br>alert(calculate(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, calcProduct));<br><span class="hljs-comment">// alerts 20, the sum of 5 and 15</span><br>alert(calculate(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, calcSum));<br></code></pre></div></td></tr></table></figure><p>C传递的是指针，js中传递的是引用。二者还是很相似的，所以C语言那个例子用js来写也是可以的。不过引用和指针二者的区别对我来说就有点复杂了，暂时还理不清楚。</p><h2 id="let-和-var"><a href="#let-和-var" class="headerlink" title="let 和 var"></a><a href="https://www.cnblogs.com/songzxblog/p/11137117.html">let 和 var</a></h2><ul><li><p>块级作用域（一对花括号{}即是一个块级作用域）。</p><p>在let出现前，js没有函数没有块级作用域，只有<a href="#domain">函数作用域</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">9</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">// 9</span><br><br>&#123;<br>    <span class="hljs-keyword">let</span> j = <span class="hljs-number">9</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(j) <span class="hljs-comment">// ReferenceError: j is not defined</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++</span>)</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">// 先执行循环，i自增到10，之后再依次执行setTimeout</span><br>        <span class="hljs-built_in">console</span>.log(i)<span class="hljs-comment">// 10 10 10 10 10 10 10 10 10 10</span><br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++</span>)</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">// 每一个块作用域里的i值都不会受到外界影响，i值为对应的0~9</span><br>        <span class="hljs-built_in">console</span>.log(i)<span class="hljs-comment">// 0 1 2 3 4 5 6 7 8 9</span><br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><p>===是严格运算符,  ==是相等运算符</p><ul><li><p>===的比较规则</p><ul><li>不同类型值: false</li><li>同一类的<strong>原始类型</strong>值: 同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。</li><li>同一类的<strong>复合类型</strong>值: 两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。</li></ul></li><li><p>==的比较规则</p><ul><li>相同类型: 与===完全一样。</li><li>不同类型值: 先将数据进行类型转换，然后再用===进行比较。</li></ul></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125; <br></code></pre></div></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br></code></pre></div></td></tr></table></figure><p>上述两种方法创建结果基本是一样的，所创建的新对象都继承自Object.prototype</p><h4 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h4><ul><li><p>点号<code>.</code>如果属性名特殊的话可能无法以该方式访问</p></li><li><p>中括号<code>[]</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&#x27;123&#x27;</span>: <span class="hljs-string">&#x27;456&#x27;</span>&#125;<br><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&#x27;123&#x27;</span>])<span class="hljs-comment">// 456</span><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-number">123</span>])<span class="hljs-comment">// 456</span><br><br><span class="hljs-comment">// console.log(obj.&#x27;123&#x27;) SyntaxError: Unexpected string</span><br><span class="hljs-comment">// console.log(obj.123)  SyntaxError</span><br></code></pre></div></td></tr></table></figure><h4 id="遍历and判断属性存在"><a href="#遍历and判断属性存在" class="headerlink" title="遍历and判断属性存在"></a>遍历and判断属性存在</h4><ul><li><p>**遍历: ** for <code>变量名</code> in <code>对象</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;<br>obj.name = <span class="hljs-string">&quot;鲲鲲&quot;</span><br>obj.sing = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sing&quot;</span>) &#125;<br>obj.jump = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;jump&quot;</span>) &#125;<br>obj.rap = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;rap&quot;</span>) &#125;<br><br><span class="hljs-comment">/* 遍历 */</span><br><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i)<span class="hljs-comment">// 属性名</span><br>    <span class="hljs-built_in">console</span>.log(obj[i])<span class="hljs-comment">// 变量值(属性的值)</span><br>&#125;<br><span class="hljs-comment">// name  鲲鲲</span><br><span class="hljs-comment">// sing  () =&gt; &#123; console.log(&quot;sing&quot;) &#125;</span><br><span class="hljs-comment">// jump  () =&gt; &#123; console.log(&quot;jump&quot;) &#125;</span><br><span class="hljs-comment">// rap   () =&gt; &#123; console.log(&quot;rap&quot;) &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>**判断: ** 判断对象是否存在某个属性可以使用 <code>&#39;属性&#39;</code>  in <code>对象</code>，注意要给属性名加上引号，否则属性会被当做变量处理</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> obj)  <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(name <span class="hljs-keyword">in</span> obj)<span class="hljs-comment">// ReferenceError: name is not defined</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p>共5种：Number, String, Boolean, Null, Undefined</p></li><li><p>存放：栈空间</p></li><li><p>比较：直接对值进行比较</p></li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>对象</li><li>存放：堆空间</li><li>比较：比较引用的地址</li></ul><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> b = a;<br>a++;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a=&quot;</span>, a);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b=&quot;</span>, b);<br><br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br>obj1.name = <span class="hljs-string">&#x27;鲲鲲&#x27;</span>;<br><span class="hljs-keyword">var</span> obj2 = obj1;<br><br>obj1.name = <span class="hljs-string">&#x27;碧萝&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;obj1: &quot;</span>, obj1)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;obj2: &quot;</span>, obj2)<br></code></pre></div></td></tr></table></figure><p>示意图：</p><img src="https://cdn.jsdelivr.net/gh/LitStronger/pic@master/post/jsNotes/pro_pic.png" /><p>Actually, 基本/引用数据类型在进行比较时都是对栈空间的值进行比较</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">var obj1 = &#123;&#125;<br>obj1.name = <span class="hljs-string">&#x27;鲲鲲&#x27;</span>;<br>var obj2 = &#123;&#125;<br>obj2.name = <span class="hljs-string">&#x27;鲲鲲&#x27;</span>;<br>console.log(obj1 == obj2)      // <span class="hljs-keyword">false</span> 比较地址<br>console.log(obj1.name == obj2.name)// <span class="hljs-keyword">true</span>  属性<span class="hljs-type">name</span>是基本数据类型，直接比较两者的值<br></code></pre></div></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-函数参数"><a href="#1-函数参数" class="headerlink" title="1.函数参数"></a>1.函数参数</h3><ul><li>一一对应，多余的参数会被忽略</li></ul><h3 id="2-函数也是对象"><a href="#2-函数也是对象" class="headerlink" title="2.函数也是对象"></a>2.函数也是对象</h3><ul><li><p>**函数具有对象的一切特点 **</p></li><li><p><strong>函数是功能更强大的对象</strong>，可以封装代码</p></li><li><p><strong>创建函数的方式</strong></p><ul><li><p>函数声明的方式</p><p>拥有默认属性<code>name</code> ，其值对应函数名，无法直接修改（除非修改函数名）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;It is function&quot;</span>)<br>&#125;<br>fun.name = <span class="hljs-string">&#x27;鲲鲲&#x27;</span><br>fun.name1 = <span class="hljs-string">&#x27;碧萝&#x27;</span><br>fun.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(fun.name)  <span class="hljs-comment">// fun  属性name无法修改</span><br><span class="hljs-built_in">console</span>.log(fun.name1) <span class="hljs-comment">// 碧萝</span><br><span class="hljs-built_in">console</span>.log(fun.age)   <span class="hljs-comment">// 18</span><br><span class="hljs-built_in">console</span>.log(fun)    <span class="hljs-comment">// 函数体</span><br>   <span class="hljs-comment">// ƒ fun()&#123;</span><br>       <span class="hljs-comment">//     console.log(&quot;It is function&quot;)</span><br>   <span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>创建对象的方式(少用)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&quot;console.log(&#x27;It is Function!&#x27;)&quot;</span>)<br>fun()<span class="hljs-comment">// It is Function!</span><br></code></pre></div></td></tr></table></figure></li><li><p>赋值表达式的方式 </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;It is Function!&#x27;</span>)<br>&#125;;<br>fun()<span class="hljs-comment">// It is Function!</span><br><span class="hljs-built_in">console</span>.log(fun.name)<span class="hljs-comment">// fun</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1.全局作用域"></a>1.全局作用域</h3><p><strong>1.1 以var声明:</strong></p><ul><li><p>只要不是函数内声明的变量，都是全局变量</p></li><li><p>浏览器环境下，全局变量(方法)都是window对象的属性(方法)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 全局  script中会预解析</span></span><br><span class="javascript">    b = <span class="hljs-number">11</span>;         <span class="hljs-comment">// 全局  未声明就赋值，默认为全局变量归全局window所有，不会报错</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> c = <span class="hljs-number">12</span>;<span class="hljs-comment">// 局部</span></span><br><span class="javascript">        d = <span class="hljs-number">13</span>;<span class="hljs-comment">// 全局</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(c); <span class="hljs-comment">// 12</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(d); <span class="hljs-comment">// 13</span></span><br>    &#125;<br><span class="javascript"><span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">// ReferenceError: c is not defined</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 10</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">// 11</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>生命周期：跟window一样(浏览器页面打开时创建–页面关闭时销毁)</p></li></ul><h3 id="2-局部作用域"><a href="#2-局部作用域" class="headerlink" title="2.局部作用域"></a>2.局部作用域</h3><p>**<span id="funDomain">2.1 函数作用域:</span>  **</p><ul><li><p>作用范围：函数内部</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<span class="hljs-comment">// 局部</span><br>    b = <span class="hljs-number">11</span>;<span class="hljs-comment">// 全局</span><br><br>&#125;<br>fun()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b=&quot;</span>, b) <span class="hljs-comment">// b= 11</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a=&quot;</span>, a) <span class="hljs-comment">// ReferenceError: a is not defined</span><br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>生命周期：使用函数时创建，使用完后销毁（注意，声明函数时，变量并不会被创建）</p></li></ul><p><strong>2.2块级作用域</strong></p><ul><li><p>作用范围：一对花括号<code>&#123;&#125;</code>内(通常一对<code>&#123;&#125;</code>就是一个块)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a)    <span class="hljs-comment">// ReferenceError: c is not defined</span><br></code></pre></div></td></tr></table></figure><p>注意，var在函数中声明的变量是局部变量，但在非函数的<code>&#123;&#125;</code>中，则是全局的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 全局</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 局部</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">// ReferenceError: b is not defined</span><br><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li><p><strong>函数名首字母大写 。</strong>不大写也不会报错，但这是约定熟成的规范吧。其他人看到大写字母能直接意识到这是个构造函数，方便理解</p></li><li><p><strong>使用new关键字创建实例。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello everybody! My name is &quot;</span> + <span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;, I am &quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot; years old! &quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> kunKun = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;鲲鲲&#x27;</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(kunKun) <span class="hljs-comment">// People &#123; name: &#x27;鲲鲲&#x27;, age: 3, say: [Function] &#125;</span><br>kunKun.say()<span class="hljs-comment">// Hello everybody! My name is 鲲鲲, I like playing basketball</span><br><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes">MDN</a></p><p><img src="https://img-blog.csdnimg.cn/20201203214905426.png" alt="在这里插入图片描述"></p><p>**hasOwnProperty()**可用于检测一个属性是存在于实例中(返回<code>true</code>)，还是存在于原型中(返回<code>false</code>)</p><p><strong>in</strong>则与上述不同，只要能通过该对象访问到给定属性时返回<code>true</code>，无论是在原型中还是实例中</p><p><strong>for-in</strong>返回原型中和实例中所有可通过对象访问、可枚举的属性。注意，原来不可枚举的，如<code>toString()</code>，如果被重写了、并且没把[[Enumerable]]设置为false，也会在<code>for-in</code>循环中返回</p><h2 id="null与undefined"><a href="#null与undefined" class="headerlink" title="null与undefined"></a>null与undefined</h2><ul><li><p>undefined派生自null，因此在经过操作数转换后二者判定为相等，相等性测试如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>===<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure></li><li><p>变量在声明后会默认得到一个undefined值，因此代码中给变量初始化一个undefined值并没有意义。而null则不同，如果变量准备用于存放对象，那么你可以给它赋值为null，可以体现null作为对象空指针的惯例（c语言中对指针也是这么做的）</p></li></ul><h2 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1+0.2 !=0.3"></a>0.1+0.2 !=0.3</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> = <span class="hljs-number">0.30000000000000004</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span>) <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><ul><li><p>基于ieee754数值浮点计算的通病，c语言也有这个问题。尽量不要直接拿浮点数来进行比较（浮点数本身可能就不精确）</p></li><li><p>解决： 可以加个容差，比如 |0.1+0.2-0.3| &lt;= 0.00001(允许的误差值，根据需求情况自己限定)</p></li></ul><h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>json：javascript object notation(符号)，通常用于前后端通信。其他类型的语言也有使用json，如java，php等</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli添加组件</title>
    <link href="/2020/04/14/vue-cli%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/04/14/vue-cli%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="一、流程结构"><a href="#一、流程结构" class="headerlink" title="一、流程结构"></a>一、流程结构</h3><p>在添加组件前呢，先了解一下vue项目的运行流程。</p><ul><li>整个项目的入口是main.js，在开头就引入了vue源码和主页面App.vue。</li><li>之后是生成一个Vue实例，把App.vue的内容渲染到浏览器上<br><img src="https://img-blog.csdnimg.cn/20200414202705396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200414203303903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="二、新建组件"><a href="#二、新建组件" class="headerlink" title="二、新建组件"></a>二、新建组件</h3>为新建的vue项目添加组件，一般是放在文件夹components下，然后在App.vue（或者其他你想引入组件的地方）导入组件</li></ul><h4 id="160-160-160-160-（1）新建组件list"><a href="#160-160-160-160-（1）新建组件list" class="headerlink" title="&#160; &#160; &#160; &#160;（1）新建组件list"></a>&#160; &#160; &#160; &#160;（1）新建组件list</h4><p><img src="https://img-blog.csdnimg.cn/20200414204020916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.msg&quot;</span>&gt;</span></span><br><span class="xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.msg</span>&#125;&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    data () &#123;</span><br><span class="xml">        return &#123;</span><br><span class="xml">            items: [</span><br><span class="xml">                &#123;msg: &#x27;liao&#x27;&#125;,</span><br><span class="xml">                &#123;msg: &#x27;yue&#x27;&#125;,</span><br><span class="xml">                &#123;msg: &#x27;qiang&#x27;&#125;</span><br><span class="xml">            ]</span><br><span class="xml">        &#125;</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="160-160-160-160-（2）引入App-vue并使用组件"><a href="#160-160-160-160-（2）引入App-vue并使用组件" class="headerlink" title="&#160; &#160; &#160; &#160;（2）引入App.vue并使用组件"></a>&#160; &#160; &#160; &#160;（2）引入App.vue并使用组件</h4><p><img src="https://img-blog.csdnimg.cn/20200414221631190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>事实上，新建的项目里已经有一个组件了，就是components下的HelloWorld.vue。</p><p><img src="https://img-blog.csdnimg.cn/20200414202400512.png" alt="在这里插入图片描述"></p><h4 id="160-（3）之后在浏览器就可以看到自己的list组件的效果了"><a href="#160-（3）之后在浏览器就可以看到自己的list组件的效果了" class="headerlink" title="&#160;（3）之后在浏览器就可以看到自己的list组件的效果了"></a>&#160;（3）之后在浏览器就可以看到自己的list组件的效果了</h4><p><img src="https://img-blog.csdnimg.cn/20200414204254630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单、双、三列布局</title>
    <link href="/2020/04/07/%E5%8D%95%E3%80%81%E5%8F%8C%E3%80%81%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80/"/>
    <url>/2020/04/07/%E5%8D%95%E3%80%81%E5%8F%8C%E3%80%81%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="一、单列水平居中布局"><a href="#一、单列水平居中布局" class="headerlink" title="一、单列水平居中布局"></a>一、单列水平居中布局</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">height</span>:  <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#66ccff</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="二、双列布局"><a href="#二、双列布局" class="headerlink" title="二、双列布局"></a>二、双列布局</h4><p>(1)自适应(比较少用), 把宽度改成实际的像素值即可固定宽度。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*清除默认样式*/</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>; <span class="hljs-comment">/*要固定宽度的话，可以采用具体的像素值，如200px*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#66ccff</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="三、三列布局"><a href="#三、三列布局" class="headerlink" title="三、三列布局"></a>三、三列布局</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;     <span class="hljs-comment">/*清除浏览器默认样式*/</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.middle</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: lightblue;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">310px</span> <span class="hljs-number">0</span> <span class="hljs-number">210px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br><br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>更多<a href="https://litstronger.github.io/2020/04/02/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%EF%BC%88%E6%B5%AE%E5%8A%A8-vs-inline-block%EF%BC%89/">三列布局</a></p><p>而利用前面的单列，双列和三列布局，我们可以搭配出混合布局，如在单列布局的div中，再放入单列布局的div和三列布局div。(这就是套娃吧)</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-fluid添加utterances评论功能</title>
    <link href="/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p><strong>8.21 更新:</strong> </p><ul><li><p>请使用最最新版fluid(目前是1.83)</p></li><li><p>请使用最最新版fluid(目前是1.83)</p></li><li><p>请使用最最新版fluid(目前是1.83)</p></li></ul><p>虽然时小白一枚，但觉得给博客添加个评论区应该还是挺简单的，但没想到竟因为英语太菜踩了一下午雷(黑脸)，网上也暂时搜不到针对Hexo-Fluid添加评论的教程，于是忽草草地做了个记录避免再次踩坑。</p><h4 id="一、新建一个github仓库"><a href="#一、新建一个github仓库" class="headerlink" title="一、新建一个github仓库"></a>一、新建一个github仓库</h4><p>首先创建一个公开的<a href="https://github.com/">github</a>仓库，按下图填完信息后Create repository创建<br><img src="https://img-blog.csdnimg.cn/20200403090041977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="新建github仓库"></p><h4 id="二、安装utterances"><a href="#二、安装utterances" class="headerlink" title="二、安装utterances"></a>二、安装utterances</h4><p>安装<a href="https://github.com/apps/utterances">utterances app</a>(点击前往安装)，install(安装)按钮未登陆github时不会显示，已安装则显示的是configure。(为了演示笔者还特地卸载重装了一遍)</p><p><img src="https://img-blog.csdnimg.cn/20200403091025505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选择刚刚建好的github仓库，然后点击安装<br><img src="https://img-blog.csdnimg.cn/20200403091339639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h4><p><a href="https://utteranc.es/">前往配置</a></p><p><img src="https://img-blog.csdnimg.cn/20200403091754763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>建议选择第三个<br><img src="https://img-blog.csdnimg.cn/20200403092149860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>【可选项】根据个人需求选择是否为issue打上标签(label)。作为小白的我就暂时不设置了(留空)<br><img src="https://img-blog.csdnimg.cn/20200403092734150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>然后是主题，根据个人喜好选择吧<br><img src="https://img-blog.csdnimg.cn/20200403092756479.png" alt="在这里插入图片描述"></p></li><li><p>上述步骤填写完成后，最后一栏会根据你前面的操作自动生成配置信息(后面会用到)<br><img src="https://img-blog.csdnimg.cn/20200403092916235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到此，对utterances的配置就完成了，接下来把它应用到我们的Hexo-Fluid</p></li></ul><h4 id="四、添加到Hexo-Fluid"><a href="#四、添加到Hexo-Fluid" class="headerlink" title="四、添加到Hexo-Fluid"></a>四、添加到Hexo-Fluid</h4><p> 打开配置文件(hexo/themes/fluid/_config.yml)，将enable设置为true以开启评论<br><img src="https://img-blog.csdnimg.cn/20200403093446392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在后面找到comments的具体配置<br><img src="https://img-blog.csdnimg.cn/20200403093654915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改后保存文件，重启hexo， 就可以看到文章下多了评论区啦！<br><img src="https://img-blog.csdnimg.cn/20200403093850559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果发现有评论区但无法评论，可能是没有授权github(右下角有提示授权的地方)。如果还是没有评论区的话，可以打开浏览器控制台看看错误提示。也欢迎在评论区提出你的问题！</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三栏布局（float/inline-block/flex）</title>
    <link href="/2020/04/02/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%EF%BC%88%E6%B5%AE%E5%8A%A8-vs-inline-block%EF%BC%89/"/>
    <url>/2020/04/02/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%EF%BC%88%E6%B5%AE%E5%8A%A8-vs-inline-block%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="三栏浮动布局"><a href="#三栏浮动布局" class="headerlink" title="三栏浮动布局"></a>三栏浮动布局</h4><p>浮动的方式有很多种，比如像下面这个例子，是把左右两个板块固定大小和位置，中间自适应。<br>先看效果</p><h6 id="窗口最大化"><a href="#窗口最大化" class="headerlink" title="窗口最大化"></a>窗口最大化</h6><p><img src="https://img-blog.csdnimg.cn/20200405215117765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="缩小化"><a href="#缩小化" class="headerlink" title="缩小化"></a>缩小化</h6><p><img src="https://img-blog.csdnimg.cn/20200405215243882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>三栏浮动布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.wrapper</span>&#123;</span><br>            width: 100%;<br>            height: calc(100vh);<br>            background-color: bisque;<br>            box-sizing: border-box;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.left</span> &#123;</span><br>            width: 200px;<br>            height: 300px;<br><span class="css">            <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#faa</span>;</span><br>            float: left;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.right</span> &#123;</span><br>            width: 200px;<br>            height: 300px;<br><span class="css">            <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#afa</span>;</span><br>            float: right;<br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.content</span> &#123;</span><br>            height: 300px;<br><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#aaf</span>;</span><br><span class="css">            <span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:0</span> 200<span class="hljs-selector-tag">px</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 三栏浮动布局 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在缩小窗口后，左边和右边的板块就会把中间的板块挤掉，或者覆盖重叠<br>（窗口缩小后就只能看到左右栏，这感觉就很像某些网页侧边广告，不信你试试）。<br><img src="https://img-blog.csdnimg.cn/20200402090239909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>缩小后<br><img src="https://img-blog.csdnimg.cn/20200402090258364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="inline-block方式"><a href="#inline-block方式" class="headerlink" title="inline-block方式"></a>inline-block方式</h4><p>使用外部div添加align-center属性，内部三个板块添加inline-block属性来实现<br>先看效果吧</p><h6 id="窗口最大化-1"><a href="#窗口最大化-1" class="headerlink" title="窗口最大化"></a>窗口最大化</h6><p><img src="https://img-blog.csdnimg.cn/20200402091801337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="缩小后"><a href="#缩小后" class="headerlink" title="缩小后"></a>缩小后</h6><p><img src="https://img-blog.csdnimg.cn/20200402091851190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>三栏inline-block布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.main-container</span>&#123;</span><br>  position: absolute;<br>  background-color: darkgrey;<br>  text-align: center;<br>  margin-left: 0;<br>  margin-right: 0;<br>  left: 0;<br>  right: 0;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.part-left</span>&#123;</span><br><span class="css">  <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#0ac276</span>;</span><br>  display: inline-block;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.part-right</span>&#123;</span><br>  background-color: aqua;<br>      display: inline-block;<br>&#125;<br><span class="css"><span class="hljs-selector-class">.part-center</span>&#123;</span><br>  background-color: coral;<br>      display: inline-block;<br>&#125;    <br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; height: 200px;background-color: blue;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; height: 200px;background-color: brown;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; height: 200px;background-color: rgb(51, 30, 30);&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>当然如果你想让这几个板块之间保持间距，可以为目标div添加上margin属性，比如margin-left或者margin-right这样。浮动和非浮动这两种方法各有特点（也许可以做到一样的效果呢，可能是我太菜了没想到而已）</p><h4 id="使用Flex实现"><a href="#使用Flex实现" class="headerlink" title="使用Flex实现"></a>使用Flex实现</h4><p>关于Flex介绍可以看看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮老师的blog</a><br>先看效果</p><h6 id="窗口最大化-2"><a href="#窗口最大化-2" class="headerlink" title="窗口最大化"></a>窗口最大化</h6><p><img src="https://img-blog.csdnimg.cn/2020040520121733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="缩小化-1"><a href="#缩小化-1" class="headerlink" title="缩小化"></a>缩小化</h6><p><img src="https://img-blog.csdnimg.cn/2020040520133954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.wrapper</span>&#123;</span><br>      background-color: bisque;<br>      width: 100%;<br><span class="css">      <span class="hljs-selector-tag">height</span>: <span class="hljs-selector-tag">calc</span>(100<span class="hljs-selector-tag">vh</span>);  <span class="hljs-comment">/*设置div的高度height为calc(100vh)即可,100vh = 视窗高度的100%*/</span></span><br><span class="css">      <span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">flex</span>;           <span class="hljs-comment">/*弹性布局*/</span></span><br><span class="css">      <span class="hljs-selector-tag">justify-content</span>: <span class="hljs-selector-tag">center</span>; <span class="hljs-comment">/*水平居中*/</span></span><br><span class="css">      <span class="hljs-selector-tag">align-items</span>: <span class="hljs-selector-tag">center</span>;     <span class="hljs-comment">/*垂直居中*/</span></span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.part-left</span>&#123;</span><br>      background-color: rgb(161, 59, 59);<br>      width: 200px;<br>      height: 200px;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.part-center</span>&#123;</span><br>      background-color: rgb(58, 156, 58);<br>      width: 200px;<br>      height: 200px;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-class">.part-right</span>&#123;</span><br>      background-color: darkturquoise;<br>      width: 200px;<br>      height: 200px;<br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;part-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>目前个人比较喜欢用inline-block和flex方法吧。float其实也行，不过的话要注意清除浮动，否则会出现意料之外的情况.</p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cookie &amp;&amp; session (nodejs下)</title>
    <link href="/2020/03/31/cookie-session-nodejs%E4%B8%8B/"/>
    <url>/2020/03/31/cookie-session-nodejs%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>最近用nodejs写一个资讯的后台用到了cookie和session，这里做下总结吧。</p><h4 id="一、常见流程"><a href="#一、常见流程" class="headerlink" title="一、常见流程"></a>一、常见流程</h4><ul><li>客户端访问服务器，服务端响应时附带上cookie</li><li>浏览器将cookie保存到本地</li><li>之后访问服务器，浏览器会将cookie发送到服务器端（可以设置是否发送，详见path属性）</li></ul><h4 id="二、参数选项"><a href="#二、参数选项" class="headerlink" title="二、参数选项"></a>二、参数选项</h4><ul><li><strong>Path</strong>: cookie影响的路径，默认为’/‘(即访问所有路径都会发送cookie)。自定义设置后，访问路径不匹配时则不会发送这个cookie</li><li><strong>Expires</strong>：cookie的过期时间。未设置时，则cookie会在关闭浏览器时丢失。</li><li><strong>maxAge</strong>    ：cookie的有效时长(以毫秒为单位)。</li><li><strong>HttpOnly</strong>：设置后，cookie值在document.cookie将不可见，浏览器端将无法通过脚本document.cookie去更改cookie。</li><li><strong>Domain</strong>：设置cookie的作用域</li><li><strong>Secure</strong>：设为true时，cookie将只在https连接中传递，无法在在http中传递。</li></ul><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p>模块用的是express-session<br><a href="https://www.npmjs.com/package/express-session#cookiesamesite">https://www.npmjs.com/package/express-session#cookiesamesite</a></p><h4 id="一、简单流程："><a href="#一、简单流程：" class="headerlink" title="一、简单流程："></a>一、简单流程：</h4><ul><li>客户端首次访问某网站</li><li>服务器生成cookie并初始化session，将session ID保存到cookie中，</li><li>响应时把包含sessionID的cookie发送给客户端，客户端保存cookie到本地</li><li>客户端再次访问时则会发送包含sessionID的cookie，服务器端就可以根据cookie里的sessionID来做相应的操作了（这取决于项目本身）</li></ul><h4 id="二、参数选项："><a href="#二、参数选项：" class="headerlink" title="二、参数选项："></a>二、参数选项：</h4><ul><li><strong>cookie</strong>：详见上文</li><li><strong>secret</strong>：用来注册session ID到cookie中，相当于一个密钥</li><li><strong>genid</strong>：设置创建session ID的自定义函数(默认使用”uid-safe”的库生成id)<br>如<figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">genid: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> genuuid()<span class="hljs-comment">// 生成uuid作为session id</span><br>&#125;<br>genid: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;genid_test&#x27;</span> <span class="hljs-comment">// 注意返回的id最好是不重复的，我这里只是随便返回一个值做测试</span><br>&#125;<br></code></pre></div></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200331141102778.png" alt="1,2为genuuid()生成，3则为我自己的测试"></li></ul><ul><li><p><strong>name</strong>:  可以理解为sessionID保存在cookie中的键值的名称，该值在响应时设置, 之后可以在浏览器发送请求时在requset中读取。默认值为’connect.sid’<br>如设置</p><p><code>name=&#39;session-id&#39;</code></p><p><code>genid=&#39;genid_test&#39;</code>  </p><p>那么客户端的cookie中将会有</p><p><code>session-id：包含sessionID的字符串</code></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200331155521309.png" alt="在这里插入图片描述"></p><ul><li><strong>resave</strong>：强制session保存到session store，即便没有发生变化。通常来说，建议设置为false(<a href="https://www.npmjs.com/package/express-session#cookiesamesite">详见</a>)。</li><li><strong>rolling</strong>：每次请求时强制设置cookie，这将重置cookie的过期时间(maxAge)。（ps:设置为true，而saveUninitialized设置为false时，那么未初始化的session中的cookie请求时将不会刷新重置时间。）</li><li><strong>saveUninitialized</strong>：强制保存未初始化的session。默认为true。(ps：如果把这个值设置为true但是saveUnitialized设置为false,那么cookie不会被包含在响应中(没有初始化的session))</li><li><strong>store</strong>： session存储的实例子，一般可以用redis和mongodb来实现</li></ul><p>session初始化：当用户第一次访问网站的时候，由于Cookies中没有这个合法的SessionID存在，所以服务器会初始化用户的会话，随机分配一个SessionID给他，并写入到用户的Cookies里面。这个SessionID关联的Session就代表了用户的会话信息，这个过程就是初始化会话。</p><h4 id="三、登陆验证的配置"><a href="#三、登陆验证的配置" class="headerlink" title="三、登陆验证的配置"></a>三、登陆验证的配置</h4><p>对于一个网站，如果要求必须登陆才能访问的话，可以考虑对session使用如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">session(&#123;</span><br><span class="hljs-attr">cookie:</span> &#123; <span class="hljs-string">//</span> <span class="hljs-string">根据项目需求配置吧</span><br>        <br>&#125;<span class="hljs-string">,</span> <br><span class="hljs-attr">resave:</span> <span class="hljs-literal">false</span><span class="hljs-string">,</span> <br><span class="hljs-attr">rolling:</span> <span class="hljs-literal">true</span><span class="hljs-string">,</span><span class="hljs-string">//</span> <span class="hljs-string">每次访问都刷新cookie</span><br><span class="hljs-attr">saveUninitialized:</span> <span class="hljs-literal">false</span><span class="hljs-string">//</span> <span class="hljs-string">不保存未初始化的session</span><br><span class="hljs-string">store:new</span> <span class="hljs-string">sessionStore(&#123;</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">config.db.url</span>   <span class="hljs-string">//</span> <span class="hljs-string">把session存放在数据库，这里用了connect-mongo模块</span><br> <span class="hljs-string">&#125;)</span><br><span class="hljs-string">&#125;)</span><br></code></pre></div></td></tr></table></figure><p>resave通常情况下设置false就行了(避免浏览器多个请求同时发送时发生竞争)。一般来说，对于已经登陆的用户，我们会对其session添加一些属性来表示用户处于登陆状态，比如登陆成功时设置<code>req.session.user=&#39;login&#39;</code>。而rolling和saveUninitialized分别为true和false的搭配，可以做到</p><ul><li>未登录用户的session不会保存到数据库(未对session进行操作，没有初始化)；访问登陆界面时服务器也不会发送cookie给客户端。</li><li>已登陆用户的session添加登陆状态(初始化)后，将保存在数据库中，并且发送一个携带sessionID的cookie给客户端。</li></ul>]]></content>
    
    
    <categories>
      
      <category>session</category>
      
    </categories>
    
    
    <tags>
      
      <tag>session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git归档</title>
    <link href="/2020/03/19/Git%E5%BD%92%E6%A1%A3/"/>
    <url>/2020/03/19/Git%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>为什么置顶? 当然是因为我也经常忘记一些 git 命令啦！方便查阅</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200319073359889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0MTg1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Workspace: 工作区<br>Index/Stage: 暂存区<br>Repository: 仓库区（或者说 ‘本地仓库’ ）<br>Remote: 远程仓库</p><h2 id="一、最简单提交总流程"><a href="#一、最简单提交总流程" class="headerlink" title="一、最简单提交总流程"></a>一、最简单提交总流程</h2><p>把本地代码上传到远程仓库，最简单的流程是</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(一)在项目根目录下初始化一个本地仓库<br><span class="hljs-meta">$</span><span class="bash"> git init </span><br><br><span class="hljs-meta">#</span><span class="bash"> 显示当前的Git配置(按q退出查看)</span><br><span class="hljs-meta">$</span><span class="bash"> git config --list</span><br><br><span class="hljs-meta">#</span><span class="bash"> 编辑Git配置文件，设置提交代码时的用户信息</span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;[name]&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;[email address]&quot;</span></span><br><br>(二)把全部代码提交到暂存区<br><span class="hljs-meta">$</span><span class="bash"> git add .  注意add和.之间有个空格 </span><br><span class="hljs-meta">$</span><span class="bash"> git status   查看状态</span><br><br>(三)把暂存区的代码提交到本地仓库<br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;&quot;</span>引号内填入本次修改的简述，例如初始化可填<span class="hljs-string">&quot;init&quot;</span>  </span><br><br>(四)添加远程仓库<br><span class="hljs-meta">$</span><span class="bash"> git remote add &lt;reomote-name&gt; &lt;url&gt;  名字自取，不需要跟远程仓库一模一样。</span><br><span class="hljs-meta">#</span><span class="bash"> 默认的主分支是master</span><br><span class="hljs-meta">$</span><span class="bash"> git push -u &lt;remote-name&gt;  master</span><br></code></pre></div></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init</span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;github账户名&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;github邮箱&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.password <span class="hljs-string">&quot;github密码&quot;</span></span><br>注: 上面的三个信息仅在首次使用需要配置，以后就不需要了<br><span class="hljs-meta">$</span><span class="bash"> git add .</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;init&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin master </span><br></code></pre></div></td></tr></table></figure><p>注: 参数-u设置–set-upstream，记住本次push时的参数，以后可直接git push</p><blockquote><p>The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do.</p></blockquote><p>至此就已经把代码提交到仓库上啦！<br>下面是我整理的一些常用的命令</p><h2 id="二、增加-删除文件"><a href="#二、增加-删除文件" class="headerlink" title="二、增加/删除文件"></a>二、增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add &lt;file1&gt; &lt;file2&gt;  添加文件到暂存区,多个文件用空格隔开</span><br><span class="hljs-meta">$</span><span class="bash"> git add &lt;dir&gt;   提交指定目录到暂存区，包括子目录</span><br><span class="hljs-meta">$</span><span class="bash"> git add .  添加所有文件到暂存区</span><br><br><span class="hljs-meta">#</span><span class="bash"> 如果你只想把某个文件保存在工作区使用，而不想将其添加到暂存区时</span><br><span class="hljs-meta">#</span><span class="bash">（通常情况是你不想把这个文件提交到远程仓库才需要这么做）</span><br><span class="hljs-meta">$</span><span class="bash"> git rm --cached &lt;file&gt;  停止追踪该文件</span><br><span class="hljs-meta">$</span><span class="bash"> git rm -r --cached &lt;dir&gt;   停止追踪该文件夹，-r是递归处理</span><br><span class="hljs-meta">#</span><span class="bash"> 还有一个常用的方法是创建.gitignore文件，关于.gitignore请自行网上查阅</span><br></code></pre></div></td></tr></table></figure><h2 id="三、代码提交："><a href="#三、代码提交：" class="headerlink" title="三、代码提交："></a>三、代码提交：</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -m  <span class="hljs-string">&quot;[message]&quot;</span>  提交暂存区的文件到仓库区 </span><br></code></pre></div></td></tr></table></figure><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来</p><h2 id="四、版本控制"><a href="#四、版本控制" class="headerlink" title="四、版本控制"></a>四、版本控制</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog  <span class="hljs-comment"># 查看引用日志(reference log)</span></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard &lt;局部索引值，7位&gt; </span><br><span class="hljs-meta">#</span><span class="bash"> --mixed 切换本地仓库、暂存区的版本，保留工作区</span><br><span class="hljs-meta">#</span><span class="bash">         未add</span><br><span class="hljs-meta">#</span><span class="bash"> --soft  切换本地仓库的版本, 保留工作区、暂存区</span><br><span class="hljs-meta">#</span><span class="bash">         已add，待commit</span><br><span class="hljs-meta">#</span><span class="bash"> --hard  切换工作区、暂存区、本地仓库的版本</span><br><span class="hljs-meta">#</span><span class="bash">         回到解放前..会丢失工作区内容！不过还可以切回去就是了</span><br></code></pre></div></td></tr></table></figure><p>reset不仅可以回退，也可以前进。事实上只要知道commit的hash值就可以自由切换</p><h2 id="五、分支相关："><a href="#五、分支相关：" class="headerlink" title="五、分支相关："></a>五、分支相关：</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git branch  查看分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch &lt;name&gt;  创建分支</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout &lt;name&gt;  切换分支</span><br><span class="hljs-meta">$</span><span class="bash"> git merge &lt;name&gt;  合并某分支到当前分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch -d &lt;name&gt;  或者  $ git branch --delete &lt;name&gt; </span><br></code></pre></div></td></tr></table></figure><h2 id="六、远程同步"><a href="#六、远程同步" class="headerlink" title="六、远程同步"></a>六、远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote 查看远程库简略信息</span><br><span class="hljs-meta">$</span><span class="bash"> git remote -v 查看远程库详细信息</span><br><br><span class="hljs-meta">#</span><span class="bash"> 添加新的远程仓库,名字可以自由定义,不需要跟远程仓库保持一致</span><br><span class="hljs-meta">$</span><span class="bash"> git remote add &lt;remote-name&gt; &lt;url&gt;  </span><br></code></pre></div></td></tr></table></figure><h3 id="1-本地仓库-gt-远程仓库"><a href="#1-本地仓库-gt-远程仓库" class="headerlink" title="1. 本地仓库=&gt;远程仓库"></a>1. 本地仓库=&gt;远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push &lt;remote-name&gt; &lt;branch-name&gt;把分支推上远程仓库</span><br><br><span class="hljs-meta">#</span><span class="bash"> 如果想要一次推向多个仓库，可以用一个关联多个仓库,格式如下</span><br><span class="hljs-meta">$</span><span class="bash"> git remote set-url --add &lt;remote-name&gt; &lt;branch-name&gt;</span><br><span class="hljs-meta">#</span><span class="bash"> 例(remote-name用origin，branch-name用master):</span><br><span class="hljs-meta">$</span><span class="bash"> git remote set-url --add origin &lt;url-1&gt;  关联url-1 </span><br><span class="hljs-meta">$</span><span class="bash"> git remote set-url --add origin &lt;url-2&gt;  关联url-2</span><br><span class="hljs-meta">$</span><span class="bash"> git remote set-url --add origin &lt;url-3&gt;  关联url-3</span><br><span class="hljs-meta">$</span><span class="bash"> git remote origin master推送分支master到origin关联的三个仓库</span><br><br><span class="hljs-meta">#</span><span class="bash"> 如果push一直报错，提示你应该先把远程的最新版本拉取下来，</span><br><span class="hljs-meta">#</span><span class="bash"> 然而你觉得远程库的代码已经是废品没必要拉去下来时，可以</span><br><span class="hljs-meta">#</span><span class="bash"> 把本地代码强制push到远程仓库（注意，会直接覆盖原有的文件）</span><br><span class="hljs-meta">$</span><span class="bash"> git push -f &lt;remote-name&gt; &lt;branch-name&gt;  -f 强制，force</span><br></code></pre></div></td></tr></table></figure><h3 id="2-远程仓库-gt-本地仓库"><a href="#2-远程仓库-gt-本地仓库" class="headerlink" title="2. 远程仓库 =&gt; 本地仓库"></a>2. 远程仓库 =&gt; 本地仓库</h3><p><strong>方式一：git fetch + git merge(推荐)</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载远程仓库的分支暂存在本地仓库分支，不会覆盖工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git fetch &lt;remote-name&gt; &lt;branch&gt;:&lt;temp-branch&gt; </span><br><span class="hljs-meta">#</span><span class="bash"> 把远程仓库的分支合并到当前本地的分支，注意第二个参数是远程仓库的分支名</span><br><span class="hljs-meta">$</span><span class="bash"> git merge &lt;temp-branch&gt; </span><br></code></pre></div></td></tr></table></figure><p>通常用法：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><br># 把远程仓库origin的master分支暂存到<span class="hljs-keyword">temp</span>分支(若不存在则会自动创建)<br>$ git <span class="hljs-keyword">fetch</span> origin master:<span class="hljs-keyword">temp</span><br>$ git diff <span class="hljs-keyword">temp</span> 查看当前分支与<span class="hljs-keyword">temp</span>分支的不同处<br>$ git merge <span class="hljs-keyword">temp</span> 合并<span class="hljs-keyword">temp</span>分支到当前分支<br>$ git branch -d <span class="hljs-keyword">temp</span> 删除<span class="hljs-keyword">temp</span>分支<br></code></pre></div></td></tr></table></figure><p><strong>方式二：git pull</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载远程仓库到工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git pull &lt;remote-name&gt; &lt;branch-name&gt;      </span><br></code></pre></div></td></tr></table></figure><p><code>git pull</code>相当于是使用固定参数地从远程<code>fetch</code>最新版本并<code>merge</code>(合并)到本地，这样有一个缺点，少了<code>git diff</code>查看远程分支与本地的差异的过程，如果有冲突的话它也会直接merge，虽然之后依旧可以手动修改冲突部分(<a href="https://blog.csdn.net/yangchunshang/article/details/80281699">详见</a>)，但有可能导致严重的后果。</p><p><code>git pull</code> ≈ <code>git fetch</code> + <code>git merge</code>，通常<code>git fetch</code>更安全一些, git pull慎用</p><p>更多资料：</p><ul><li><p>不懂教到懂系列、保姆式教程：<a href="https://www.imooc.com/article/20411">https://www.imooc.com/article/20411</a></p></li><li><p>更多实用命令参见阮老师的文章：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p></li></ul><p>一整个星期下来，看了两三个牛人的技术生涯，忽然就觉得自己的格局还是那么的小。<br>这是个13岁编程，60岁总结自己的一生，并不是觉得他有多么的厉害，而是这份总结写的实在是非常贴切真实。<br><a href="https://hackernoon.com/what-happened-to-software-development-j92032w9#subscribe-embed">https://hackernoon.com/what-happened-to-software-development-j92032w9#subscribe-embed</a></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/">https://www.cnblogs.com/ECJTUACM-873284962/</a></p><p>这个世界真的很大，有很多有趣的思想，独特的人格。诸多类型的信仰，总有一种适合自己的。开阔视野慢慢寻找，好好生活吧！</p>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分治法求第K大元素</title>
    <link href="/2020/03/17/%E5%88%86%E6%B2%BB%E6%B3%95%E6%B1%82%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <url>/2020/03/17/%E5%88%86%E6%B2%BB%E6%B3%95%E6%B1%82%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>注：本文不对快速排序作任何解释，建议在对快速排序有一定了解后再阅览</p><h3 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h3><p>最简单的做法应该是直接选择先将集合排序（比如快速排序），然后直接以k为下标从有序集合中获取。但是这样做时间复杂度其实是比较大的。如果要想要提升一下效率，可以考虑在快速排序的原理下稍微做点修改。</p><h3 id="二、修改快排"><a href="#二、修改快排" class="headerlink" title="二、修改快排"></a><strong>二、修改快排</strong></h3><p><strong>1、主元素的位置特殊性</strong></p><p>在快速排序中，第一步是选取主元素（这里记为x），然后将小于主元素x的数放在x左边，剩下的所有大于x的数放在x右边。记x的下标为x_index，这里不难发现，此时x正是集合中第x_index（如果下标从0开始算，则是x_index+1）大的元素。</p><p><strong>2、题目情景特殊性—-只求一个数</strong><br>​<br>按照快速排序的步骤，接下来是将左、右两个子集合分别重复上述的“选取主元素，其余元素按照大小放主元素左右两边”的操作，但事实题目只是要求找到一个第k大的元素。那么，左右两个子集是不是可以考虑舍去一个？（类似于二分法，只取一半）显然可以！我们可以将k与x_index进行比较，分三种情况，当</p><p>k = x_index 时，说明已经找到了</p><p>k &lt; x_index 时，说明第k大元素在x左边的子集里，可以舍去右边部分</p><p>k &gt; x_index 时，说明第k大元素在x右边的子集里，可以舍去左边部分</p><p><strong>3、C代码实现：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br><span class="hljs-built_in">int</span> exchange(<span class="hljs-built_in">int</span> *a, <span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j)&#123;<br><span class="hljs-built_in">int</span> temp = a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = temp;<br>&#125;<br><span class="hljs-built_in">int</span> partition(<span class="hljs-built_in">int</span> *a, <span class="hljs-built_in">int</span> p, <span class="hljs-built_in">int</span> r)&#123;<br><span class="hljs-built_in">int</span> x = a<span class="hljs-literal">[<span class="hljs-identifier">r</span>]</span>;<br><span class="hljs-built_in">int</span> i = p-<span class="hljs-number">1</span>, j;<br><span class="hljs-keyword">for</span>(j = p; j &lt; r; j++)&#123;<br><span class="hljs-keyword">if</span>(a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &lt; x)&#123;<br>i++;<br>exchange(a, i, j);<span class="hljs-comment">//交换下标为 i和 j 两个数的位置  </span><br>&#125;<br>&#125;<br>exchange(a, i+<span class="hljs-number">1</span>, r); <br><br>return i+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">int</span> quick<span class="hljs-constructor">_sort(<span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">p</span>, <span class="hljs-params">int</span> <span class="hljs-params">r</span>, <span class="hljs-params">int</span> <span class="hljs-params">k</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">find</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span>(p &lt; r)&#123;<br><span class="hljs-built_in">int</span> x_index = partition(a, p, r); <span class="hljs-comment">//获取主元素下标</span><br>printf(<span class="hljs-string">&quot;主元素下标x_index=%d\n&quot;</span>, x_index);<br><br><span class="hljs-keyword">if</span>(k<span class="hljs-operator"> == </span>x_index)&#123;<br>*find = <span class="hljs-number">1</span>;<br>printf(<span class="hljs-string">&quot;find number k = %d\n&quot;</span>, a<span class="hljs-literal">[<span class="hljs-identifier">x_index</span>]</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &lt; x_index)&#123;<br>quick<span class="hljs-constructor">_sort(<span class="hljs-params">a</span>, <span class="hljs-params">p</span>, <span class="hljs-params">x_index</span>-1, <span class="hljs-params">k</span>, <span class="hljs-params">find</span>)</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &gt; x_index)&#123;<br>quick<span class="hljs-constructor">_sort(<span class="hljs-params">a</span>, <span class="hljs-params">x_index</span>+1, <span class="hljs-params">r</span>, <span class="hljs-params">k</span>, <span class="hljs-params">find</span>)</span>;<br>&#125;<br>&#125; <br>&#125;<br><br> <span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br> &#123;<br> <span class="hljs-built_in">int</span> find = -<span class="hljs-number">1</span>, k; <br>    printf(<span class="hljs-string">&quot;请输入k值&quot;</span>); <br>scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k); <br>k = k -<span class="hljs-number">1</span>;  <span class="hljs-comment">//因为数组下标是从0开始算的，这里需要对应地做点调整</span><br> <span class="hljs-built_in">int</span> a<span class="hljs-literal">[]</span> = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>&#125;;  <span class="hljs-comment">//试验数组 </span><br> <br> quick<span class="hljs-constructor">_sort(<span class="hljs-params">a</span>, 0, 6, <span class="hljs-params">k</span>, &amp;<span class="hljs-params">find</span>)</span>;<br> <span class="hljs-comment">//因为在整个递归过程中，存在x_index与k一直不相等的情况（实际上就是递归到底时，</span><br> <span class="hljs-comment">//x恰好就是是k的相邻元素）。这里用find来标记是否相等。 不过无妨，到了最后，即</span><br> <span class="hljs-comment">//便整个数组可能不是有序的，但是下标x_index和k所对应的数，已经恰好是第</span><br> <span class="hljs-comment">//x_index大和第k大的数了，目的已经达成 ，将对应下标k的元素输出即可 </span><br><br> <span class="hljs-keyword">if</span>(find<span class="hljs-operator"> == </span>-<span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">//find为-1说明没有在quick_sort没有找到 k 元素</span><br> printf(<span class="hljs-string">&quot;find number k = %d\n&quot;</span>, a<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span>);<br> &#125;<br> <br> <br><span class="hljs-comment">/*这里打印当前数组元素的顺序，与题目无关，仅仅是想看看数组最后的顺序 */</span> <br> <span class="hljs-built_in">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">6</span>; i++)&#123;<br>printf(<span class="hljs-string">&quot;%d &quot;</span>, a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="三、复杂度分析"><a href="#三、复杂度分析" class="headerlink" title="三、复杂度分析"></a>三、复杂度分析</h3><p><strong>采用主定理分析复杂度：</strong></p><p>每次都考虑一个子问题，a=1，</p><ul><li>best-case(每次主元素都取到中间值)  b=2</li></ul><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel"><span class="hljs-built_in">T</span>(<span class="hljs-built_in">n</span>) = <span class="hljs-built_in">T</span>(<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>)+Θ(<span class="hljs-built_in">n</span>）<br><br>     =&gt;Θ(lgn)<br></code></pre></div></td></tr></table></figure><ul><li>worse-case(每次主元素都取到最大或者最小值）</li></ul><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel"><span class="hljs-built_in">T</span>(<span class="hljs-built_in">n</span>) = <span class="hljs-built_in">T</span>(<span class="hljs-number">0</span>) + <span class="hljs-built_in">T</span>(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>) + Θ(<span class="hljs-built_in">n</span>）<br><br>     = <span class="hljs-built_in">T</span>(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>) + Θ(<span class="hljs-built_in">n</span>)<br><br>     =&gt;Θ(<span class="hljs-built_in">n</span>^<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>事实上主元素采用random方式选取会使这个算法更加稳定。但是我看了下，它的时间复杂度好难算（我不会），所以不了不了，简单点好0_0</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统调用初识</title>
    <link href="/2020/03/16/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%9D%E8%AF%86/"/>
    <url>/2020/03/16/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="linux内核编译及添加系统调用"><a href="#linux内核编译及添加系统调用" class="headerlink" title="linux内核编译及添加系统调用"></a>linux内核编译及添加系统调用</h1><p><strong>本文图片已经失效，同步更新到CSDN的文章仍是完整的，<a href="https://blog.csdn.net/weixin_43641850/article/details/104906726">点击前往</a></strong></p><p>注：文章共四部分，分别是</p><p>1、编译更换内核</p><p>2、添加一个简单系统系统调用</p><p>3、添加读取/修改nice值的系统调用</p><p>4、自己设计简单（真的简单）系统调用</p><p>四个部分结构相似，请根据自身需求自行选择观看。</p><blockquote><p>Tip: 预安装的内核尽量选择与原系统内核版本相近的内核，可选择版本稍微高些的。内核版本差异过大将会出现很多意料之外的错误。如本实验环境中linux1604内核为4.12版本，可考虑使用4.16作为预安装版本</p></blockquote><p><strong>相关实验资源：</strong><br>1、kernel内核源码文档<br><a href="https://elixir.bootlin.com/linux/latest/source/include">https://elixir.bootlin.com/linux/latest/source/include</a></p><p>2、Linux系统版本：Ubuntu16.04<br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/16.04/">ubuntu1604 清华源镜像</a></p><p>3、预安装内核linux-4.16.1<br><a href="https://mirrors.tuna.tsinghua.edu.cn/kernel/v4.x/">linux-4.16内核清华源镜像</a></p><hr><h2 id="一-、下载新内核并编译、更换："><a href="#一-、下载新内核并编译、更换：" class="headerlink" title="(一)、下载新内核并编译、更换："></a>(一)、下载新内核并编译、更换：</h2><h3 id="第一步：下载解压-进入文件夹"><a href="#第一步：下载解压-进入文件夹" class="headerlink" title="第一步：下载解压,进入文件夹"></a>第一步：下载解压,进入文件夹</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.16.1.tar.xz (或者手动下载压缩包解压) </span><br><span class="hljs-meta"># xz –d linux-4.16.1.tar.xz</span><br><span class="hljs-meta"># tar –xvf linux-4.16.1.tar </span><br><span class="hljs-meta"># cd linux-4.16.1</span><br></code></pre></div></td></tr></table></figure><h3 id="第二步-：清楚残留的-config和-o文件"><a href="#第二步-：清楚残留的-config和-o文件" class="headerlink" title="第二步 ：清楚残留的 .config和 .o文件"></a>第二步 ：清楚残留的 .config和 .o文件</h3><p>每次编译出错或者重新编译最好都清理，不清理很占空间，会出现虚拟机存储空间不够的情况</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># make mrproper</span><br></code></pre></div></td></tr></table></figure><p> 报错提醒安装ncurses，重新执行make mrproper</p><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q"># apt-<span class="hljs-built_in">get</span> install libncurses5-<span class="hljs-built_in">dev</span>   <br></code></pre></div></td></tr></table></figure><h3 id="第三步：配置内核"><a href="#第三步：配置内核" class="headerlink" title="第三步：配置内核"></a>第三步：配置内核</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># make menuconfig </span><br></code></pre></div></td></tr></table></figure><p>根据报错提示安装组件，缺啥装啥</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># sudo apt install build-essential <span class="hljs-comment">//安装make和gcc等</span></span><br><span class="hljs-meta"># apt-get install libncurses5-dev <span class="hljs-comment">//安装ncurses-devel</span></span><br><span class="hljs-meta"># sudo apt-get install flex <span class="hljs-comment">//安装flex</span></span><br><span class="hljs-meta"># sudo apt-get install bison  <span class="hljs-comment">//安装bison</span></span><br></code></pre></div></td></tr></table></figure><p>没有报错后再执行</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># make menuconfig </span><br></code></pre></div></td></tr></table></figure><p>出现配置的对话框，直接保存（save），文件名也默认.config, 退出。</p><h3 id="第四步：编译内核，生成启动映像文件"><a href="#第四步：编译内核，生成启动映像文件" class="headerlink" title="第四步：编译内核，生成启动映像文件"></a>第四步：编译内核，生成启动映像文件</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs she&#39;l"># make -j4 &#x2F;&#x2F;-j4是指四线程，用于加快编译速度。<br>ps:嫌慢不如试试-j32，听说即便没有这么多线程也能正常运行的<br></code></pre></div></td></tr></table></figure><p>报错提示要openssl，安装完再次执行命令即可</p><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q"># apt-<span class="hljs-built_in">get</span> install libssl-<span class="hljs-built_in">dev</span> <br></code></pre></div></td></tr></table></figure><h3 id="第五步：编译模块"><a href="#第五步：编译模块" class="headerlink" title="第五步：编译模块"></a>第五步：编译模块</h3><p>这一步要好久（2-3小时，可能虚拟机配置太低吧）。。。。睡一觉回来就好了</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># make modules</span><br></code></pre></div></td></tr></table></figure><h3 id="第六步：安装内核、模块"><a href="#第六步：安装内核、模块" class="headerlink" title="第六步：安装内核、模块"></a>第六步：安装内核、模块</h3><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">安装模块：<span class="hljs-meta"># make modules_install </span><br>安装内核：<span class="hljs-meta"># make install</span><br></code></pre></div></td></tr></table></figure><h3 id="第七步：配置-grub-引导程序"><a href="#第七步：配置-grub-引导程序" class="headerlink" title="第七步：配置 grub 引导程序"></a>第七步：配置 grub 引导程序</h3><p>只需要执行如下命令：该命令会自动修改 grub</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># update-grub2</span><br></code></pre></div></td></tr></table></figure><h3 id="最后一步重启："><a href="#最后一步重启：" class="headerlink" title="最后一步重启："></a>最后一步重启：</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># reboot -n</span><br></code></pre></div></td></tr></table></figure><p>查看内核版本</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># uname -a</span><br></code></pre></div></td></tr></table></figure><p><img src="1582793333263.png"></p><p>成功更换内核！</p><h2 id="二-、添加简单系统调用"><a href="#二-、添加简单系统调用" class="headerlink" title="(二)、添加简单系统调用"></a>(二)、添加简单系统调用</h2><h3 id="第一步：修改源程序"><a href="#第一步：修改源程序" class="headerlink" title="第一步：修改源程序"></a>第一步：修改源程序</h3><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"># cd linux-<span class="hljs-number">4.16</span>.<span class="hljs-number">1</span> <span class="hljs-comment">//进入linux解压包（我下的版本是4.16.1）</span><br># vim arch<span class="hljs-regexp">/x86/</span>entry<span class="hljs-regexp">/syscalls/</span>syscall_64.tbl <span class="hljs-comment">//进入该文件分配系统调用号 （注意别写在最后面，x64部分约300多行，别写到后面x32那一块里面）</span><br></code></pre></div></td></tr></table></figure><p><img src="1582793550595.png"></p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit"><span class="hljs-meta"># vim <span class="hljs-meta-keyword">include</span>/linux/syscalls.h 进入该文件，添加服务例程的原型声明（shift+g快速跳到最后一行）</span><br></code></pre></div></td></tr></table></figure><p><img src="1582793882548.png"></p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># vim kernel/sys.c 实现系统调用服务例程</span><br></code></pre></div></td></tr></table></figure><p>SYSCALL_DEFINE后的数字代表参数个数，这里0个参数（void）</p><p><img src="1582793980496.png"></p><h3 id="第二步：编译安装内核"><a href="#第二步：编译安装内核" class="headerlink" title="第二步：编译安装内核"></a>第二步：编译安装内核</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># make menuconfig 配置内核</span><br><span class="hljs-meta"># make –j2 编译内核</span><br><span class="hljs-meta"># make modules 编译模块</span><br><span class="hljs-meta"># make modules_install 和 make install 安装模块和安装内核</span><br><span class="hljs-meta"># update-grub2（好像虚拟机不需要这一步）</span><br><span class="hljs-meta"># reboot –n 立即重启</span><br></code></pre></div></td></tr></table></figure><h3 id="第三步：新系统调用测试"><a href="#第三步：新系统调用测试" class="headerlink" title="第三步：新系统调用测试"></a>第三步：新系统调用测试</h3><p>这里编写一个test.c文件来测试（文件存放位置可以任意）</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># vim test.c</span><br></code></pre></div></td></tr></table></figure><p><img src="1582794361481.png"></p><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> gcc test.c -o <span class="hljs-built_in">test</span> //-o <span class="hljs-built_in">test</span>指定编译输出文件名为<span class="hljs-built_in">test</span></span><br></code></pre></div></td></tr></table></figure><p><img src="1582794469277.png"></p><p>执行文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ./<span class="hljs-built_in">test</span></span><br></code></pre></div></td></tr></table></figure><p>查看信息</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># dmesg</span><br></code></pre></div></td></tr></table></figure><p><img src="1582794530603.png"></p><p>可见系统调用成功执行</p><h2 id="三-、添加API对指定进程的-nice-值的读取功能"><a href="#三-、添加API对指定进程的-nice-值的读取功能" class="headerlink" title="(三)、添加API对指定进程的 nice 值的读取功能"></a>(三)、添加API对指定进程的 nice 值的读取功能</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">注：nice值表示进程可被执行的优先级的修正数值,加入nice值后，将会使得PRI变为：<span class="hljs-constructor">PRI(<span class="hljs-params">new</span>)</span>=<span class="hljs-constructor">PRI(<span class="hljs-params">old</span>)</span>+nice。这样，当nice值为负值的时候，那么该程序将会优先级值将变小，即其优先级会变高，则其越快被执行。<br></code></pre></div></td></tr></table></figure><p><code>pid</code>：进程ID</p><p><code>flag</code>：等于1表示修改，等于0表示读取</p><p><code>nicevalue</code>：为指定进程设置新的nice值</p><p><code>prio</code>，<code>nice</code>：指向进程当前优先级prio及nice值</p><h3 id="1-修改源程序"><a href="#1-修改源程序" class="headerlink" title="1.修改源程序"></a>1.修改源程序</h3><p>添加系统调用号</p><p><img src="1582796191989.png"></p><p>添加声明</p><p><img src="1582796356918.png"></p><p>具体代码实现</p><p><img src="1582800035795.png"></p><p>copy_to_user函数则是从内核空间拷贝内容到用户空间，用户空间的进程无法直接访问内核空间的内容。这个函数做了数据合法判断。然后进行拷贝。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">static inline <span class="hljs-built_in">int</span> task<span class="hljs-constructor">_nice(<span class="hljs-params">const</span> <span class="hljs-params">struct</span> <span class="hljs-params">task_struct</span> <span class="hljs-operator">*</span><span class="hljs-params">p</span>)</span><br></code></pre></div></td></tr></table></figure><p>用于获取当前task的nice值，并返回nice值，nice值的范围是[ -20 … 0 … 19 ]<br>其使用的例程如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_user_nice</span><span class="hljs-params">(struct task_struct *p, <span class="hljs-keyword">long</span> nice)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">bool</span> queued, running;<br><span class="hljs-keyword">int</span> old_prio, delta;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rq_flags</span> <span class="hljs-title">rf</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rq</span> *<span class="hljs-title">rq</span>;</span><br><br><span class="hljs-keyword">if</span> (task_nice(p) == nice || nice &lt; MIN_NICE || nice &gt; MAX_NICE)<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-编译安装内核"><a href="#2-编译安装内核" class="headerlink" title="2.编译安装内核"></a>2.编译安装内核</h3><p>编译安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># make mrproper</span><br><span class="hljs-comment"># make -j4</span><br><span class="hljs-comment"># make modules</span><br><span class="hljs-comment"># make modules_install</span><br><span class="hljs-comment"># make install</span><br><span class="hljs-comment"># reboot -n</span><br></code></pre></div></td></tr></table></figure><h3 id="3-编写测试程序"><a href="#3-编写测试程序" class="headerlink" title="3.编写测试程序"></a>3.编写测试程序</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># vim test-nice.c  //在哪创建没有特别要求</span><br></code></pre></div></td></tr></table></figure><p><img src="1582941471840.png"></p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"># gcc nice-<span class="hljs-keyword">test</span>.c -o nice-<span class="hljs-keyword">test</span>   <span class="hljs-comment">//编译，格式gcc &lt;c代码文件&gt; -o &lt;输出文件的文件名&gt;</span><br># ./nice-<span class="hljs-keyword">test</span> <span class="hljs-comment">//执行所生成的文件</span><br></code></pre></div></td></tr></table></figure><p><img src="1582941337513.png"></p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># dmesg<span class="hljs-comment">//查看信息</span></span><br></code></pre></div></td></tr></table></figure><p><img src="1582941916641.png"></p><h2 id="四-、自己设计系统调用"><a href="#四-、自己设计系统调用" class="headerlink" title="(四)、自己设计系统调用"></a>(四)、自己设计系统调用</h2><p>CONFIG_NR_CPUS是内核被配置支持的CPU个数，而实际设备的CPU个数是在系统启动过程当中去动态监测的。也就是说你配置系统支持32个CPU那么CONFIG_NR_CPUS就等于32，而num_online_cpus()则是当前设备激活可调度的CPU个数。</p><p>利用内核函数：</p><p><img src="1583398735285.png"></p><p>由于大致流程与前面相似，这里便不再详述</p><p>分配系统调用号（335）</p><p><img src="1583399550731.png"></p><p>添加服务例程原型声明</p><p><img src="1583399672061.png"></p><p>实现系统调用服务例程</p><p><img src="1583400246725.png"></p><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> make mrproper</span><br><span class="hljs-meta">#</span><span class="bash"> make -j4</span><br><span class="hljs-meta">#</span><span class="bash"> make modules</span><br><span class="hljs-meta">#</span><span class="bash"> make modules_install</span><br><span class="hljs-meta">#</span><span class="bash"> make install</span><br><span class="hljs-meta">#</span><span class="bash"> reboot -n</span><br></code></pre></div></td></tr></table></figure><p>编写测试程序</p><p><img src="1583417793639.png"></p><p>编译执行后, dmesg查看信息，如图</p><p><img src="1583417777075.png"></p>]]></content>
    
    
    <categories>
      
      <category>Linux操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux操作系统</tag>
      
      <tag>Ubuntu16.04</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
